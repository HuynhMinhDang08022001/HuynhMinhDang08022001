/*@!Encoding:1252*/

variables
{
    //Used interact between raw and the physical environment variables
    byte chgEv_GW_387_BCM_FrontWiperStatus = 0;
    byte chgEv_GW_387_BCM_RainfallLevel = 0;
    byte chgEv_GW_18E_EMS_AccPedal = 0;
    byte chgEv_GW_18E_EMS_EngineStatus = 0;
    byte chgEv_GW_18E_EMS_RealAccPedal = 0;
    byte chgEv_GW_18E_EMS_EngineSpeed = 0;
    byte chgEv_GW_18E_EMS_BrakePedalStatus = 0;
    byte chgEv_GW_3FD_BCM_PowerManageLevel = 0;
    byte chgEv_GW_3C4_HU_EnterSlopeInfo = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_30m = 0;
    byte chgEv_GW_3C4_HU_TrafficAccident_Info = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_20m = 0;
    byte chgEv_GW_3C4_HU_EnterTunnelInfo = 0;
    byte chgEv_GW_3C4_HU_MapDataUpdateStatus = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_10m = 0;
    byte chgEv_GW_3C4_HU_BranchInfo = 0;
    byte chgEv_GW_3C4_HU_Road_TrafficFlow = 0;
    byte chgEv_GW_3C4_HU_FallingRockDi = 0;
    byte chgEv_GW_3C4_HU_Byroad = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature = 0;
    byte chgEv_GW_3C4_HU_LaneCnt = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_90m = 0;
    byte chgEv_GW_3C4_HU_SlopeDistance = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_80m = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_100m = 0;
    byte chgEv_GW_3C4_HU_MapMatchStatus = 0;
    byte chgEv_GW_3C4_HU_TollDis = 0;
    byte chgEv_GW_3C4_HU_To_Construction_Dis = 0;
    byte chgEv_GW_3C4_HU_To_Branch_Dis = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_70m = 0;
    byte chgEv_GW_3C4_HU_To_TrafficAccident_Dis = 0;
    byte chgEv_GW_3C4_HU_Construction_Info = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_60m = 0;
    byte chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist = 0;
    byte chgEv_GW_3C4_HU_TollInfo = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_300m = 0;
    byte chgEv_GW_3C4_HU_NavGuiganceStatus = 0;
    byte chgEv_GW_3C4_HU_Lane_Changtype = 0;
    byte chgEv_GW_3C4_HU_RoadCurvatureFar = 0;
    byte chgEv_GW_3C4_HU_RampSide = 0;
    byte chgEv_GW_3C4_HU_ForwardRoadType = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_400m = 0;
    byte chgEv_GW_3C4_HU_FallingRockInfo = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_600m = 0;
    byte chgEv_GW_3C4_HU_TunnelDistance = 0;
    byte chgEv_GW_3C4_HU_SlopeGradient_300m = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_50m = 0;
    byte chgEv_GW_3C4_HU_RoadCurvature_40m = 0;
    byte chgEv_GW_3C4_HU_TunnelLength = 0;
    byte chgEv_GW_3FF_BCM_LeftLowBeamError = 0;
    byte chgEv_GW_3FF_BCM_FrontFoglampStatus = 0;
    byte chgEv_GW_3FF_BCM_AutoHeadlightSts = 0;
    byte chgEv_GW_3FF_BCM_RightLowBeamError = 0;
    byte chgEv_GW_50_SRS_WarningLampStatus = 0;
    byte chgEv_GW_50_SRS_DriverBuckleSwitchStatus = 0;
    byte chgEv_GW_50_SRS_CrashOutputStatus = 0;
    byte chgEv_GW_50_SRS_CrashOutputStatusCheckSum = 0;
    byte chgEv_GW_188_TCU_ShiftinProgressValid = 0;
    byte chgEv_GW_188_TCU_ShiftinProgress = 0;
    byte chgEv_GW_24F_EPS_TorqueAssistMode = 0;
    byte chgEv_GW_24F_EPS_IACC_abortreason = 0;
    byte chgEv_GW_24F_EPS_ConcussAvailabilityStatus = 0;
    byte chgEv_APA_247_APA_APAOnOff = 0;
    byte chgEv_GW_278_ESP_LongAccel = 0;
    byte chgEv_GW_278_ESP_YawRateValid = 0;
    byte chgEv_GW_278_ESP_YawRate = 0;
    byte chgEv_GW_278_ESP_IMUCalibrated = 0;
    byte chgEv_GW_278_ESP_LatAccelValid = 0;
    byte chgEv_GW_278_ESP_YawRateValid_R = 0;
    byte chgEv_GW_278_ESP_LatAccel = 0;
    byte chgEv_GW_278_ESP_LongAccelValid = 0;
    byte chgEv_GW_507_HU_LASModeSelection = 0;
    byte chgEv_GW_507_HU_OverspeedWarningOffset = 0;
    byte chgEv_GW_507_HU_LASWarningModeSelection = 0;
    byte chgEv_GW_507_HU_LDWShakeLev = 0;
    byte chgEv_GW_507_HU_TSRSwitch = 0;
    byte chgEv_GW_507_HU_OverspeedWarningEnable = 0;
    byte chgEv_GW_507_HU_OverspeedSoundWarEnable = 0;
    byte chgEv_GW_507_HU_HMAEnable = 0;
    byte chgEv_GW_507_HU_IACCEnable = 0;
    byte chgEv_GW_507_HU_FCWSetting = 0;
    byte chgEv_GW_298_BCM_LeftRearDoorStatus = 0;
    byte chgEv_GW_1A8_TCU_ShiftPostionValid = 0;
    byte chgEv_GW_1A8_TCU_GearShiftPosition = 0;
    byte chgEv_GW_1A8_TCU_ActualGearValid = 0;
    byte chgEv_GW_1A8_TCU_FastOnMode = 0;
    byte chgEv_GW_1A8_TCU_ActualGear = 0;
    byte chgEv_GW_3E7_BCM_Status_Temp = 0;
    byte chgEv_GW_3E7_BCM_T_BATT = 0;
    byte chgEv_EPBi_20B_ESP_AWBactive = 0;
    byte chgEv_EPBi_20B_ESP_AWBavailable = 0;
    byte chgEv_EPBi_20B_ESP_PrefillActive = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RL_Data = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RL_Direction = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data = 0;
    byte chgEv_EPBi_20B_ESP_PrefillAvailable = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_FR_Data = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data = 0;
    byte chgEv_EPBi_20B_ESP_TCSActive = 0;
    byte chgEv_EPBi_20B_ESP_AEBdecActive = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RR_Direction = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RL_Pulse = 0;
    byte chgEv_EPBi_20B_ESP_ABAavailable = 0;
    byte chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_FL_Direction = 0;
    byte chgEv_EPBi_20B_ESP_ABAactive = 0;
    byte chgEv_EPBi_20B_ESP_AEBAvailable = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_FR_Direction = 0;
    byte chgEv_EPBi_20B_ESP_VDCActive = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_FL_Data = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RR_Pulse = 0;
    byte chgEv_EPBi_20B_ESP_MasCylBrakePressureValid = 0;
    byte chgEv_EPBi_20B_ESP_BrakeForce = 0;
    byte chgEv_EPBi_20B_Wheel_Speed_RR_Data = 0;
    byte chgEv_EPBi_20B_ESP_OnlyABSActive = 0;
    byte chgEv_EPBi_20B_ESP_VehicleStandstill = 0;
    byte chgEv_EPBi_20B_ESP_MasCylBrakePressure = 0;
    byte chgEv_ADC_2A4_LCDAR_ELK_oAlert = 0;
    byte chgEv_ADC_2A4_LCDAR_ELK_oStatus = 0;
    byte chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert = 0;
    byte chgEv_GW_3AF_HU_NavStatus = 0;
    byte chgEv_GW_3AF_HU_EnterCurveInfo = 0;
    byte chgEv_GW_3AF_HU_NavSpeedLimitType = 0;
    byte chgEv_GW_3AF_HU_NavCountryCode = 0;
    byte chgEv_GW_3AF_HU_NavSpeedLimitUnits = 0;
    byte chgEv_GW_3AF_HU_NavSpeedLimit = 0;
    byte chgEv_GW_3AF_HU_NavCurrentRoadType = 0;
    byte chgEv_GW_3AF_HU_CurveDistance = 0;
    byte chgEv_GW_3AF_HU_RampDistance = 0;
    byte chgEv_GW_3AF_HU_NavSpeedLimitStatus = 0;
    byte chgEv_GW_3AF_HU_RampInfo = 0;
    byte chgEv_GW_3AF_HU_EnterRampInfo = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Dy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Dx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Location = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RelAy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RelAx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RelVx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Width = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RelAy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Type = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Location = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RelVx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RelVy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Type = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Height = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Height = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Length = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Dx = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Dy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ1_Measured = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RelVy = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Measured = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Width = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_Length = 0;
    byte chgEv_GW_2E2_RLR_ElkOBJ2_RelAx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Height = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RelVx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Width = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Location = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Type = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RelVy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Measured = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RelAy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RelAx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Location = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RelVy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RelVx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Type = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Length = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Length = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Dy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Dx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Width = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Measured = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Dx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_Dy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RelAx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_RelAy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb = 0;
    byte chgEv_GW_2E3_RLR_ElkOBJ4_Height = 0;
    byte chgEv_GW_17E_EPS_LatCtrlActive = 0;
    byte chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid = 0;
    byte chgEv_GW_17E_EPS_ADS_Abortfeedback = 0;
    byte chgEv_GW_17E_EPS_MeasuredTorsionBarTorque = 0;
    byte chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus = 0;
    byte chgEv_GW_17A_ESP_ESPActiveStatus = 0;
    byte chgEv_GW_NM_GW_NMSourceAddress = 0;
    byte chgEv_GW_17A_ESP_ESPFunctionStatus = 0;
    byte chgEv_GW_17A_ESP_ABSFailStatus = 0;
    byte chgEv_GW_17A_ESP_VehicleSpeedValid = 0;
    byte chgEv_GW_17A_ESP_VehicleSpeed = 0;
    byte chgEv_GW_17A_ESP_TCSFailStatus = 0;
    byte chgEv_GW_17A_ESP_ABSActiveStatus = 0;
    byte chgEv_GW_516_HU_LocalTimeSecond = 0;
    byte chgEv_GW_516_HU_CurrentLocationLongitude = 0;
    byte chgEv_GW_516_HU_LocalTimeSystem = 0;
    byte chgEv_GW_516_HU_LocalTimeValid = 0;
    byte chgEv_GW_516_HU_LocalTimeHour = 0;
    byte chgEv_GW_516_HU_LocalTimeDate = 0;
    byte chgEv_GW_516_HU_CurrentLocationLatitude = 0;
    byte chgEv_GW_516_HU_CurrentLocationValid = 0;
    byte chgEv_GW_516_HU_LocalTimeMinute = 0;
    byte chgEv_GW_516_HU_LocalTimeYear = 0;
    byte chgEv_GW_516_HU_LocalTimeMonth = 0;
    byte chgEv_ADS_244_ACC_AEBActive = 0;
    byte chgEv_GW_3E8_BCM_SOF_Q_STATE = 0;
    byte chgEv_GW_3E8_BCM_SOF_Q = 0;
    byte chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 = 0;
    byte chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 = 0;
    byte chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 = 0;
    byte chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 = 0;
    byte chgEv_GW_28C_GW_MFS_IACCenable_switch_signal = 0;
    byte chgEv_GW_530_IP_TotalOdometer = 0;
    byte chgEv_ACC_NM_ACC_NMSourceAddress = 0;
    byte chgEv_GW_180_SAS_SteeringAngleValid = 0;
    byte chgEv_GW_180_SAS_Calibrated = 0;
    byte chgEv_GW_180_SAS_SteeringAngle = 0;
    byte chgEv_GW_180_SAS_SteeringAngleSpeed = 0;
    byte chgEv_GW_180_SAS_SASFailure = 0;
    byte chgEv_GW_320_GW_ResetReq = 0;
    byte chgEv_GW_3BD_HU_TLAEnable = 0;
    byte chgEv_GW_3BD_HU_ELKEnable = 0;
    byte chgEv_GW_28B_LCM_LASSwitch = 0;
    byte chgEv_GW_28B_BCM_DriverDoorStatus = 0;
    byte chgEv_GW_28B_BCM_emergencylightstatus = 0;
    byte chgEv_GW_28B_BCM_LowBeamStatus = 0;
    byte chgEv_GW_28B_BCM_TurnIndicatorLeft = 0;
    byte chgEv_GW_28B_BCM_TurnLightSwitchSts = 0;
    byte chgEv_GW_28B_BCM_HighBeamStatus = 0;
    byte chgEv_GW_28B_BCM_TurnIndicatorRight = 0;
    
    message GW_387        Msg_GW_387;
    msTimer Tm_GW_387;
    int Cycle_GW_387 = 100;
    message GW_18E        Msg_GW_18E;
    msTimer Tm_GW_18E;
    int Cycle_GW_18E = 10;
    message GW_3FD        Msg_GW_3FD;
    msTimer Tm_GW_3FD;
    int Cycle_GW_3FD = 100;
    message GW_3C4        Msg_GW_3C4;
    msTimer Tm_GW_3C4;
    int Cycle_GW_3C4 = 100;
    message GW_3FF        Msg_GW_3FF;
    msTimer Tm_GW_3FF;
    int Cycle_GW_3FF = 100;
    message GW_50        Msg_GW_50;
    msTimer Tm_GW_50;
    int Cycle_GW_50 = 500;
    message GW_188        Msg_GW_188;
    msTimer Tm_GW_188;
    int Cycle_GW_188 = 10;
    message GW_24F        Msg_GW_24F;
    msTimer Tm_GW_24F;
    int Cycle_GW_24F = 20;
    message APA_247        Msg_APA_247;
    msTimer Tm_APA_247;
    int Cycle_APA_247 = 20;
    message GW_278        Msg_GW_278;
    msTimer Tm_GW_278;
    int Cycle_GW_278 = 20;
    message GW_507        Msg_GW_507;
    message GW_298        Msg_GW_298;
    msTimer Tm_GW_298;
    int Cycle_GW_298 = 40;
    message GW_1A8        Msg_GW_1A8;
    msTimer Tm_GW_1A8;
    int Cycle_GW_1A8 = 10;
    message GW_3E7        Msg_GW_3E7;
    msTimer Tm_GW_3E7;
    int Cycle_GW_3E7 = 100;
    message EPBi_20B        Msg_EPBi_20B;
    msTimer Tm_EPBi_20B;
    int Cycle_EPBi_20B = 20;
    message ADC_2A4        Msg_ADC_2A4;
    msTimer Tm_ADC_2A4;
    int Cycle_ADC_2A4 = 50;
    message GW_3AF        Msg_GW_3AF;
    msTimer Tm_GW_3AF;
    int Cycle_GW_3AF = 100;
    message GW_2E2        Msg_GW_2E2;
    msTimer Tm_GW_2E2;
    int Cycle_GW_2E2 = 50;
    message GW_2E3        Msg_GW_2E3;
    msTimer Tm_GW_2E3;
    int Cycle_GW_2E3 = 50;
    message GW_17E        Msg_GW_17E;
    msTimer Tm_GW_17E;
    int Cycle_GW_17E = 10;
    message GW_NM        Msg_GW_NM;
    msTimer Tm_GW_NM;
    int Cycle_GW_NM = 1000;
    message GW_17A        Msg_GW_17A;
    msTimer Tm_GW_17A;
    int Cycle_GW_17A = 10;
    message GW_516        Msg_GW_516;
    msTimer Tm_GW_516;
    int Cycle_GW_516 = 1000;
    message ADS_244        Msg_ADS_244;
    msTimer Tm_ADS_244;
    int Cycle_ADS_244 = 20;
    message GW_3E8        Msg_GW_3E8;
    msTimer Tm_GW_3E8;
    int Cycle_GW_3E8 = 100;
    message ACC_592        Msg_ACC_592;
    msTimer Tm_ACC_592;
    int Cycle_ACC_592 = 1000;
    message GW_28C        Msg_GW_28C;
    msTimer Tm_GW_28C;
    int Cycle_GW_28C = 40;
    message GW_530        Msg_GW_530;
    msTimer Tm_GW_530;
    int Cycle_GW_530 = 500;
    message ACC_NM        Msg_ACC_NM;
    msTimer Tm_ACC_NM;
    int Cycle_ACC_NM = 1000;
    message GW_180        Msg_GW_180;
    msTimer Tm_GW_180;
    int Cycle_GW_180 = 10;
    message GW_320        Msg_GW_320;
    msTimer Tm_GW_320;
    int Cycle_GW_320 = 100;
    message GW_3BD        Msg_GW_3BD;
    msTimer Tm_GW_3BD;
    int Cycle_GW_3BD = 100;
    message GW_28B        Msg_GW_28B;
    msTimer Tm_GW_28B;
    int Cycle_GW_28B = 40;
    
    int GW_18E_EMS_CRCCheck_1A6_counter =0;
    int GW_18E_EMS_CRCCheck_1A6_wrongvalctr =0;
    int GW_18E_EMS_RollingCounter_1A6_counter =0;
    int GW_18E_EMS_RollingCounter_1A6_wrongvalctr =0;
    int GW_3C4_HU_CRCCheck_3B8_counter =0;
    int GW_3C4_HU_CRCCheck_3B8_wrongvalctr =0;
    int GW_3C4_HU_CRCCheck_3C2_counter =0;
    int GW_3C4_HU_CRCCheck_3C2_wrongvalctr =0;
    int GW_3C4_HU_CRCCheck_3C4_counter =0;
    int GW_3C4_HU_CRCCheck_3C4_wrongvalctr =0;
    int GW_3C4_HU_CRCCheck_3C6_counter =0;
    int GW_3C4_HU_CRCCheck_3C6_wrongvalctr =0;
    int GW_3C4_HU_CRCCheck_3C7_counter =0;
    int GW_3C4_HU_CRCCheck_3C7_wrongvalctr =0;
    int GW_3C4_HU_RollingCounter_3B8_counter =0;
    int GW_3C4_HU_RollingCounter_3B8_wrongvalctr =0;
    int GW_3C4_HU_RollingCounter_3C2_counter =0;
    int GW_3C4_HU_RollingCounter_3C2_wrongvalctr =0;
    int GW_3C4_HU_RollingCounter_3C4_counter =0;
    int GW_3C4_HU_RollingCounter_3C4_wrongvalctr =0;
    int GW_3C4_HU_RollingCounter_3C6_counter =0;
    int GW_3C4_HU_RollingCounter_3C6_wrongvalctr =0;
    int GW_3C4_HU_RollingCounter_3C7_counter =0;
    int GW_3C4_HU_RollingCounter_3C7_wrongvalctr =0;
    int GW_50_SRS_CRCCheck_50_counter =0;
    int GW_50_SRS_CRCCheck_50_wrongvalctr =0;
    int GW_50_SRS_RollingCounter_id050_counter =0;
    int GW_50_SRS_RollingCounter_id050_wrongvalctr =0;
    int GW_188_TCU_CRCCheck_188_counter =0;
    int GW_188_TCU_CRCCheck_188_wrongvalctr =0;
    int GW_188_TCU_RollingCounter_188_counter =0;
    int GW_188_TCU_RollingCounter_188_wrongvalctr =0;
    int GW_24F_EPS_CRCCheck_24F_counter =0;
    int GW_24F_EPS_CRCCheck_24F_wrongvalctr =0;
    int GW_24F_EPS_RollingCounter_24F_counter =0;
    int GW_24F_EPS_RollingCounter_24F_wrongvalctr =0;
    int GW_278_ESP_CRCCheck_278_counter =0;
    int GW_278_ESP_CRCCheck_278_wrongvalctr =0;
    int GW_278_ESP_RollingCounter_278_counter =0;
    int GW_278_ESP_RollingCounter_278_wrongvalctr =0;
    int GW_1A8_TCU_CRCCheck_1A8_counter =0;
    int GW_1A8_TCU_CRCCheck_1A8_wrongvalctr =0;
    int GW_1A8_TCU_RollingCounter_1A8_counter =0;
    int GW_1A8_TCU_RollingCounter_1A8_wrongvalctr =0;
    int EPBi_20B_ESP_CRCCheck_206_counter =0;
    int EPBi_20B_ESP_CRCCheck_206_wrongvalctr =0;
    int EPBi_20B_ESP_CRCCheck_208_counter =0;
    int EPBi_20B_ESP_CRCCheck_208_wrongvalctr =0;
    int EPBi_20B_ESP_CRCCheck_258_counter =0;
    int EPBi_20B_ESP_CRCCheck_258_wrongvalctr =0;
    int EPBi_20B_ESP_CRCCheck_277_counter =0;
    int EPBi_20B_ESP_CRCCheck_277_wrongvalctr =0;
    int EPBi_20B_ESP_RollingCounter_206_counter =0;
    int EPBi_20B_ESP_RollingCounter_206_wrongvalctr =0;
    int EPBi_20B_ESP_RollingCounter_208_counter =0;
    int EPBi_20B_ESP_RollingCounter_208_wrongvalctr =0;
    int EPBi_20B_ESP_RollingCounter_258_counter =0;
    int EPBi_20B_ESP_RollingCounter_258_wrongvalctr =0;
    int EPBi_20B_ESP_RollingCounter_277_counter =0;
    int EPBi_20B_ESP_RollingCounter_277_wrongvalctr =0;
    int ADC_2A4_LCDAR_CRCCheck_2AF_counter =0;
    int ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr =0;
    int ADC_2A4_LCDAR_RollingCounter_2AF_counter =0;
    int ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr =0;
    int GW_3AF_HU_CRCCheck_3AF_counter =0;
    int GW_3AF_HU_CRCCheck_3AF_wrongvalctr =0;
    int GW_3AF_HU_RollingCounter_3AF_counter =0;
    int GW_3AF_HU_RollingCounter_3AF_wrongvalctr =0;
    int GW_2E2_RLR_CRCCheck_2E2_counter =0;
    int GW_2E2_RLR_CRCCheck_2E2_wrongvalctr =0;
    int GW_2E2_RLR_RollingCounter_2E2_counter =0;
    int GW_2E2_RLR_RollingCounter_2E2_wrongvalctr =0;
    int GW_2E3_RLR_CRCCheck_2E3_counter =0;
    int GW_2E3_RLR_CRCCheck_2E3_wrongvalctr =0;
    int GW_2E3_RLR_RollingCounter_2E3_counter =0;
    int GW_2E3_RLR_RollingCounter_2E3_wrongvalctr =0;
    int GW_17E_EPS_CRCCheck_17E_counter =0;
    int GW_17E_EPS_CRCCheck_17E_wrongvalctr =0;
    int GW_17E_EPS_RollingCounter_17E_counter =0;
    int GW_17E_EPS_RollingCounter_17E_wrongvalctr =0;
    int GW_17A_ESP_CRCCheck_187_counter =0;
    int GW_17A_ESP_CRCCheck_187_wrongvalctr =0;
    int GW_17A_ESP_CRCCheck_197_counter =0;
    int GW_17A_ESP_CRCCheck_197_wrongvalctr =0;
    int GW_17A_ESP_RollingCounter_187_counter =0;
    int GW_17A_ESP_RollingCounter_187_wrongvalctr =0;
    int GW_28C_GW_MFS_CRCCheck_28C_counter =0;
    int GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr =0;
    int GW_28C_GW_MFS_RollingCounter_28C_counter =0;
    int GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr =0;
    int GW_180_SAS_CRCCheck_counter =0;
    int GW_180_SAS_CRCCheck_wrongvalctr =0;
    int GW_180_SAS_RollingCounter_counter =0;
    int GW_180_SAS_RollingCounter_wrongvalctr =0;
    
    ///CRC Polynomial for MQB     
    byte cb_CRC_POLY_MQB =0x2F;
	// CANFD DLC
	byte Dbc_dlc;
	int i=0;
	char CAN_DLC[7]={9,10,11,12,13,14,15};
	char CANFD_DLC[7]={12,16,20,24,32,48,64};
    

    
        byte CRC_J1850_Table[256] = {
 /*0 - 7*/  0x00, 0x1D, 0x3A, 0x27, 0x74, 0x69, 0x4E, 0x53,
 /*8 - 15*/ 0xE8, 0xF5, 0xD2, 0xCF, 0x9C, 0x81, 0xA6, 0xBB,
 /*16 - 23*/ 0xCD, 0xD0, 0xF7, 0xEA, 0xB9, 0xA4, 0x83, 0x9E,
 /*24 - 31*/ 0x25, 0x38, 0x1F, 0x02, 0x51, 0x4C, 0x6B, 0x76,
 /*32 - 39*/ 0x87, 0x9A, 0xBD, 0xA0, 0xF3, 0xEE, 0xC9, 0xD4,
 /*40 - 47*/ 0x6F, 0x72, 0x55, 0x48, 0x1B, 0x06, 0x21, 0x3C,
 /*48 - 55*/ 0x4A, 0x57, 0x70, 0x6D, 0x3E, 0x23, 0x04, 0x19,
 /*56 - 63*/ 0xA2, 0xBF, 0x98, 0x85, 0xD6, 0xCB, 0xEC, 0xF1,
 /*64 - 71*/  0x13, 0x0E, 0x29, 0x34, 0x67, 0x7A, 0x5D, 0x40,
 /*72 - 79*/ 0xFB, 0xE6, 0xC1, 0xDC, 0x8F, 0x92, 0xB5, 0xA8,
 /*80 - 87*/ 0xDE, 0xC3, 0xE4, 0xF9, 0xAA, 0xB7, 0x90, 0x8D,
 /*88 - 95*/ 0x36, 0x2B, 0x0C, 0x11, 0x42, 0x5F, 0x78, 0x65,
 /*96 - 103*/ 0x94, 0x89, 0xAE, 0xB3, 0xE0, 0xFD, 0xDA, 0xC7,
 /*104 - 111*/ 0x7C, 0x61, 0x46, 0x5B, 0x08, 0x15, 0x32, 0x2F,
 /*112 - 119*/ 0x59, 0x44, 0x63, 0x7E, 0x2D, 0x30, 0x17, 0x0A,
 /*120 - 127*/ 0xB1, 0xAC, 0x8B, 0x96, 0xC5, 0xD8, 0xFF, 0xE2,
 /*128 - 135*/ 0x26, 0x3B, 0x1C, 0x01, 0x52, 0x4F, 0x68, 0x75,
 /*136 - 143*/ 0xCE, 0xD3, 0xF4, 0xE9, 0xBA, 0xA7, 0x80, 0x9D,
 /*144 - 151*/ 0xEB, 0xF6, 0xD1, 0xCC, 0x9F, 0x82, 0xA5, 0xB8,
 /*152 - 159*/ 0x03, 0x1E, 0x39, 0x24, 0x77, 0x6A, 0x4D, 0x50,
 /*160 - 167*/ 0xA1, 0xBC, 0x9B, 0x86, 0xD5, 0xC8, 0xEF, 0xF2,
 /*168 - 175*/ 0x49, 0x54, 0x73, 0x6E, 0x3D, 0x20, 0x07, 0x1A,
 /*176 - 183*/ 0x6C, 0x71, 0x56, 0x4B, 0x18, 0x05, 0x22, 0x3F,
 /*184 - 191*/ 0x84, 0x99, 0xBE, 0xA3, 0xF0, 0xED, 0xCA, 0xD7,
 /*192 - 199*/ 0x35, 0x28, 0x0F, 0x12, 0x41, 0x5C, 0x7B, 0x66,
 /*200 - 207*/ 0xDD, 0xC0, 0xE7, 0xFA, 0xA9, 0xB4, 0x93, 0x8E,
 /*208 - 215*/ 0xF8, 0xE5, 0xC2, 0xDF, 0x8C, 0x91, 0xB6, 0xAB,
 /*216 - 223*/ 0x10, 0x0D, 0x2A, 0x37, 0x64, 0x79, 0x5E, 0x43,
 /*224 - 231*/ 0xB2, 0xAF, 0x88, 0x95, 0xC6, 0xDB, 0xFC, 0xE1,
 /*232 - 239*/ 0x5A, 0x47, 0x60, 0x7D, 0x2E, 0x33, 0x14, 0x09,
 /*240 - 247*/ 0x7F, 0x62, 0x45, 0x58, 0x0B, 0x16, 0x31, 0x2C,
 /*248 - 255*/ 0x97, 0x8A, 0xAD, 0xB0, 0xE3, 0xFE, 0xD9, 0xC4
};

int64 CRC16_CCITT_FALSE_H1021_Table[256] ={
    /*0 - 7*/     0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    /*8 - 15*/    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    /*16 - 23*/   0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    /*24 - 31*/   0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    /*32 - 39*/   0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    /*40 - 47*/   0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    /*48 - 55*/   0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    /*56 - 63*/   0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    /*64 - 71*/   0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    /*72 - 79*/   0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    /*80 - 87*/   0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    /*88 - 95*/   0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    /*96 - 103*/  0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    /*104 - 111*/ 0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    /*112 - 119*/ 0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    /*120 - 127*/ 0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    /*128 - 135*/ 0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    /*136 - 143*/ 0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    /*144 - 151*/ 0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    /*152 - 159*/ 0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    /*160 - 167*/ 0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    /*168 - 175*/ 0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    /*176 - 183*/ 0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    /*184 - 191*/ 0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    /*192 - 199*/ 0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    /*200 - 207*/ 0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    /*208 - 215*/ 0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    /*216 - 223*/ 0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    /*224 - 231*/ 0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    /*232 - 239*/ 0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    /*240 - 247*/ 0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    /*248 - 255*/ 0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
         
}


on start
{
    //Initialise cycle time and message timer 
    putValue(E_pubc_GW_GW_387_cycleTm,Cycle_GW_387);
    SetTimer( Tm_GW_387,100);
    putValue(E_pubc_GW_GW_387_Tm,1);
    putValue(E_pubc_GW_GW_18E_cycleTm,Cycle_GW_18E);
    SetTimer( Tm_GW_18E,101);
    putValue(E_pubc_GW_GW_18E_Tm,1);
    putValue(E_pubc_GW_GW_3FD_cycleTm,Cycle_GW_3FD);
    SetTimer( Tm_GW_3FD,102);
    putValue(E_pubc_GW_GW_3FD_Tm,1);
    putValue(E_pubc_GW_GW_3C4_cycleTm,Cycle_GW_3C4);
    SetTimer( Tm_GW_3C4,103);
    putValue(E_pubc_GW_GW_3C4_Tm,1);
    putValue(E_pubc_GW_GW_3FF_cycleTm,Cycle_GW_3FF);
    SetTimer( Tm_GW_3FF,104);
    putValue(E_pubc_GW_GW_3FF_Tm,1);
    putValue(E_pubc_GW_GW_50_cycleTm,Cycle_GW_50);
    SetTimer( Tm_GW_50,105);
    putValue(E_pubc_GW_GW_50_Tm,1);
    putValue(E_pubc_GW_GW_188_cycleTm,Cycle_GW_188);
    SetTimer( Tm_GW_188,106);
    putValue(E_pubc_GW_GW_188_Tm,1);
    putValue(E_pubc_GW_GW_24F_cycleTm,Cycle_GW_24F);
    SetTimer( Tm_GW_24F,107);
    putValue(E_pubc_GW_GW_24F_Tm,1);
    putValue(E_pubc_GW_APA_247_cycleTm,Cycle_APA_247);
    SetTimer( Tm_APA_247,108);
    putValue(E_pubc_GW_APA_247_Tm,1);
    putValue(E_pubc_GW_GW_278_cycleTm,Cycle_GW_278);
    SetTimer( Tm_GW_278,109);
    putValue(E_pubc_GW_GW_278_Tm,1);
    putValue(E_pubc_GW_GW_298_cycleTm,Cycle_GW_298);
    SetTimer( Tm_GW_298,110);
    putValue(E_pubc_GW_GW_298_Tm,1);
    putValue(E_pubc_GW_GW_1A8_cycleTm,Cycle_GW_1A8);
    SetTimer( Tm_GW_1A8,111);
    putValue(E_pubc_GW_GW_1A8_Tm,1);
    putValue(E_pubc_GW_GW_3E7_cycleTm,Cycle_GW_3E7);
    SetTimer( Tm_GW_3E7,112);
    putValue(E_pubc_GW_GW_3E7_Tm,1);
    putValue(E_pubc_GW_EPBi_20B_cycleTm,Cycle_EPBi_20B);
    SetTimer( Tm_EPBi_20B,113);
    putValue(E_pubc_GW_EPBi_20B_Tm,1);
    putValue(E_pubc_GW_ADC_2A4_cycleTm,Cycle_ADC_2A4);
    SetTimer( Tm_ADC_2A4,114);
    putValue(E_pubc_GW_ADC_2A4_Tm,1);
    putValue(E_pubc_GW_GW_3AF_cycleTm,Cycle_GW_3AF);
    SetTimer( Tm_GW_3AF,115);
    putValue(E_pubc_GW_GW_3AF_Tm,1);
    putValue(E_pubc_GW_GW_2E2_cycleTm,Cycle_GW_2E2);
    SetTimer( Tm_GW_2E2,116);
    putValue(E_pubc_GW_GW_2E2_Tm,1);
    putValue(E_pubc_GW_GW_2E3_cycleTm,Cycle_GW_2E3);
    SetTimer( Tm_GW_2E3,117);
    putValue(E_pubc_GW_GW_2E3_Tm,1);
    putValue(E_pubc_GW_GW_17E_cycleTm,Cycle_GW_17E);
    SetTimer( Tm_GW_17E,118);
    putValue(E_pubc_GW_GW_17E_Tm,1);
    putValue(E_pubc_GW_GW_NM_cycleTm,Cycle_GW_NM);
    SetTimer( Tm_GW_NM,119);
    putValue(E_pubc_GW_GW_NM_Tm,1);
    putValue(E_pubc_GW_GW_17A_cycleTm,Cycle_GW_17A);
    SetTimer( Tm_GW_17A,120);
    putValue(E_pubc_GW_GW_17A_Tm,1);
    putValue(E_pubc_GW_GW_516_cycleTm,Cycle_GW_516);
    SetTimer( Tm_GW_516,121);
    putValue(E_pubc_GW_GW_516_Tm,1);
    putValue(E_pubc_GW_ADS_244_cycleTm,Cycle_ADS_244);
    SetTimer( Tm_ADS_244,122);
    putValue(E_pubc_GW_ADS_244_Tm,1);
    putValue(E_pubc_GW_GW_3E8_cycleTm,Cycle_GW_3E8);
    SetTimer( Tm_GW_3E8,123);
    putValue(E_pubc_GW_GW_3E8_Tm,1);
    putValue(E_pubc_GW_ACC_592_cycleTm,Cycle_ACC_592);
    SetTimer( Tm_ACC_592,124);
    putValue(E_pubc_GW_ACC_592_Tm,1);
    putValue(E_pubc_GW_GW_28C_cycleTm,Cycle_GW_28C);
    SetTimer( Tm_GW_28C,125);
    putValue(E_pubc_GW_GW_28C_Tm,1);
    putValue(E_pubc_GW_GW_530_cycleTm,Cycle_GW_530);
    SetTimer( Tm_GW_530,126);
    putValue(E_pubc_GW_GW_530_Tm,1);
    putValue(E_pubc_GW_ACC_NM_cycleTm,Cycle_ACC_NM);
    SetTimer( Tm_ACC_NM,127);
    putValue(E_pubc_GW_ACC_NM_Tm,1);
    putValue(E_pubc_GW_GW_180_cycleTm,Cycle_GW_180);
    SetTimer( Tm_GW_180,128);
    putValue(E_pubc_GW_GW_180_Tm,1);
    putValue(E_pubc_GW_GW_320_cycleTm,Cycle_GW_320);
    SetTimer( Tm_GW_320,129);
    putValue(E_pubc_GW_GW_320_Tm,1);
    putValue(E_pubc_GW_GW_3BD_cycleTm,Cycle_GW_3BD);
    SetTimer( Tm_GW_3BD,130);
    putValue(E_pubc_GW_GW_3BD_Tm,1);
    putValue(E_pubc_GW_GW_28B_cycleTm,Cycle_GW_28B);
    SetTimer( Tm_GW_28B,131);
    putValue(E_pubc_GW_GW_28B_Tm,1);
    
    //Initialise signals with init raw value
    Msg_GW_387.BCM_FrontWiperStatus   =getvalue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv);
    Msg_GW_387.BCM_RainfallLevel   =getvalue(E_pubc_GW_GW_387_BCM_RainfallLevel_Rv);
    Msg_GW_18E.EMS_AccPedal   =getvalue(E_pubc_GW_GW_18E_EMS_AccPedal_Rv);
    Msg_GW_18E.EMS_EngineStatus   =getvalue(E_pubc_GW_GW_18E_EMS_EngineStatus_Rv);
    Msg_GW_18E.EMS_RealAccPedal   =getvalue(E_pubc_GW_GW_18E_EMS_RealAccPedal_Rv);
    Msg_GW_18E.EMS_EngineSpeed   =getvalue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv);
    Msg_GW_18E.EMS_BrakePedalStatus   =getvalue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv);
    Msg_GW_3FD.BCM_PowerManageLevel   =getvalue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv);
    Msg_GW_3C4.HU_EnterSlopeInfo   =getvalue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv);
    Msg_GW_3C4.HU_RoadCurvature_30m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv);
    Msg_GW_3C4.HU_TrafficAccident_Info   =getvalue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv);
    Msg_GW_3C4.HU_RoadCurvature_20m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv);
    Msg_GW_3C4.HU_EnterTunnelInfo   =getvalue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv);
    Msg_GW_3C4.HU_MapDataUpdateStatus   =getvalue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv);
    Msg_GW_3C4.HU_RoadCurvature_10m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv);
    Msg_GW_3C4.HU_BranchInfo   =getvalue(E_pubc_GW_GW_3C4_HU_BranchInfo_Rv);
    Msg_GW_3C4.HU_Road_TrafficFlow   =getvalue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv);
    Msg_GW_3C4.HU_FallingRockDi   =getvalue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv);
    Msg_GW_3C4.HU_Byroad   =getvalue(E_pubc_GW_GW_3C4_HU_Byroad_Rv);
    Msg_GW_3C4.HU_RoadCurvature   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv);
    Msg_GW_3C4.HU_LaneCnt   =getvalue(E_pubc_GW_GW_3C4_HU_LaneCnt_Rv);
    Msg_GW_3C4.HU_RoadCurvature_90m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv);
    Msg_GW_3C4.HU_SlopeDistance   =getvalue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv);
    Msg_GW_3C4.HU_RoadCurvature_80m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv);
    Msg_GW_3C4.HU_RoadCurvature_100m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv);
    Msg_GW_3C4.HU_MapMatchStatus   =getvalue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv);
    Msg_GW_3C4.HU_TollDis   =getvalue(E_pubc_GW_GW_3C4_HU_TollDis_Rv);
    Msg_GW_3C4.HU_To_Construction_Dis   =getvalue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv);
    Msg_GW_3C4.HU_To_Branch_Dis   =getvalue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv);
    Msg_GW_3C4.HU_RoadCurvature_70m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv);
    Msg_GW_3C4.HU_To_TrafficAccident_Dis   =getvalue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv);
    Msg_GW_3C4.HU_Construction_Info   =getvalue(E_pubc_GW_GW_3C4_HU_Construction_Info_Rv);
    Msg_GW_3C4.HU_RoadCurvature_60m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv);
    Msg_GW_3C4.HU_To_NumchangeOfLanes_Dist   =getvalue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv);
    Msg_GW_3C4.HU_TollInfo   =getvalue(E_pubc_GW_GW_3C4_HU_TollInfo_Rv);
    Msg_GW_3C4.HU_RoadCurvature_300m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv);
    Msg_GW_3C4.HU_NavGuiganceStatus   =getvalue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv);
    Msg_GW_3C4.HU_Lane_Changtype   =getvalue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv);
    Msg_GW_3C4.HU_RoadCurvatureFar   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv);
    Msg_GW_3C4.HU_RampSide   =getvalue(E_pubc_GW_GW_3C4_HU_RampSide_Rv);
    Msg_GW_3C4.HU_ForwardRoadType   =getvalue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv);
    Msg_GW_3C4.HU_RoadCurvature_400m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv);
    Msg_GW_3C4.HU_FallingRockInfo   =getvalue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv);
    Msg_GW_3C4.HU_RoadCurvature_600m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv);
    Msg_GW_3C4.HU_TunnelDistance   =getvalue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv);
    Msg_GW_3C4.HU_SlopeGradient_300m   =getvalue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv);
    Msg_GW_3C4.HU_RoadCurvature_50m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv);
    Msg_GW_3C4.HU_RoadCurvature_40m   =getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv);
    Msg_GW_3C4.HU_TunnelLength   =getvalue(E_pubc_GW_GW_3C4_HU_TunnelLength_Rv);
    Msg_GW_3FF.BCM_FrontFoglampStatus   =getvalue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv);
    Msg_GW_3FF.BCM_AutoHeadlightSts   =getvalue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv);
    Msg_GW_50.SRS_WarningLampStatus   =getvalue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv);
    Msg_GW_50.SRS_DriverBuckleSwitchStatus   =getvalue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv);
    Msg_GW_50.SRS_CrashOutputStatus   =getvalue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv);
    Msg_GW_50.SRS_CrashOutputStatusCheckSum   =getvalue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv);
    Msg_GW_188.TCU_ShiftinProgressValid   =getvalue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv);
    Msg_GW_188.TCU_ShiftinProgress   =getvalue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv);
    Msg_GW_24F.EPS_TorqueAssistMode   =getvalue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv);
    Msg_GW_24F.EPS_IACC_abortreason   =getvalue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv);
    Msg_GW_24F.EPS_ConcussAvailabilityStatus   =getvalue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv);
    Msg_APA_247.APA_APAOnOff   =getvalue(E_pubc_GW_APA_247_APA_APAOnOff_Rv);
    Msg_GW_278.ESP_LongAccel   =getvalue(E_pubc_GW_GW_278_ESP_LongAccel_Rv);
    Msg_GW_278.ESP_YawRateValid   =getvalue(E_pubc_GW_GW_278_ESP_YawRateValid_Rv);
    Msg_GW_278.ESP_YawRate   =getvalue(E_pubc_GW_GW_278_ESP_YawRate_Rv);
    Msg_GW_278.ESP_IMUCalibrated   =getvalue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv);
    Msg_GW_278.ESP_LatAccelValid   =getvalue(E_pubc_GW_GW_278_ESP_LatAccelValid_Rv);
    Msg_GW_278.ESP_YawRateValid_R   =getvalue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv);
    Msg_GW_278.ESP_LatAccel   =getvalue(E_pubc_GW_GW_278_ESP_LatAccel_Rv);
    Msg_GW_278.ESP_LongAccelValid   =getvalue(E_pubc_GW_GW_278_ESP_LongAccelValid_Rv);
    Msg_GW_507.HU_LASModeSelection   =getvalue(E_pubc_GW_GW_507_HU_LASModeSelection_Rv);
    Msg_GW_507.HU_OverspeedWarningOffset   =getvalue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv);
    Msg_GW_507.HU_LASWarningModeSelection   =getvalue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv);
    Msg_GW_507.HU_LDWShakeLev   =getvalue(E_pubc_GW_GW_507_HU_LDWShakeLev_Rv);
    Msg_GW_507.HU_TSRSwitch   =getvalue(E_pubc_GW_GW_507_HU_TSRSwitch_Rv);
    Msg_GW_507.HU_OverspeedWarningEnable   =getvalue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv);
    Msg_GW_507.HU_OverspeedSoundWarEnable   =getvalue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv);
    Msg_GW_507.HU_HMAEnable   =getvalue(E_pubc_GW_GW_507_HU_HMAEnable_Rv);
    Msg_GW_507.HU_IACCEnable   =getvalue(E_pubc_GW_GW_507_HU_IACCEnable_Rv);
    Msg_GW_507.HU_FCWSetting   =getvalue(E_pubc_GW_GW_507_HU_FCWSetting_Rv);
    Msg_GW_298.BCM_LeftRearDoorStatus   =getvalue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv);
    Msg_GW_1A8.TCU_ShiftPostionValid   =getvalue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv);
    Msg_GW_1A8.TCU_GearShiftPosition   =getvalue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv);
    Msg_GW_1A8.TCU_ActualGearValid   =getvalue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv);
    Msg_GW_1A8.TCU_FastOnMode   =getvalue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv);
    Msg_GW_1A8.TCU_ActualGear   =getvalue(E_pubc_GW_GW_1A8_TCU_ActualGear_Rv);
    Msg_GW_3E7.BCM_Status_Temp   =getvalue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv);
    Msg_GW_3E7.BCM_T_BATT   =getvalue(E_pubc_GW_GW_3E7_BCM_T_BATT_Rv);
    Msg_EPBi_20B.ESP_AWBactive   =getvalue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv);
    Msg_EPBi_20B.ESP_AWBavailable   =getvalue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv);
    Msg_EPBi_20B.ESP_PrefillActive   =getvalue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv);
    Msg_EPBi_20B.Wheel_Speed_RL_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Rv);
    Msg_EPBi_20B.Wheel_Speed_RL_Direction   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv);
    Msg_EPBi_20B.Wheel_Speed_FR_Valid_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv);
    Msg_EPBi_20B.Wheel_Speed_RL_Valid_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv);
    Msg_EPBi_20B.ESP_PrefillAvailable   =getvalue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv);
    Msg_EPBi_20B.Wheel_Speed_FR_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Rv);
    Msg_EPBi_20B.Wheel_Speed_FL_Valid_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv);
    Msg_EPBi_20B.ESP_TCSActive   =getvalue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv);
    Msg_EPBi_20B.ESP_AEBdecActive   =getvalue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv);
    Msg_EPBi_20B.Wheel_Speed_RR_Direction   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv);
    Msg_EPBi_20B.Wheel_Speed_RL_Pulse   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Rv);
    Msg_EPBi_20B.ESP_ABAavailable   =getvalue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv);
    Msg_EPBi_20B.ESP_Vehicle_Speed_Reference   =getvalue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv);
    Msg_EPBi_20B.Wheel_Speed_FL_Direction   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv);
    Msg_EPBi_20B.ESP_ABAactive   =getvalue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv);
    Msg_EPBi_20B.ESP_AEBAvailable   =getvalue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv);
    Msg_EPBi_20B.Wheel_Speed_RR_Valid_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv);
    Msg_EPBi_20B.Wheel_Speed_FR_Direction   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv);
    Msg_EPBi_20B.ESP_VDCActive   =getvalue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv);
    Msg_EPBi_20B.Wheel_Speed_FL_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Rv);
    Msg_EPBi_20B.Wheel_Speed_RR_Pulse   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Rv);
    Msg_EPBi_20B.ESP_MasCylBrakePressureValid   =getvalue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv);
    Msg_EPBi_20B.ESP_BrakeForce   =getvalue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv);
    Msg_EPBi_20B.Wheel_Speed_RR_Data   =getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Rv);
    Msg_EPBi_20B.ESP_OnlyABSActive   =getvalue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv);
    Msg_EPBi_20B.ESP_VehicleStandstill   =getvalue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv);
    Msg_EPBi_20B.ESP_MasCylBrakePressure   =getvalue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Rv);
    Msg_ADC_2A4.LCDAR_ELK_oAlert   =getvalue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv);
    Msg_ADC_2A4.LCDAR_ELK_oStatus   =getvalue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv);
    Msg_ADC_2A4.LCDAR_Left_ELK_oAlert   =getvalue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv);
    Msg_GW_3AF.HU_NavStatus   =getvalue(E_pubc_GW_GW_3AF_HU_NavStatus_Rv);
    Msg_GW_3AF.HU_EnterCurveInfo   =getvalue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv);
    Msg_GW_3AF.HU_NavSpeedLimitType   =getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv);
    Msg_GW_3AF.HU_NavCountryCode   =getvalue(E_pubc_GW_GW_3AF_HU_NavCountryCode_Rv);
    Msg_GW_3AF.HU_NavSpeedLimitUnits   =getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv);
    Msg_GW_3AF.HU_NavSpeedLimit   =getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv);
    Msg_GW_3AF.HU_NavCurrentRoadType   =getvalue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv);
    Msg_GW_3AF.HU_CurveDistance   =getvalue(E_pubc_GW_GW_3AF_HU_CurveDistance_Rv);
    Msg_GW_3AF.HU_RampDistance   =getvalue(E_pubc_GW_GW_3AF_HU_RampDistance_Rv);
    Msg_GW_3AF.HU_NavSpeedLimitStatus   =getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv);
    Msg_GW_3AF.HU_RampInfo   =getvalue(E_pubc_GW_GW_3AF_HU_RampInfo_Rv);
    Msg_GW_3AF.HU_EnterRampInfo   =getvalue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Dy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Dx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RefPointDx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Location   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RelAy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RelAx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RelVx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RefPointDy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_ObstacleProb   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Width   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_ExistProb   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RefPointDy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RefPointDx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RelAy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Type   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_ObstacleProb   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Location   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RelVx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RelVy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Type   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Height   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_ExistProb   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Height   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Length   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Track_ID   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Track_ID   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Dx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Dy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_HeadingAngle   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_HeadingAngle   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_RefPointLoc   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv);
    Msg_GW_2E2.RLR_ElkOBJ1_Measured   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RelVy   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Measured   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RefPointLoc   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Width   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_Length   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv);
    Msg_GW_2E2.RLR_ElkOBJ2_RelAx   =getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RefPointLoc   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RefPointDx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RefPointDy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Height   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RelVx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Width   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Location   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Type   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RelVy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_ExistProb   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_ObstacleProb   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Measured   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RelAy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RelAx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_HeadingAngle   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Location   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Track_ID   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RelVy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RefPointLoc   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RelVx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Type   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Length   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Length   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Dy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Dx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_ExistProb   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Width   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Measured   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Track_ID   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Dx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_Dy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RelAx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_RelAy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RefPointDy   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv);
    Msg_GW_2E3.RLR_ElkOBJ3_RefPointDx   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_HeadingAngle   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_ObstacleProb   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv);
    Msg_GW_2E3.RLR_ElkOBJ4_Height   =getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv);
    Msg_GW_NM.GW_NMSourceAddress   =getvalue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv);
    Msg_GW_17E.EPS_LatCtrlActive   =getvalue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv);
    Msg_GW_17E.EPS_MeasuredTorsionBarTorqValid   =getvalue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Rv);
    Msg_GW_17E.EPS_ADS_Abortfeedback   =getvalue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv);
    Msg_GW_17E.EPS_MeasuredTorsionBarTorque   =getvalue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Rv);
    Msg_GW_17E.EPS_LatCtrlAvailabilityStatus   =getvalue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv);
    Msg_GW_17A.ESP_ESPActiveStatus   =getvalue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv);
    Msg_GW_NM.GW_NMSourceAddress   =getvalue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv);
    Msg_GW_17A.ESP_ESPFunctionStatus   =getvalue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv);
    Msg_GW_17A.ESP_ABSFailStatus   =getvalue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv);
    Msg_GW_17A.ESP_VehicleSpeedValid   =getvalue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv);
    Msg_GW_17A.ESP_VehicleSpeed   =getvalue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv);
    Msg_GW_17A.ESP_TCSFailStatus   =getvalue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv);
    Msg_GW_17A.ESP_ABSActiveStatus   =getvalue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv);
    Msg_GW_516.HU_LocalTimeSecond   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeSecond_Rv);
    Msg_GW_516.HU_CurrentLocationLongitude   =getvalue(E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Rv);
    Msg_GW_516.HU_LocalTimeSystem   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv);
    Msg_GW_516.HU_LocalTimeValid   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeValid_Rv);
    Msg_GW_516.HU_LocalTimeHour   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeHour_Rv);
    Msg_GW_516.HU_LocalTimeDate   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeDate_Rv);
    Msg_GW_516.HU_CurrentLocationLatitude   =getvalue(E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Rv);
    Msg_GW_516.HU_CurrentLocationValid   =getvalue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv);
    Msg_GW_516.HU_LocalTimeMinute   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeMinute_Rv);
    Msg_GW_516.HU_LocalTimeYear   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeYear_Rv);
    Msg_GW_516.HU_LocalTimeMonth   =getvalue(E_pubc_GW_GW_516_HU_LocalTimeMonth_Rv);
    Msg_ADS_244.ACC_AEBActive   =getvalue(E_pubc_GW_ADS_244_ACC_AEBActive_Rv);
    Msg_GW_3E8.BCM_SOF_Q_STATE   =getvalue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv);
    Msg_GW_3E8.BCM_SOF_Q   =getvalue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv);
    Msg_ACC_592.LAS_WakeUp_BYTE4BIT0   =getvalue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv);
    Msg_ACC_592.LAS_WakeUp_BYTE4BIT1   =getvalue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv);
    Msg_ACC_592.LAS_NotSleep_BYTE7BIT0   =getvalue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv);
    Msg_ACC_592.LAS_NotSleep_BYTE7BIT1   =getvalue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv);
    Msg_GW_28C.GW_MFS_IACCenable_switch_signal   =getvalue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv);
    Msg_GW_530.IP_TotalOdometer   =getvalue(E_pubc_GW_GW_530_IP_TotalOdometer_Rv);
    Msg_ACC_NM.ACC_NMSourceAddress   =getvalue(E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv);
    Msg_GW_180.SAS_SteeringAngleValid   =getvalue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv);
    Msg_GW_180.SAS_Calibrated   =getvalue(E_pubc_GW_GW_180_SAS_Calibrated_Rv);
    Msg_GW_180.SAS_SteeringAngle   =getvalue(E_pubc_GW_GW_180_SAS_SteeringAngle_Rv);
    Msg_GW_180.SAS_SteeringAngleSpeed   =getvalue(E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Rv);
    Msg_GW_180.SAS_SASFailure   =getvalue(E_pubc_GW_GW_180_SAS_SASFailure_Rv);
    Msg_GW_320.GW_ResetReq   =getvalue(E_pubc_GW_GW_320_GW_ResetReq_Rv);
    Msg_GW_3BD.HU_TLAEnable   =getvalue(E_pubc_GW_GW_3BD_HU_TLAEnable_Rv);
    Msg_GW_3BD.HU_ELKEnable   =getvalue(E_pubc_GW_GW_3BD_HU_ELKEnable_Rv);
    Msg_GW_28B.LCM_LASSwitch   =getvalue(E_pubc_GW_GW_28B_LCM_LASSwitch_Rv);
    Msg_GW_28B.BCM_DriverDoorStatus   =getvalue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv);
    Msg_GW_28B.BCM_emergencylightstatus   =getvalue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv);
    Msg_GW_28B.BCM_LowBeamStatus   =getvalue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv);
    Msg_GW_28B.BCM_TurnIndicatorLeft   =getvalue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv);
    Msg_GW_28B.BCM_TurnLightSwitchSts   =getvalue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv);
    Msg_GW_28B.BCM_HighBeamStatus   =getvalue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv);
    Msg_GW_28B.BCM_TurnIndicatorRight   =getvalue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv);
}

on envVar E_pubc_GW_CycMsgsON
{
    // enable all the cyclic messages 
    putValue(E_pubc_GW_GW_387_Tm,1);
    putValue(E_pubc_GW_GW_18E_Tm,1);
    putValue(E_pubc_GW_GW_3FD_Tm,1);
    putValue(E_pubc_GW_GW_3C4_Tm,1);
    putValue(E_pubc_GW_GW_3FF_Tm,1);
    putValue(E_pubc_GW_GW_50_Tm,1);
    putValue(E_pubc_GW_GW_188_Tm,1);
    putValue(E_pubc_GW_GW_24F_Tm,1);
    putValue(E_pubc_GW_APA_247_Tm,1);
    putValue(E_pubc_GW_GW_278_Tm,1);
    putValue(E_pubc_GW_GW_298_Tm,1);
    putValue(E_pubc_GW_GW_1A8_Tm,1);
    putValue(E_pubc_GW_GW_3E7_Tm,1);
    putValue(E_pubc_GW_EPBi_20B_Tm,1);
    putValue(E_pubc_GW_ADC_2A4_Tm,1);
    putValue(E_pubc_GW_GW_3AF_Tm,1);
    putValue(E_pubc_GW_GW_2E2_Tm,1);
    putValue(E_pubc_GW_GW_2E3_Tm,1);
    putValue(E_pubc_GW_GW_17E_Tm,1);
    putValue(E_pubc_GW_GW_NM_Tm,1);
    putValue(E_pubc_GW_GW_17A_Tm,1);
    putValue(E_pubc_GW_GW_516_Tm,1);
    putValue(E_pubc_GW_ADS_244_Tm,1);
    putValue(E_pubc_GW_GW_3E8_Tm,1);
    putValue(E_pubc_GW_ACC_592_Tm,1);
    putValue(E_pubc_GW_GW_28C_Tm,1);
    putValue(E_pubc_GW_GW_530_Tm,1);
    putValue(E_pubc_GW_ACC_NM_Tm,1);
    putValue(E_pubc_GW_GW_180_Tm,1);
    putValue(E_pubc_GW_GW_320_Tm,1);
    putValue(E_pubc_GW_GW_3BD_Tm,1);
    putValue(E_pubc_GW_GW_28B_Tm,1);
}

on envVar E_pubc_GW_CycMsgsOFF
{
    // disable all the cyclic messages
    putValue(E_pubc_GW_GW_387_Tm,0);
    putValue(E_pubc_GW_GW_18E_Tm,0);
    putValue(E_pubc_GW_GW_3FD_Tm,0);
    putValue(E_pubc_GW_GW_3C4_Tm,0);
    putValue(E_pubc_GW_GW_3FF_Tm,0);
    putValue(E_pubc_GW_GW_50_Tm,0);
    putValue(E_pubc_GW_GW_188_Tm,0);
    putValue(E_pubc_GW_GW_24F_Tm,0);
    putValue(E_pubc_GW_APA_247_Tm,0);
    putValue(E_pubc_GW_GW_278_Tm,0);
    putValue(E_pubc_GW_GW_298_Tm,0);
    putValue(E_pubc_GW_GW_1A8_Tm,0);
    putValue(E_pubc_GW_GW_3E7_Tm,0);
    putValue(E_pubc_GW_EPBi_20B_Tm,0);
    putValue(E_pubc_GW_ADC_2A4_Tm,0);
    putValue(E_pubc_GW_GW_3AF_Tm,0);
    putValue(E_pubc_GW_GW_2E2_Tm,0);
    putValue(E_pubc_GW_GW_2E3_Tm,0);
    putValue(E_pubc_GW_GW_17E_Tm,0);
    putValue(E_pubc_GW_GW_NM_Tm,0);
    putValue(E_pubc_GW_GW_17A_Tm,0);
    putValue(E_pubc_GW_GW_516_Tm,0);
    putValue(E_pubc_GW_ADS_244_Tm,0);
    putValue(E_pubc_GW_GW_3E8_Tm,0);
    putValue(E_pubc_GW_ACC_592_Tm,0);
    putValue(E_pubc_GW_GW_28C_Tm,0);
    putValue(E_pubc_GW_GW_530_Tm,0);
    putValue(E_pubc_GW_ACC_NM_Tm,0);
    putValue(E_pubc_GW_GW_180_Tm,0);
    putValue(E_pubc_GW_GW_320_Tm,0);
    putValue(E_pubc_GW_GW_3BD_Tm,0);
    putValue(E_pubc_GW_GW_28B_Tm,0);
    
}
on timer Tm_GW_387
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_387_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_387);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_387,Cycle_GW_387);
}

on envVar E_pubc_GW_GW_387_cycleTm
{
    // update the cycle time 
    Cycle_GW_387=getvalue(this);
}
on timer Tm_GW_18E
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_18E_Tm) == 1)
    {
        
		//update the BZ Signal
        if(GW_18E_EMS_RollingCounter_1A6_wrongvalctr == 0)
        {
            update_GW_18E_EMS_RollingCounter_1A6_counter();
            Msg_GW_18E.EMS_RollingCounter_1A6= GW_18E_EMS_RollingCounter_1A6_counter;
        }
        else if(GW_18E_EMS_RollingCounter_1A6_wrongvalctr > 0)
        {
			 GW_18E_EMS_RollingCounter_1A6_counter=GW_18E_EMS_RollingCounter_1A6_counter + GW_18E_EMS_RollingCounter_1A6_wrongvalctr;
			  Msg_GW_18E.EMS_RollingCounter_1A6= GW_18E_EMS_RollingCounter_1A6_counter;
             /*GW_18E_EMS_RollingCounter_1A6_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_18E_EMS_RollingCounter_1A6_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_18E_EMS_RollingCounter_1A6_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_GW_18E_CRC_CheckSum();
        output(Msg_GW_18E);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_18E,Cycle_GW_18E);
}

on envVar E_pubc_GW_GW_18E_cycleTm
{
    // update the cycle time 
    Cycle_GW_18E=getvalue(this);
}
on timer Tm_GW_3FD
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3FD_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_3FD);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3FD,Cycle_GW_3FD);
}

on envVar E_pubc_GW_GW_3FD_cycleTm
{
    // update the cycle time 
    Cycle_GW_3FD=getvalue(this);
}
on timer Tm_GW_3C4
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3C4_Tm) == 1)
    {
        
		//update the BZ Signal
        if(GW_3C4_HU_RollingCounter_3C2_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C2_counter();
            Msg_GW_3C4.HU_RollingCounter_3C2= GW_3C4_HU_RollingCounter_3C2_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C2_wrongvalctr > 0)
        {
			 GW_3C4_HU_RollingCounter_3C2_counter=GW_3C4_HU_RollingCounter_3C2_counter + GW_3C4_HU_RollingCounter_3C2_wrongvalctr;
			  Msg_GW_3C4.HU_RollingCounter_3C2= GW_3C4_HU_RollingCounter_3C2_counter;
             /*GW_3C4_HU_RollingCounter_3C2_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C2_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C2_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(GW_3C4_HU_RollingCounter_3B8_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3B8_counter();
            Msg_GW_3C4.HU_RollingCounter_3B8= GW_3C4_HU_RollingCounter_3B8_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3B8_wrongvalctr > 0)
        {
			 GW_3C4_HU_RollingCounter_3B8_counter=GW_3C4_HU_RollingCounter_3B8_counter + GW_3C4_HU_RollingCounter_3B8_wrongvalctr;
			  Msg_GW_3C4.HU_RollingCounter_3B8= GW_3C4_HU_RollingCounter_3B8_counter;
             /*GW_3C4_HU_RollingCounter_3B8_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3B8_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3B8_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(GW_3C4_HU_RollingCounter_3C6_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C6_counter();
            Msg_GW_3C4.HU_RollingCounter_3C6= GW_3C4_HU_RollingCounter_3C6_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C6_wrongvalctr > 0)
        {
			 GW_3C4_HU_RollingCounter_3C6_counter=GW_3C4_HU_RollingCounter_3C6_counter + GW_3C4_HU_RollingCounter_3C6_wrongvalctr;
			  Msg_GW_3C4.HU_RollingCounter_3C6= GW_3C4_HU_RollingCounter_3C6_counter;
             /*GW_3C4_HU_RollingCounter_3C6_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C6_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C6_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(GW_3C4_HU_RollingCounter_3C7_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C7_counter();
            Msg_GW_3C4.HU_RollingCounter_3C7= GW_3C4_HU_RollingCounter_3C7_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C7_wrongvalctr > 0)
        {
			 GW_3C4_HU_RollingCounter_3C7_counter=GW_3C4_HU_RollingCounter_3C7_counter + GW_3C4_HU_RollingCounter_3C7_wrongvalctr;
			  Msg_GW_3C4.HU_RollingCounter_3C7= GW_3C4_HU_RollingCounter_3C7_counter;
             /*GW_3C4_HU_RollingCounter_3C7_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C7_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C7_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(GW_3C4_HU_RollingCounter_3C4_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C4_counter();
            Msg_GW_3C4.HU_RollingCounter_3C4= GW_3C4_HU_RollingCounter_3C4_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C4_wrongvalctr > 0)
        {
			GW_3C4_HU_RollingCounter_3C4_counter=GW_3C4_HU_RollingCounter_3C4_counter + GW_3C4_HU_RollingCounter_3C4_wrongvalctr;
			 Msg_GW_3C4.HU_RollingCounter_3C4= GW_3C4_HU_RollingCounter_3C4_counter;
             /* GW_3C4_HU_RollingCounter_3C4_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C4_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C4_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_3C4_CRC_CheckSum();
        output(Msg_GW_3C4);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3C4,Cycle_GW_3C4);
}

on envVar E_pubc_GW_GW_3C4_cycleTm
{
    // update the cycle time 
    Cycle_GW_3C4=getvalue(this);
}
on timer Tm_GW_3FF
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3FF_Tm) == 1)
    {
        
    
        output(Msg_GW_3FF);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3FF,Cycle_GW_3FF);
}

on envVar E_pubc_GW_GW_3FF_cycleTm
{
    // update the cycle time 
    Cycle_GW_3FF=getvalue(this);
}
on timer Tm_GW_50
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_50_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_50_SRS_RollingCounter_id050_wrongvalctr == 0)
        {
            update_GW_50_SRS_RollingCounter_id050_counter();
            Msg_GW_50.SRS_RollingCounter_id050= GW_50_SRS_RollingCounter_id050_counter;
        }
        else if(GW_50_SRS_RollingCounter_id050_wrongvalctr > 0)
        {
			GW_50_SRS_RollingCounter_id050_counter=GW_50_SRS_RollingCounter_id050_counter + GW_50_SRS_RollingCounter_id050_wrongvalctr;
			 Msg_GW_50.SRS_RollingCounter_id050= GW_50_SRS_RollingCounter_id050_counter;
             /* GW_50_SRS_RollingCounter_id050_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_50_SRS_RollingCounter_id050_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_50_SRS_RollingCounter_id050_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
	
        update_GW_50_CRC_CheckSum();
        output(Msg_GW_50);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_50,Cycle_GW_50);
}

on envVar E_pubc_GW_GW_50_cycleTm
{
    // update the cycle time 
    Cycle_GW_50=getvalue(this);
}
on timer Tm_GW_188
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_188_Tm) == 1)
    {
        
		//update the BZ Signal
        if(GW_188_TCU_RollingCounter_188_wrongvalctr == 0)
        {
            update_GW_188_TCU_RollingCounter_188_counter();
            Msg_GW_188.TCU_RollingCounter_188= GW_188_TCU_RollingCounter_188_counter;
        }
        else if(GW_188_TCU_RollingCounter_188_wrongvalctr > 0)
        {
			 GW_188_TCU_RollingCounter_188_counter=GW_188_TCU_RollingCounter_188_counter + GW_188_TCU_RollingCounter_188_wrongvalctr;
			  Msg_GW_188.TCU_RollingCounter_188= GW_188_TCU_RollingCounter_188_counter;
             /*GW_188_TCU_RollingCounter_188_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_188_TCU_RollingCounter_188_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_188_TCU_RollingCounter_188_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_GW_188_CRC_CheckSum();
        output(Msg_GW_188);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_188,Cycle_GW_188);
}

on envVar E_pubc_GW_GW_188_cycleTm
{
    // update the cycle time 
    Cycle_GW_188=getvalue(this);
}
on timer Tm_GW_24F
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_24F_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_24F_EPS_RollingCounter_24F_wrongvalctr == 0)
        {
            update_GW_24F_EPS_RollingCounter_24F_counter();
            Msg_GW_24F.EPS_RollingCounter_24F= GW_24F_EPS_RollingCounter_24F_counter;
        }
        else if(GW_24F_EPS_RollingCounter_24F_wrongvalctr > 0)
        {
			GW_24F_EPS_RollingCounter_24F_counter=GW_24F_EPS_RollingCounter_24F_counter + GW_24F_EPS_RollingCounter_24F_wrongvalctr;
			 Msg_GW_24F.EPS_RollingCounter_24F= GW_24F_EPS_RollingCounter_24F_counter;
             /* GW_24F_EPS_RollingCounter_24F_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_24F_EPS_RollingCounter_24F_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_24F_EPS_RollingCounter_24F_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_24F_CRC_CheckSum();
        output(Msg_GW_24F);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_24F,Cycle_GW_24F);
}

on envVar E_pubc_GW_GW_24F_cycleTm
{
    // update the cycle time 
    Cycle_GW_24F=getvalue(this);
}
on timer Tm_APA_247
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_APA_247_Tm) == 1)
    {
        
    
        output(Msg_APA_247);
        
    }
    //Reset Timer
    SetTimer(Tm_APA_247,Cycle_APA_247);
}

on envVar E_pubc_GW_APA_247_cycleTm
{
    // update the cycle time 
    Cycle_APA_247=getvalue(this);
}
on timer Tm_GW_278
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_278_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_278_ESP_RollingCounter_278_wrongvalctr == 0)
        {
            update_GW_278_ESP_RollingCounter_278_counter();
            Msg_GW_278.ESP_RollingCounter_278= GW_278_ESP_RollingCounter_278_counter;
        }
        else if(GW_278_ESP_RollingCounter_278_wrongvalctr > 0)
        {
			GW_278_ESP_RollingCounter_278_counter=GW_278_ESP_RollingCounter_278_counter + GW_278_ESP_RollingCounter_278_wrongvalctr;
			 Msg_GW_278.ESP_RollingCounter_278= GW_278_ESP_RollingCounter_278_counter;
             /* GW_278_ESP_RollingCounter_278_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_278_ESP_RollingCounter_278_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_278_ESP_RollingCounter_278_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_278_CRC_CheckSum();
        output(Msg_GW_278);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_278,Cycle_GW_278);
}

on envVar E_pubc_GW_GW_278_cycleTm
{
    // update the cycle time 
    Cycle_GW_278=getvalue(this);
}
on timer Tm_GW_298
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_298_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_298);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_298,Cycle_GW_298);
}

on envVar E_pubc_GW_GW_298_cycleTm
{
    // update the cycle time 
    Cycle_GW_298=getvalue(this);
}
on timer Tm_GW_1A8
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_1A8_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_1A8_TCU_RollingCounter_1A8_wrongvalctr == 0)
        {
            update_GW_1A8_TCU_RollingCounter_1A8_counter();
            Msg_GW_1A8.TCU_RollingCounter_1A8= GW_1A8_TCU_RollingCounter_1A8_counter;
        }
        else if(GW_1A8_TCU_RollingCounter_1A8_wrongvalctr > 0)
        {
			GW_1A8_TCU_RollingCounter_1A8_counter=GW_1A8_TCU_RollingCounter_1A8_counter + GW_1A8_TCU_RollingCounter_1A8_wrongvalctr;
			 Msg_GW_1A8.TCU_RollingCounter_1A8= GW_1A8_TCU_RollingCounter_1A8_counter;
             /* GW_1A8_TCU_RollingCounter_1A8_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_1A8_TCU_RollingCounter_1A8_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_1A8_TCU_RollingCounter_1A8_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_1A8_CRC_CheckSum();
        output(Msg_GW_1A8);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_1A8,Cycle_GW_1A8);
}

on envVar E_pubc_GW_GW_1A8_cycleTm
{
    // update the cycle time 
    Cycle_GW_1A8=getvalue(this);
}
on timer Tm_GW_3E7
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3E7_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_3E7);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3E7,Cycle_GW_3E7);
}

on envVar E_pubc_GW_GW_3E7_cycleTm
{
    // update the cycle time 
    Cycle_GW_3E7=getvalue(this);
}
on timer Tm_EPBi_20B
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_EPBi_20B_Tm) == 1)
    {
        
		//update the BZ Signal
        if(EPBi_20B_ESP_RollingCounter_258_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_258_counter();
            Msg_EPBi_20B.ESP_RollingCounter_258= EPBi_20B_ESP_RollingCounter_258_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_258_wrongvalctr > 0)
        {
			 EPBi_20B_ESP_RollingCounter_258_counter=EPBi_20B_ESP_RollingCounter_258_counter + EPBi_20B_ESP_RollingCounter_258_wrongvalctr;
			  Msg_EPBi_20B.ESP_RollingCounter_258= EPBi_20B_ESP_RollingCounter_258_counter;
             /*EPBi_20B_ESP_RollingCounter_258_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_258_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_258_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(EPBi_20B_ESP_RollingCounter_277_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_277_counter();
            Msg_EPBi_20B.ESP_RollingCounter_277= EPBi_20B_ESP_RollingCounter_277_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_277_wrongvalctr > 0)
        {
			 EPBi_20B_ESP_RollingCounter_277_counter=EPBi_20B_ESP_RollingCounter_277_counter + EPBi_20B_ESP_RollingCounter_277_wrongvalctr;
			  Msg_EPBi_20B.ESP_RollingCounter_277= EPBi_20B_ESP_RollingCounter_277_counter;
             /*EPBi_20B_ESP_RollingCounter_277_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_277_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_277_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(EPBi_20B_ESP_RollingCounter_206_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_206_counter();
            Msg_EPBi_20B.ESP_RollingCounter_206= EPBi_20B_ESP_RollingCounter_206_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_206_wrongvalctr > 0)
        {
			 EPBi_20B_ESP_RollingCounter_206_counter=EPBi_20B_ESP_RollingCounter_206_counter + EPBi_20B_ESP_RollingCounter_206_wrongvalctr;
			  Msg_EPBi_20B.ESP_RollingCounter_206= EPBi_20B_ESP_RollingCounter_206_counter;
             /*EPBi_20B_ESP_RollingCounter_206_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_206_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_206_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
        if(EPBi_20B_ESP_RollingCounter_208_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_208_counter();
            Msg_EPBi_20B.ESP_RollingCounter_208= EPBi_20B_ESP_RollingCounter_208_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_208_wrongvalctr > 0)
        {
			 EPBi_20B_ESP_RollingCounter_208_counter=EPBi_20B_ESP_RollingCounter_208_counter + EPBi_20B_ESP_RollingCounter_208_wrongvalctr;
			  Msg_EPBi_20B.ESP_RollingCounter_208= EPBi_20B_ESP_RollingCounter_208_counter;
             /*EPBi_20B_ESP_RollingCounter_208_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_208_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_208_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_EPBi_20B_CRC_CheckSum();
        output(Msg_EPBi_20B);
        
    }
    //Reset Timer
    SetTimer(Tm_EPBi_20B,Cycle_EPBi_20B);
}

on envVar E_pubc_GW_EPBi_20B_cycleTm
{
    // update the cycle time 
    Cycle_EPBi_20B=getvalue(this);
}
on timer Tm_ADC_2A4
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_ADC_2A4_Tm) == 1)
    {
        
		//update the BZ Signal
        if(ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr == 0)
        {
            update_ADC_2A4_LCDAR_RollingCounter_2AF_counter();
            Msg_ADC_2A4.LCDAR_RollingCounter_2AF= ADC_2A4_LCDAR_RollingCounter_2AF_counter;
        }
        else if(ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr > 0)
        {
			 ADC_2A4_LCDAR_RollingCounter_2AF_counter=ADC_2A4_LCDAR_RollingCounter_2AF_counter + ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr;
			  Msg_ADC_2A4.LCDAR_RollingCounter_2AF= ADC_2A4_LCDAR_RollingCounter_2AF_counter;
             /*ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_ADC_2A4_CRC_CheckSum();
        output(Msg_ADC_2A4);
        
    }
    //Reset Timer
    SetTimer(Tm_ADC_2A4,Cycle_ADC_2A4);
}

on envVar E_pubc_GW_ADC_2A4_cycleTm
{
    // update the cycle time 
    Cycle_ADC_2A4=getvalue(this);
}
on timer Tm_GW_3AF
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3AF_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_3AF_HU_RollingCounter_3AF_wrongvalctr == 0)
        {
            update_GW_3AF_HU_RollingCounter_3AF_counter();
            Msg_GW_3AF.HU_RollingCounter_3AF= GW_3AF_HU_RollingCounter_3AF_counter;
        }
        else if(GW_3AF_HU_RollingCounter_3AF_wrongvalctr > 0)
        {
			GW_3AF_HU_RollingCounter_3AF_counter=GW_3AF_HU_RollingCounter_3AF_counter + GW_3AF_HU_RollingCounter_3AF_wrongvalctr;
			 Msg_GW_3AF.HU_RollingCounter_3AF= GW_3AF_HU_RollingCounter_3AF_counter;
             /* GW_3AF_HU_RollingCounter_3AF_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_3AF_HU_RollingCounter_3AF_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_3AF_HU_RollingCounter_3AF_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_3AF_CRC_CheckSum();
        output(Msg_GW_3AF);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3AF,Cycle_GW_3AF);
}

on envVar E_pubc_GW_GW_3AF_cycleTm
{
    // update the cycle time 
    Cycle_GW_3AF=getvalue(this);
}
/*@@end*/
/*@@timer:Tm_GW_2E2:*/
on timer Tm_GW_2E2
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_2E2_Tm) == 1)
    {
        
		//update the BZ Signal
        if(GW_2E2_RLR_RollingCounter_2E2_wrongvalctr == 0)
        {
            update_GW_2E2_RLR_RollingCounter_2E2_counter();
            Msg_GW_2E2.RLR_RollingCounter_2E2= GW_2E2_RLR_RollingCounter_2E2_counter;
        }
        else if(GW_2E2_RLR_RollingCounter_2E2_wrongvalctr > 0)
        {
			 GW_2E2_RLR_RollingCounter_2E2_counter=GW_2E2_RLR_RollingCounter_2E2_counter + GW_2E2_RLR_RollingCounter_2E2_wrongvalctr;
			  Msg_GW_2E2.RLR_RollingCounter_2E2= GW_2E2_RLR_RollingCounter_2E2_counter;
             /*GW_2E2_RLR_RollingCounter_2E2_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_2E2_RLR_RollingCounter_2E2_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_2E2_RLR_RollingCounter_2E2_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_GW_2E2_CRC_CheckSum();
        output(Msg_GW_2E2);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_2E2,Cycle_GW_2E2);
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_cycleTm:*/
on envVar E_pubc_GW_GW_2E2_cycleTm
{
    // update the cycle time 
    Cycle_GW_2E2=getvalue(this);
}
/*@@end*/
/*@@timer:Tm_GW_2E3:*/
on timer Tm_GW_2E3
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_2E3_Tm) == 1)
    {
        
		//update the BZ Signal
        if(GW_2E3_RLR_RollingCounter_2E3_wrongvalctr == 0)
        {
            update_GW_2E3_RLR_RollingCounter_2E3_counter();
            Msg_GW_2E3.RLR_RollingCounter_2E3= GW_2E3_RLR_RollingCounter_2E3_counter;
        }
        else if(GW_2E3_RLR_RollingCounter_2E3_wrongvalctr > 0)
        {
			 GW_2E3_RLR_RollingCounter_2E3_counter=GW_2E3_RLR_RollingCounter_2E3_counter + GW_2E3_RLR_RollingCounter_2E3_wrongvalctr;
			  Msg_GW_2E3.RLR_RollingCounter_2E3= GW_2E3_RLR_RollingCounter_2E3_counter;
             /*GW_2E3_RLR_RollingCounter_2E3_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_2E3_RLR_RollingCounter_2E3_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_2E3_RLR_RollingCounter_2E3_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_GW_2E3_CRC_CheckSum();
        output(Msg_GW_2E3);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_2E3,Cycle_GW_2E3);
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_cycleTm:*/
on envVar E_pubc_GW_GW_2E3_cycleTm
{
    // update the cycle time 
    Cycle_GW_2E3=getvalue(this);
}
/*@@end*/
/*@@timer:Tm_GW_NM:*/
on timer Tm_GW_NM
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_NM_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_NM);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_NM,Cycle_GW_NM);
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_NM_cycleTm:*/
on envVar E_pubc_GW_GW_NM_cycleTm
{
    // update the cycle time 
    Cycle_GW_NM=getvalue(this);
}
/*@@end*/

/*@@timer:Tm_GW_17E:*/
on timer Tm_GW_17E
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_17E_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_17E_EPS_RollingCounter_17E_wrongvalctr == 0)
        {
            update_GW_17E_EPS_RollingCounter_17E_counter();
            Msg_GW_17E.EPS_RollingCounter_17E= GW_17E_EPS_RollingCounter_17E_counter;
        }
        else if(GW_17E_EPS_RollingCounter_17E_wrongvalctr > 0)
        {
			GW_17E_EPS_RollingCounter_17E_counter=GW_17E_EPS_RollingCounter_17E_counter + GW_17E_EPS_RollingCounter_17E_wrongvalctr;
			 Msg_GW_17E.EPS_RollingCounter_17E= GW_17E_EPS_RollingCounter_17E_counter;
             /* GW_17E_EPS_RollingCounter_17E_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_17E_EPS_RollingCounter_17E_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_17E_EPS_RollingCounter_17E_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_17E_CRC_CheckSum();
        output(Msg_GW_17E);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_17E,Cycle_GW_17E);
}

on envVar E_pubc_GW_GW_17E_cycleTm
{
    // update the cycle time 
    Cycle_GW_17E=getvalue(this);
}
on timer Tm_GW_17A
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_17A_Tm) == 1)
    {
        
		//update the BZ Signal
        if(GW_17A_ESP_RollingCounter_187_wrongvalctr == 0)
        {
            update_GW_17A_ESP_RollingCounter_187_counter();
            Msg_GW_17A.ESP_RollingCounter_187= GW_17A_ESP_RollingCounter_187_counter;
        }
        else if(GW_17A_ESP_RollingCounter_187_wrongvalctr > 0)
        {
			 GW_17A_ESP_RollingCounter_187_counter=GW_17A_ESP_RollingCounter_187_counter + GW_17A_ESP_RollingCounter_187_wrongvalctr;
			  Msg_GW_17A.ESP_RollingCounter_187= GW_17A_ESP_RollingCounter_187_counter;
             /*GW_17A_ESP_RollingCounter_187_wrongvalctr--;
             //if counter becomes zero, update panel controller to zero
             if(GW_17A_ESP_RollingCounter_187_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_17A_ESP_RollingCounter_187_wrongvalctr,0);
             }*/
        }
        else
        {
            // do nothing
        }
	
        update_GW_17A_CRC_CheckSum();
        output(Msg_GW_17A);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_17A,Cycle_GW_17A);
}

on envVar E_pubc_GW_GW_17A_cycleTm
{
    // update the cycle time 
    Cycle_GW_17A=getvalue(this);
}
on timer Tm_GW_516
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_516_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_516);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_516,Cycle_GW_516);
}

on envVar E_pubc_GW_GW_516_cycleTm
{
    // update the cycle time 
    Cycle_GW_516=getvalue(this);
}
on timer Tm_ADS_244
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_ADS_244_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_ADS_244);
        
    }
    //Reset Timer
    SetTimer(Tm_ADS_244,Cycle_ADS_244);
}

on envVar E_pubc_GW_ADS_244_cycleTm
{
    // update the cycle time 
    Cycle_ADS_244=getvalue(this);
}
on timer Tm_GW_3E8
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3E8_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_3E8);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3E8,Cycle_GW_3E8);
}

on envVar E_pubc_GW_GW_3E8_cycleTm
{
    // update the cycle time 
    Cycle_GW_3E8=getvalue(this);
}
on timer Tm_ACC_592
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_ACC_592_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_ACC_592);
        
    }
    //Reset Timer
    SetTimer(Tm_ACC_592,Cycle_ACC_592);
}

on envVar E_pubc_GW_ACC_592_cycleTm
{
    // update the cycle time 
    Cycle_ACC_592=getvalue(this);
}
on timer Tm_GW_28C
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_28C_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr == 0)
        {
            update_GW_28C_GW_MFS_RollingCounter_28C_counter();
            Msg_GW_28C.GW_MFS_RollingCounter_28C= GW_28C_GW_MFS_RollingCounter_28C_counter;
        }
        else if(GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr > 0)
        {
			GW_28C_GW_MFS_RollingCounter_28C_counter=GW_28C_GW_MFS_RollingCounter_28C_counter + GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr;
			 Msg_GW_28C.GW_MFS_RollingCounter_28C= GW_28C_GW_MFS_RollingCounter_28C_counter;
             /* GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_28C_CRC_CheckSum();
        output(Msg_GW_28C);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_28C,Cycle_GW_28C);
}

on envVar E_pubc_GW_GW_28C_cycleTm
{
    // update the cycle time 
    Cycle_GW_28C=getvalue(this);
}
on timer Tm_GW_530
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_530_Tm) == 1)
    {
        
    
        output(Msg_GW_530);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_530,Cycle_GW_530);
}

on envVar E_pubc_GW_GW_530_cycleTm
{
    // update the cycle time 
    Cycle_GW_530=getvalue(this);
}
/*@@timer:Tm_ACC_NM:*/
on timer Tm_ACC_NM
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_ACC_NM_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_ACC_NM);
        
    }
    //Reset Timer
    SetTimer(Tm_ACC_NM,Cycle_ACC_NM);
}
/*@@end*/

/*@@envVar:E_pubc_GW_ACC_NM_cycleTm:*/
on envVar E_pubc_GW_ACC_NM_cycleTm
{
    // update the cycle time 
    Cycle_ACC_NM=getvalue(this);
}
/*@@end*/
on timer Tm_GW_180
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_180_Tm) == 1)
    {
        
        //update the BZ Signal
        if(GW_180_SAS_RollingCounter_wrongvalctr == 0)
        {
            update_GW_180_SAS_RollingCounter_counter();
            Msg_GW_180.SAS_RollingCounter= GW_180_SAS_RollingCounter_counter;
        }
        else if(GW_180_SAS_RollingCounter_wrongvalctr > 0)
        {
			GW_180_SAS_RollingCounter_counter=GW_180_SAS_RollingCounter_counter + GW_180_SAS_RollingCounter_wrongvalctr;
			 Msg_GW_180.SAS_RollingCounter= GW_180_SAS_RollingCounter_counter;
             /* GW_180_SAS_RollingCounter_wrongvalctr--;
             // if counter becomes zero, update panel controller to zero
             if(GW_180_SAS_RollingCounter_wrongvalctr == 0)
             {
                putValue(E_pubc_GW_GW_180_SAS_RollingCounter_wrongvalctr,0);
             } */
        }
        else
        {
            // do nothing
        }
    
        update_GW_180_CRC_CheckSum();
        output(Msg_GW_180);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_180,Cycle_GW_180);
}

on envVar E_pubc_GW_GW_180_cycleTm
{
    // update the cycle time 
    Cycle_GW_180=getvalue(this);
}
/*@@end*/
/*@@timer:Tm_GW_320:*/
on timer Tm_GW_320
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_320_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_320);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_320,Cycle_GW_320);
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_320_cycleTm:*/
on envVar E_pubc_GW_GW_320_cycleTm
{
    // update the cycle time 
    Cycle_GW_320=getvalue(this);
}
/*@@end*/
/*@@timer:Tm_GW_3BD:*/
on timer Tm_GW_3BD
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_3BD_Tm) == 1)
    {
        
		//update the BZ Signal
	
        output(Msg_GW_3BD);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_3BD,Cycle_GW_3BD);
}

on envVar E_pubc_GW_GW_3BD_cycleTm
{
    // update the cycle time 
    Cycle_GW_3BD=getvalue(this);
}
on timer Tm_GW_28B
{
    //cyclic message timer 
    if(getValue(E_pubc_GW_GW_28B_Tm) == 1)
    {
        
    
        output(Msg_GW_28B);
        
    }
    //Reset Timer
    SetTimer(Tm_GW_28B,Cycle_GW_28B);
}

on envVar E_pubc_GW_GW_28B_cycleTm
{
    // update the cycle time 
    Cycle_GW_28B=getvalue(this);
}

on envVar E_pubc_GW_GW_387_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_387);        
    }
}

on envVar E_pubc_GW_GW_387_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_387_BCM_RainfallLevel_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv, rawValue);
        rawValue= 15;
        putValue(E_pubc_GW_GW_387_BCM_RainfallLevel_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_387_BCM_RainfallLevel_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_387_Dlc
{
    if(getValue(E_pubc_GW_GW_387_enDlc))
    {
        Msg_GW_387.dlc =getValue(this);
    }
    else
    {
        Msg_GW_387.dlc =8;
    }
}

on envVar E_pubc_GW_GW_387_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_387.dlc =getValue(E_pubc_GW_GW_387_Dlc);
    }
    else
    {
        Msg_GW_387.dlc =8;
    }
}


on envVar E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_387_BCM_FrontWiperStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Pv, phyValue);
            chgEv_GW_387_BCM_FrontWiperStatus = 1;
        }
        else
        {
            chgEv_GW_387_BCM_FrontWiperStatus = 0;
        }    
        //update the signal value
        Msg_GW_387.BCM_FrontWiperStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_387_BCM_FrontWiperStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_SetVt)==0)
    {
        if(chgEv_GW_387_BCM_FrontWiperStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv, rawValue);
            chgEv_GW_387_BCM_FrontWiperStatus = 1;  
        }
        else
        {
            chgEv_GW_387_BCM_FrontWiperStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_387_BCM_FrontWiperStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_SetVt))
    {
        //update the signal value
        Msg_GW_387.BCM_FrontWiperStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_387_BCM_FrontWiperStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_SetVt))
    {
        //update the signal value
        Msg_GW_387.BCM_FrontWiperStatus=getvalue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Vt);
    }
    else
    {
        Msg_GW_387.BCM_FrontWiperStatus=getValue(E_pubc_GW_GW_387_BCM_FrontWiperStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_387_BCM_RainfallLevel_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_387_BCM_RainfallLevel_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_387_BCM_RainfallLevel == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_387_BCM_RainfallLevel_Pv, phyValue);
            chgEv_GW_387_BCM_RainfallLevel = 1;
        }
        else
        {
            chgEv_GW_387_BCM_RainfallLevel = 0;
        }    
        //update the signal value
        Msg_GW_387.BCM_RainfallLevel=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_387_BCM_RainfallLevel_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_387_BCM_RainfallLevel_SetVt)==0)
    {
        if(chgEv_GW_387_BCM_RainfallLevel == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_387_BCM_RainfallLevel_Rv, rawValue);
            chgEv_GW_387_BCM_RainfallLevel = 1;  
        }
        else
        {
            chgEv_GW_387_BCM_RainfallLevel = 0;
        }
    }
}

on envVar E_pubc_GW_GW_387_BCM_RainfallLevel_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_387_BCM_RainfallLevel_SetVt))
    {
        //update the signal value
        Msg_GW_387.BCM_RainfallLevel=getValue(this);
    }
}

on envVar E_pubc_GW_GW_387_BCM_RainfallLevel_SetVt
{
    if(getValue(E_pubc_GW_GW_387_BCM_RainfallLevel_SetVt))
    {
        //update the signal value
        Msg_GW_387.BCM_RainfallLevel=getvalue(E_pubc_GW_GW_387_BCM_RainfallLevel_Vt);
    }
    else
    {
        Msg_GW_387.BCM_RainfallLevel=getValue(E_pubc_GW_GW_387_BCM_RainfallLevel_Rv);
    }
}
 
on envVar E_pubc_GW_GW_18E_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_18E_EMS_RollingCounter_1A6_wrongvalctr == 0)
        {
            update_GW_18E_EMS_RollingCounter_1A6_counter();
            Msg_GW_18E.EMS_RollingCounter_1A6= GW_18E_EMS_RollingCounter_1A6_counter;
        }
        else if(GW_18E_EMS_RollingCounter_1A6_wrongvalctr > 0)
        {
			GW_18E_EMS_RollingCounter_1A6_counter=GW_18E_EMS_RollingCounter_1A6_counter + GW_18E_EMS_RollingCounter_1A6_wrongvalctr;
			 Msg_GW_18E.EMS_RollingCounter_1A6= GW_18E_EMS_RollingCounter_1A6_counter;
             /*GW_18E_EMS_RollingCounter_1A6_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_18E_EMS_RollingCounter_1A6_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_18E_EMS_RollingCounter_1A6_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_18E_CRC_CheckSum();

        output(Msg_GW_18E);        
    }
}

on envVar E_pubc_GW_GW_18E_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_AccPedal_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_EngineStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_RealAccPedal_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv, rawValue);
        break;
     case(1) :
        rawValue= 253;
        putValue(E_pubc_GW_GW_18E_EMS_AccPedal_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_18E_EMS_EngineStatus_Rv, rawValue);
        rawValue= 253;
        putValue(E_pubc_GW_GW_18E_EMS_RealAccPedal_Rv, rawValue);
        rawValue= 65534;
        putValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_AccPedal_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_EngineStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_RealAccPedal_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_18E_Dlc
{
    if(getValue(E_pubc_GW_GW_18E_enDlc))
    {
        Msg_GW_18E.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_18E.dlc = 32;
	   	
  }
}

on envVar E_pubc_GW_GW_18E_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_18E.dlc =getValue(E_pubc_GW_GW_18E_Dlc);
    }
    else
    {
	   Msg_GW_18E.dlc = 32;
			
    }
}

on envVar E_pubc_GW_GW_18E_EMS_CRCCheck_1A6_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_18E_EMS_CRCCheck_1A6_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_18E_EMS_RollingCounter_1A6_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_18E_EMS_RollingCounter_1A6_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_18E_EMS_AccPedal_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_18E_EMS_AccPedal == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.392)+(0));
            putValue(E_pubc_GW_GW_18E_EMS_AccPedal_Pv, phyValue);
            chgEv_GW_18E_EMS_AccPedal = 1;
        }
        else
        {
            chgEv_GW_18E_EMS_AccPedal = 0;
        }    
        //update the signal value
        Msg_GW_18E.EMS_AccPedal=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_18E_EMS_AccPedal_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_18E_EMS_AccPedal == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.392);
            putValue(E_pubc_GW_GW_18E_EMS_AccPedal_Rv, rawValue);
            chgEv_GW_18E_EMS_AccPedal = 1;  
        }
        else
        {
            chgEv_GW_18E_EMS_AccPedal = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_18E_EMS_EngineStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_18E_EMS_EngineStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_18E_EMS_EngineStatus_Pv, phyValue);
            chgEv_GW_18E_EMS_EngineStatus = 1;
        }
        else
        {
            chgEv_GW_18E_EMS_EngineStatus = 0;
        }    
        //update the signal value
        Msg_GW_18E.EMS_EngineStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_18E_EMS_EngineStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineStatus_SetVt)==0)
    {
        if(chgEv_GW_18E_EMS_EngineStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_18E_EMS_EngineStatus_Rv, rawValue);
            chgEv_GW_18E_EMS_EngineStatus = 1;  
        }
        else
        {
            chgEv_GW_18E_EMS_EngineStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_18E_EMS_EngineStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineStatus_SetVt))
    {
        //update the signal value
        Msg_GW_18E.EMS_EngineStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_18E_EMS_EngineStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineStatus_SetVt))
    {
        //update the signal value
        Msg_GW_18E.EMS_EngineStatus=getvalue(E_pubc_GW_GW_18E_EMS_EngineStatus_Vt);
    }
    else
    {
        Msg_GW_18E.EMS_EngineStatus=getValue(E_pubc_GW_GW_18E_EMS_EngineStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_18E_EMS_RealAccPedal_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_18E_EMS_RealAccPedal == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.392)+(0));
            putValue(E_pubc_GW_GW_18E_EMS_RealAccPedal_Pv, phyValue);
            chgEv_GW_18E_EMS_RealAccPedal = 1;
        }
        else
        {
            chgEv_GW_18E_EMS_RealAccPedal = 0;
        }    
        //update the signal value
        Msg_GW_18E.EMS_RealAccPedal=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_18E_EMS_RealAccPedal_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_18E_EMS_RealAccPedal == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.392);
            putValue(E_pubc_GW_GW_18E_EMS_RealAccPedal_Rv, rawValue);
            chgEv_GW_18E_EMS_RealAccPedal = 1;  
        }
        else
        {
            chgEv_GW_18E_EMS_RealAccPedal = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_18E_EMS_EngineSpeed == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.25)+(0));
            putValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Pv, phyValue);
            chgEv_GW_18E_EMS_EngineSpeed = 1;
        }
        else
        {
            chgEv_GW_18E_EMS_EngineSpeed = 0;
        }    
        //update the signal value
        Msg_GW_18E.EMS_EngineSpeed=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_18E_EMS_EngineSpeed_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_SetVt)==0)
    {
        if(chgEv_GW_18E_EMS_EngineSpeed == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.25);
            putValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv, rawValue);
            chgEv_GW_18E_EMS_EngineSpeed = 1;  
        }
        else
        {
            chgEv_GW_18E_EMS_EngineSpeed = 0;
        }
    }
}

on envVar E_pubc_GW_GW_18E_EMS_EngineSpeed_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_SetVt))
    {
        //update the signal value
        Msg_GW_18E.EMS_EngineSpeed=getValue(this);
    }
}

on envVar E_pubc_GW_GW_18E_EMS_EngineSpeed_SetVt
{
    if(getValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_SetVt))
    {
        //update the signal value
        Msg_GW_18E.EMS_EngineSpeed=getvalue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Vt);
    }
    else
    {
        Msg_GW_18E.EMS_EngineSpeed=getValue(E_pubc_GW_GW_18E_EMS_EngineSpeed_Rv);
    }
}
 
on envVar E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_18E_EMS_BrakePedalStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Pv, phyValue);
            chgEv_GW_18E_EMS_BrakePedalStatus = 1;
        }
        else
        {
            chgEv_GW_18E_EMS_BrakePedalStatus = 0;
        }    
        //update the signal value
        Msg_GW_18E.EMS_BrakePedalStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_SetVt)==0)
    {
        if(chgEv_GW_18E_EMS_BrakePedalStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv, rawValue);
            chgEv_GW_18E_EMS_BrakePedalStatus = 1;  
        }
        else
        {
            chgEv_GW_18E_EMS_BrakePedalStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_SetVt))
    {
        //update the signal value
        Msg_GW_18E.EMS_BrakePedalStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_18E_EMS_BrakePedalStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_SetVt))
    {
        //update the signal value
        Msg_GW_18E.EMS_BrakePedalStatus=getvalue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Vt);
    }
    else
    {
        Msg_GW_18E.EMS_BrakePedalStatus=getValue(E_pubc_GW_GW_18E_EMS_BrakePedalStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3FD_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_3FD);        
    }
}

on envVar E_pubc_GW_GW_3FD_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv, rawValue);
        break;
     case(1) :
        rawValue= 7;
        putValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3FD_Dlc
{
    if(getValue(E_pubc_GW_GW_3FD_enDlc))
    {
        Msg_GW_3FD.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_3FD.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_3FD_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3FD.dlc =getValue(E_pubc_GW_GW_3FD_Dlc);
    }
    else
    {
	   Msg_GW_3FD.dlc = 8;
			
    }
}


on envVar E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3FD_BCM_PowerManageLevel == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Pv, phyValue);
            chgEv_GW_3FD_BCM_PowerManageLevel = 1;
        }
        else
        {
            chgEv_GW_3FD_BCM_PowerManageLevel = 0;
        }    
        //update the signal value
        Msg_GW_3FD.BCM_PowerManageLevel=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_SetVt)==0)
    {
        if(chgEv_GW_3FD_BCM_PowerManageLevel == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv, rawValue);
            chgEv_GW_3FD_BCM_PowerManageLevel = 1;  
        }
        else
        {
            chgEv_GW_3FD_BCM_PowerManageLevel = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_SetVt))
    {
        //update the signal value
        Msg_GW_3FD.BCM_PowerManageLevel=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3FD_BCM_PowerManageLevel_SetVt
{
    if(getValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_SetVt))
    {
        //update the signal value
        Msg_GW_3FD.BCM_PowerManageLevel=getvalue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Vt);
    }
    else
    {
        Msg_GW_3FD.BCM_PowerManageLevel=getValue(E_pubc_GW_GW_3FD_BCM_PowerManageLevel_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_3C4_HU_RollingCounter_3C2_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C2_counter();
            Msg_GW_3C4.HU_RollingCounter_3C2= GW_3C4_HU_RollingCounter_3C2_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C2_wrongvalctr > 0)
        {
			GW_3C4_HU_RollingCounter_3C2_counter=GW_3C4_HU_RollingCounter_3C2_counter + GW_3C4_HU_RollingCounter_3C2_wrongvalctr;
			 Msg_GW_3C4.HU_RollingCounter_3C2= GW_3C4_HU_RollingCounter_3C2_counter;
             /*GW_3C4_HU_RollingCounter_3C2_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C2_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C2_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(GW_3C4_HU_RollingCounter_3B8_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3B8_counter();
            Msg_GW_3C4.HU_RollingCounter_3B8= GW_3C4_HU_RollingCounter_3B8_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3B8_wrongvalctr > 0)
        {
			GW_3C4_HU_RollingCounter_3B8_counter=GW_3C4_HU_RollingCounter_3B8_counter + GW_3C4_HU_RollingCounter_3B8_wrongvalctr;
			 Msg_GW_3C4.HU_RollingCounter_3B8= GW_3C4_HU_RollingCounter_3B8_counter;
             /*GW_3C4_HU_RollingCounter_3B8_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3B8_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3B8_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(GW_3C4_HU_RollingCounter_3C6_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C6_counter();
            Msg_GW_3C4.HU_RollingCounter_3C6= GW_3C4_HU_RollingCounter_3C6_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C6_wrongvalctr > 0)
        {
			GW_3C4_HU_RollingCounter_3C6_counter=GW_3C4_HU_RollingCounter_3C6_counter + GW_3C4_HU_RollingCounter_3C6_wrongvalctr;
			 Msg_GW_3C4.HU_RollingCounter_3C6= GW_3C4_HU_RollingCounter_3C6_counter;
             /*GW_3C4_HU_RollingCounter_3C6_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C6_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C6_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(GW_3C4_HU_RollingCounter_3C7_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C7_counter();
            Msg_GW_3C4.HU_RollingCounter_3C7= GW_3C4_HU_RollingCounter_3C7_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C7_wrongvalctr > 0)
        {
			GW_3C4_HU_RollingCounter_3C7_counter=GW_3C4_HU_RollingCounter_3C7_counter + GW_3C4_HU_RollingCounter_3C7_wrongvalctr;
			 Msg_GW_3C4.HU_RollingCounter_3C7= GW_3C4_HU_RollingCounter_3C7_counter;
             /*GW_3C4_HU_RollingCounter_3C7_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C7_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C7_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(GW_3C4_HU_RollingCounter_3C4_wrongvalctr == 0)
        {
            update_GW_3C4_HU_RollingCounter_3C4_counter();
            Msg_GW_3C4.HU_RollingCounter_3C4= GW_3C4_HU_RollingCounter_3C4_counter;
        }
        else if(GW_3C4_HU_RollingCounter_3C4_wrongvalctr > 0)
        {
			GW_3C4_HU_RollingCounter_3C4_counter=GW_3C4_HU_RollingCounter_3C4_counter + GW_3C4_HU_RollingCounter_3C4_wrongvalctr;
			 Msg_GW_3C4.HU_RollingCounter_3C4= GW_3C4_HU_RollingCounter_3C4_counter;
             /* GW_3C4_HU_RollingCounter_3C4_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_RollingCounter_3C4_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_RollingCounter_3C4_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_3C4_CRC_CheckSum();

        output(Msg_GW_3C4);        
    }
}

on envVar E_pubc_GW_GW_3C4_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_BranchInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Byroad_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_LaneCnt_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TollDis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Construction_Info_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TollInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RampSide_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TunnelLength_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_BranchInfo_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_Byroad_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_3C4_HU_LaneCnt_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_TollDis_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_Construction_Info_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_TollInfo_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_RampSide_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv, rawValue);
        rawValue= 1022;
        putValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv, rawValue);
        rawValue= 63;
        putValue(E_pubc_GW_GW_3C4_HU_TunnelLength_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_BranchInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Byroad_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_LaneCnt_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TollDis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Construction_Info_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TollInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RampSide_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3C4_HU_TunnelLength_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3C4_Dlc
{
    if(getValue(E_pubc_GW_GW_3C4_enDlc))
    {
        Msg_GW_3C4.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_3C4.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_GW_3C4_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3C4.dlc =getValue(E_pubc_GW_GW_3C4_Dlc);
    }
    else
    {
	   Msg_GW_3C4.dlc = 64;
			
    }
}

on envVar E_pubc_GW_GW_3C4_HU_CRCCheck_3B8_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_CRCCheck_3B8_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_CRCCheck_3C2_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_CRCCheck_3C2_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_CRCCheck_3C4_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_CRCCheck_3C4_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_CRCCheck_3C6_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_CRCCheck_3C6_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_CRCCheck_3C7_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_CRCCheck_3C7_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_RollingCounter_3B8_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_RollingCounter_3B8_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_RollingCounter_3C2_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_RollingCounter_3C2_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_RollingCounter_3C4_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_RollingCounter_3C4_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_RollingCounter_3C6_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_RollingCounter_3C6_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3C4_HU_RollingCounter_3C7_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3C4_HU_RollingCounter_3C7_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_EnterSlopeInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Pv, phyValue);
            chgEv_GW_3C4_HU_EnterSlopeInfo = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_EnterSlopeInfo = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_EnterSlopeInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_EnterSlopeInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv, rawValue);
            chgEv_GW_3C4_HU_EnterSlopeInfo = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_EnterSlopeInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_EnterSlopeInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_EnterSlopeInfo=getvalue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_EnterSlopeInfo=getValue(E_pubc_GW_GW_3C4_HU_EnterSlopeInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_30m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_30m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_30m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_30m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_30m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_30m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_30m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_30m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_30m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_30m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_30m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_TrafficAccident_Info == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Pv, phyValue);
            chgEv_GW_3C4_HU_TrafficAccident_Info = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_TrafficAccident_Info = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_TrafficAccident_Info=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_TrafficAccident_Info == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv, rawValue);
            chgEv_GW_3C4_HU_TrafficAccident_Info = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_TrafficAccident_Info = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TrafficAccident_Info=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TrafficAccident_Info=getvalue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_TrafficAccident_Info=getValue(E_pubc_GW_GW_3C4_HU_TrafficAccident_Info_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_20m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_20m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_20m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_20m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_20m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_20m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_20m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_20m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_20m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_20m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_20m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_EnterTunnelInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Pv, phyValue);
            chgEv_GW_3C4_HU_EnterTunnelInfo = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_EnterTunnelInfo = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_EnterTunnelInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_EnterTunnelInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv, rawValue);
            chgEv_GW_3C4_HU_EnterTunnelInfo = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_EnterTunnelInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_EnterTunnelInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_EnterTunnelInfo=getvalue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_EnterTunnelInfo=getValue(E_pubc_GW_GW_3C4_HU_EnterTunnelInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_MapDataUpdateStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Pv, phyValue);
            chgEv_GW_3C4_HU_MapDataUpdateStatus = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_MapDataUpdateStatus = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_MapDataUpdateStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_MapDataUpdateStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv, rawValue);
            chgEv_GW_3C4_HU_MapDataUpdateStatus = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_MapDataUpdateStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_MapDataUpdateStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_MapDataUpdateStatus=getvalue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_MapDataUpdateStatus=getValue(E_pubc_GW_GW_3C4_HU_MapDataUpdateStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_10m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_10m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_10m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_10m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_10m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_10m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_10m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_10m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_10m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_10m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_10m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_BranchInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_BranchInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_BranchInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_BranchInfo_Pv, phyValue);
            chgEv_GW_3C4_HU_BranchInfo = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_BranchInfo = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_BranchInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_BranchInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_BranchInfo_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_BranchInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_BranchInfo_Rv, rawValue);
            chgEv_GW_3C4_HU_BranchInfo = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_BranchInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_BranchInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_BranchInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_BranchInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_BranchInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_BranchInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_BranchInfo=getvalue(E_pubc_GW_GW_3C4_HU_BranchInfo_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_BranchInfo=getValue(E_pubc_GW_GW_3C4_HU_BranchInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_Road_TrafficFlow == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Pv, phyValue);
            chgEv_GW_3C4_HU_Road_TrafficFlow = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_Road_TrafficFlow = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_Road_TrafficFlow=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_Road_TrafficFlow == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv, rawValue);
            chgEv_GW_3C4_HU_Road_TrafficFlow = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_Road_TrafficFlow = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Road_TrafficFlow=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Road_TrafficFlow=getvalue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_Road_TrafficFlow=getValue(E_pubc_GW_GW_3C4_HU_Road_TrafficFlow_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_FallingRockDi == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Pv, phyValue);
            chgEv_GW_3C4_HU_FallingRockDi = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_FallingRockDi = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_FallingRockDi=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_FallingRockDi_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_FallingRockDi == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv, rawValue);
            chgEv_GW_3C4_HU_FallingRockDi = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_FallingRockDi = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_FallingRockDi_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_FallingRockDi=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_FallingRockDi_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_FallingRockDi=getvalue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_FallingRockDi=getValue(E_pubc_GW_GW_3C4_HU_FallingRockDi_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_Byroad_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_Byroad_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_Byroad == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_Byroad_Pv, phyValue);
            chgEv_GW_3C4_HU_Byroad = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_Byroad = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_Byroad=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_Byroad_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_Byroad_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_Byroad == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_Byroad_Rv, rawValue);
            chgEv_GW_3C4_HU_Byroad = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_Byroad = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Byroad_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_Byroad_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Byroad=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Byroad_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_Byroad_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Byroad=getvalue(E_pubc_GW_GW_3C4_HU_Byroad_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_Byroad=getValue(E_pubc_GW_GW_3C4_HU_Byroad_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_LaneCnt_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_LaneCnt_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_LaneCnt == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_LaneCnt_Pv, phyValue);
            chgEv_GW_3C4_HU_LaneCnt = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_LaneCnt = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_LaneCnt=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_LaneCnt_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_LaneCnt_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_LaneCnt == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_LaneCnt_Rv, rawValue);
            chgEv_GW_3C4_HU_LaneCnt = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_LaneCnt = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_LaneCnt_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_LaneCnt_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_LaneCnt=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_LaneCnt_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_LaneCnt_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_LaneCnt=getvalue(E_pubc_GW_GW_3C4_HU_LaneCnt_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_LaneCnt=getValue(E_pubc_GW_GW_3C4_HU_LaneCnt_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_90m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_90m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_90m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_90m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_90m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_90m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_90m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_90m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_90m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_90m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_90m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_SlopeDistance == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Pv, phyValue);
            chgEv_GW_3C4_HU_SlopeDistance = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_SlopeDistance = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_SlopeDistance=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_SlopeDistance_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_SlopeDistance == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv, rawValue);
            chgEv_GW_3C4_HU_SlopeDistance = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_SlopeDistance = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_SlopeDistance_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_SlopeDistance=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_SlopeDistance_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_SlopeDistance=getvalue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_SlopeDistance=getValue(E_pubc_GW_GW_3C4_HU_SlopeDistance_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_80m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_80m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_80m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_80m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_80m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_80m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_80m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_80m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_80m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_80m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_80m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_100m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_100m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_100m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_100m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_100m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_100m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_100m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_100m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_100m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_100m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_100m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_MapMatchStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Pv, phyValue);
            chgEv_GW_3C4_HU_MapMatchStatus = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_MapMatchStatus = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_MapMatchStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_MapMatchStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_MapMatchStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv, rawValue);
            chgEv_GW_3C4_HU_MapMatchStatus = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_MapMatchStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_MapMatchStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_MapMatchStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_MapMatchStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_MapMatchStatus=getvalue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_MapMatchStatus=getValue(E_pubc_GW_GW_3C4_HU_MapMatchStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_TollDis_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_TollDis_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_TollDis == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_TollDis_Pv, phyValue);
            chgEv_GW_3C4_HU_TollDis = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_TollDis = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_TollDis=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_TollDis_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_TollDis_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_TollDis == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_TollDis_Rv, rawValue);
            chgEv_GW_3C4_HU_TollDis = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_TollDis = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TollDis_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_TollDis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TollDis=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TollDis_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_TollDis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TollDis=getvalue(E_pubc_GW_GW_3C4_HU_TollDis_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_TollDis=getValue(E_pubc_GW_GW_3C4_HU_TollDis_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_To_Construction_Dis == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Pv, phyValue);
            chgEv_GW_3C4_HU_To_Construction_Dis = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_To_Construction_Dis = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_To_Construction_Dis=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_To_Construction_Dis == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv, rawValue);
            chgEv_GW_3C4_HU_To_Construction_Dis = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_To_Construction_Dis = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_Construction_Dis=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_Construction_Dis_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_Construction_Dis=getvalue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_To_Construction_Dis=getValue(E_pubc_GW_GW_3C4_HU_To_Construction_Dis_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_To_Branch_Dis == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Pv, phyValue);
            chgEv_GW_3C4_HU_To_Branch_Dis = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_To_Branch_Dis = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_To_Branch_Dis=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_To_Branch_Dis == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv, rawValue);
            chgEv_GW_3C4_HU_To_Branch_Dis = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_To_Branch_Dis = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_Branch_Dis=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_Branch_Dis_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_Branch_Dis=getvalue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_To_Branch_Dis=getValue(E_pubc_GW_GW_3C4_HU_To_Branch_Dis_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_70m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_70m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_70m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_70m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_70m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_70m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_70m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_70m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_70m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_70m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_70m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_To_TrafficAccident_Dis == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Pv, phyValue);
            chgEv_GW_3C4_HU_To_TrafficAccident_Dis = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_To_TrafficAccident_Dis = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_To_TrafficAccident_Dis=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_To_TrafficAccident_Dis == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv, rawValue);
            chgEv_GW_3C4_HU_To_TrafficAccident_Dis = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_To_TrafficAccident_Dis = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_TrafficAccident_Dis=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_TrafficAccident_Dis=getvalue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_To_TrafficAccident_Dis=getValue(E_pubc_GW_GW_3C4_HU_To_TrafficAccident_Dis_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_Construction_Info_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_Construction_Info_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_Construction_Info == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_Construction_Info_Pv, phyValue);
            chgEv_GW_3C4_HU_Construction_Info = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_Construction_Info = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_Construction_Info=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_Construction_Info_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_Construction_Info_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_Construction_Info == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_Construction_Info_Rv, rawValue);
            chgEv_GW_3C4_HU_Construction_Info = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_Construction_Info = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Construction_Info_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_Construction_Info_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Construction_Info=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Construction_Info_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_Construction_Info_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Construction_Info=getvalue(E_pubc_GW_GW_3C4_HU_Construction_Info_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_Construction_Info=getValue(E_pubc_GW_GW_3C4_HU_Construction_Info_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_60m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_60m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_60m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_60m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_60m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_60m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_60m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_60m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_60m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_60m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_60m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Pv, phyValue);
            chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_To_NumchangeOfLanes_Dist=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv, rawValue);
            chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_To_NumchangeOfLanes_Dist = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_NumchangeOfLanes_Dist=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_To_NumchangeOfLanes_Dist=getvalue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_To_NumchangeOfLanes_Dist=getValue(E_pubc_GW_GW_3C4_HU_To_NumchangeOfLanes_Dist_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_TollInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_TollInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_TollInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_TollInfo_Pv, phyValue);
            chgEv_GW_3C4_HU_TollInfo = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_TollInfo = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_TollInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_TollInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_TollInfo_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_TollInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_TollInfo_Rv, rawValue);
            chgEv_GW_3C4_HU_TollInfo = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_TollInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TollInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_TollInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TollInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TollInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_TollInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TollInfo=getvalue(E_pubc_GW_GW_3C4_HU_TollInfo_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_TollInfo=getValue(E_pubc_GW_GW_3C4_HU_TollInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_300m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_300m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_300m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_300m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_300m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_300m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_300m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_300m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_300m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_300m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_300m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_NavGuiganceStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Pv, phyValue);
            chgEv_GW_3C4_HU_NavGuiganceStatus = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_NavGuiganceStatus = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_NavGuiganceStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_NavGuiganceStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv, rawValue);
            chgEv_GW_3C4_HU_NavGuiganceStatus = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_NavGuiganceStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_NavGuiganceStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_NavGuiganceStatus=getvalue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_NavGuiganceStatus=getValue(E_pubc_GW_GW_3C4_HU_NavGuiganceStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_Lane_Changtype == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Pv, phyValue);
            chgEv_GW_3C4_HU_Lane_Changtype = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_Lane_Changtype = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_Lane_Changtype=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_Lane_Changtype_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_Lane_Changtype == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv, rawValue);
            chgEv_GW_3C4_HU_Lane_Changtype = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_Lane_Changtype = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Lane_Changtype_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Lane_Changtype=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_Lane_Changtype_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_Lane_Changtype=getvalue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_Lane_Changtype=getValue(E_pubc_GW_GW_3C4_HU_Lane_Changtype_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvatureFar == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvatureFar = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvatureFar = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvatureFar=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvatureFar == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvatureFar = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvatureFar = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvatureFar=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvatureFar=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvatureFar=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvatureFar_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RampSide_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RampSide_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RampSide == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RampSide_Pv, phyValue);
            chgEv_GW_3C4_HU_RampSide = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RampSide = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RampSide=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RampSide_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RampSide_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RampSide == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RampSide_Rv, rawValue);
            chgEv_GW_3C4_HU_RampSide = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RampSide = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RampSide_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RampSide_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RampSide=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RampSide_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RampSide_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RampSide=getvalue(E_pubc_GW_GW_3C4_HU_RampSide_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RampSide=getValue(E_pubc_GW_GW_3C4_HU_RampSide_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_ForwardRoadType == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Pv, phyValue);
            chgEv_GW_3C4_HU_ForwardRoadType = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_ForwardRoadType = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_ForwardRoadType=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_ForwardRoadType_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_ForwardRoadType == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv, rawValue);
            chgEv_GW_3C4_HU_ForwardRoadType = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_ForwardRoadType = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_ForwardRoadType_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_ForwardRoadType=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_ForwardRoadType_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_ForwardRoadType=getvalue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_ForwardRoadType=getValue(E_pubc_GW_GW_3C4_HU_ForwardRoadType_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_400m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_400m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_400m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_400m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_400m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_400m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_400m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_400m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_400m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_400m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_400m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_FallingRockInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Pv, phyValue);
            chgEv_GW_3C4_HU_FallingRockInfo = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_FallingRockInfo = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_FallingRockInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_FallingRockInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_FallingRockInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv, rawValue);
            chgEv_GW_3C4_HU_FallingRockInfo = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_FallingRockInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_FallingRockInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_FallingRockInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_FallingRockInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_FallingRockInfo=getvalue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_FallingRockInfo=getValue(E_pubc_GW_GW_3C4_HU_FallingRockInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_600m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_600m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_600m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_600m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_600m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_600m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_600m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_600m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_600m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_600m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_600m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_TunnelDistance == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Pv, phyValue);
            chgEv_GW_3C4_HU_TunnelDistance = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_TunnelDistance = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_TunnelDistance=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_TunnelDistance_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_TunnelDistance == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv, rawValue);
            chgEv_GW_3C4_HU_TunnelDistance = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_TunnelDistance = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TunnelDistance_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TunnelDistance=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TunnelDistance_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TunnelDistance=getvalue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_TunnelDistance=getValue(E_pubc_GW_GW_3C4_HU_TunnelDistance_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_SlopeGradient_300m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.1)+(-51.1));
            putValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Pv, phyValue);
            chgEv_GW_3C4_HU_SlopeGradient_300m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_SlopeGradient_300m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_SlopeGradient_300m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_SlopeGradient_300m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-51.1))/0.1);
            putValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv, rawValue);
            chgEv_GW_3C4_HU_SlopeGradient_300m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_SlopeGradient_300m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_SlopeGradient_300m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_SlopeGradient_300m=getvalue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_SlopeGradient_300m=getValue(E_pubc_GW_GW_3C4_HU_SlopeGradient_300m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_50m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_50m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_50m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_50m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_50m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_50m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_50m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_50m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_50m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_50m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_50m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_RoadCurvature_40m == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Pv, phyValue);
            chgEv_GW_3C4_HU_RoadCurvature_40m = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_40m = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_40m=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_RoadCurvature_40m == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv, rawValue);
            chgEv_GW_3C4_HU_RoadCurvature_40m = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_RoadCurvature_40m = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_40m=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_RoadCurvature_40m=getvalue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_RoadCurvature_40m=getValue(E_pubc_GW_GW_3C4_HU_RoadCurvature_40m_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3C4_HU_TunnelLength_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelLength_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3C4_HU_TunnelLength == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3C4_HU_TunnelLength_Pv, phyValue);
            chgEv_GW_3C4_HU_TunnelLength = 1;
        }
        else
        {
            chgEv_GW_3C4_HU_TunnelLength = 0;
        }    
        //update the signal value
        Msg_GW_3C4.HU_TunnelLength=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3C4_HU_TunnelLength_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelLength_SetVt)==0)
    {
        if(chgEv_GW_3C4_HU_TunnelLength == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3C4_HU_TunnelLength_Rv, rawValue);
            chgEv_GW_3C4_HU_TunnelLength = 1;  
        }
        else
        {
            chgEv_GW_3C4_HU_TunnelLength = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TunnelLength_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelLength_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TunnelLength=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3C4_HU_TunnelLength_SetVt
{
    if(getValue(E_pubc_GW_GW_3C4_HU_TunnelLength_SetVt))
    {
        //update the signal value
        Msg_GW_3C4.HU_TunnelLength=getvalue(E_pubc_GW_GW_3C4_HU_TunnelLength_Vt);
    }
    else
    {
        Msg_GW_3C4.HU_TunnelLength=getValue(E_pubc_GW_GW_3C4_HU_TunnelLength_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3FF_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_3FF);        
    }
}

on envVar E_pubc_GW_GW_3FF_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3FF_Dlc
{
    if(getValue(E_pubc_GW_GW_3FF_enDlc))
    {
        Msg_GW_3FF.dlc =getValue(this);
    }
    else
    {
        Msg_GW_3FF.dlc =8;
    }
}

on envVar E_pubc_GW_GW_3FF_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3FF.dlc =getValue(E_pubc_GW_GW_3FF_Dlc);
    }
    else
    {
        Msg_GW_3FF.dlc =8;
    }
}


/*@@envVar:E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Rv:*/
on envVar E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3FF_BCM_LeftLowBeamError == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Pv, phyValue);
            chgEv_GW_3FF_BCM_LeftLowBeamError = 1;
        }
        else
        {
            chgEv_GW_3FF_BCM_LeftLowBeamError = 0;
        }    
        //update the signal value
        Msg_GW_3FF.BCM_LeftLowBeamError=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Pv:*/
on envVar E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_3FF_BCM_LeftLowBeamError == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3FF_BCM_LeftLowBeamError_Rv, rawValue);
            chgEv_GW_3FF_BCM_LeftLowBeamError = 1;  
        }
        else
        {
            chgEv_GW_3FF_BCM_LeftLowBeamError = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv:*/
on envVar E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3FF_BCM_FrontFoglampStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Pv, phyValue);
            chgEv_GW_3FF_BCM_FrontFoglampStatus = 1;
        }
        else
        {
            chgEv_GW_3FF_BCM_FrontFoglampStatus = 0;
        }    
        //update the signal value
        Msg_GW_3FF.BCM_FrontFoglampStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_SetVt)==0)
    {
        if(chgEv_GW_3FF_BCM_FrontFoglampStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv, rawValue);
            chgEv_GW_3FF_BCM_FrontFoglampStatus = 1;  
        }
        else
        {
            chgEv_GW_3FF_BCM_FrontFoglampStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3FF.BCM_FrontFoglampStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3FF.BCM_FrontFoglampStatus=getvalue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Vt);
    }
    else
    {
        Msg_GW_3FF.BCM_FrontFoglampStatus=getValue(E_pubc_GW_GW_3FF_BCM_FrontFoglampStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3FF_BCM_AutoHeadlightSts == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Pv, phyValue);
            chgEv_GW_3FF_BCM_AutoHeadlightSts = 1;
        }
        else
        {
            chgEv_GW_3FF_BCM_AutoHeadlightSts = 0;
        }    
        //update the signal value
        Msg_GW_3FF.BCM_AutoHeadlightSts=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_SetVt)==0)
    {
        if(chgEv_GW_3FF_BCM_AutoHeadlightSts == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv, rawValue);
            chgEv_GW_3FF_BCM_AutoHeadlightSts = 1;  
        }
        else
        {
            chgEv_GW_3FF_BCM_AutoHeadlightSts = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_SetVt))
    {
        //update the signal value
        Msg_GW_3FF.BCM_AutoHeadlightSts=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_SetVt
{
    if(getValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_SetVt))
    {
        //update the signal value
        Msg_GW_3FF.BCM_AutoHeadlightSts=getvalue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Vt);
    }
    else
    {
        Msg_GW_3FF.BCM_AutoHeadlightSts=getValue(E_pubc_GW_GW_3FF_BCM_AutoHeadlightSts_Rv);
    }
}
 
/*@@envVar:E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Rv:*/
on envVar E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3FF_BCM_RightLowBeamError == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Pv, phyValue);
            chgEv_GW_3FF_BCM_RightLowBeamError = 1;
        }
        else
        {
            chgEv_GW_3FF_BCM_RightLowBeamError = 0;
        }    
        //update the signal value
        Msg_GW_3FF.BCM_RightLowBeamError=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Pv:*/
on envVar E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_3FF_BCM_RightLowBeamError == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3FF_BCM_RightLowBeamError_Rv, rawValue);
            chgEv_GW_3FF_BCM_RightLowBeamError = 1;  
        }
        else
        {
            chgEv_GW_3FF_BCM_RightLowBeamError = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_50_tx:*/
on envVar E_pubc_GW_GW_50_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_50_SRS_RollingCounter_id050_wrongvalctr == 0)
        {
            update_GW_50_SRS_RollingCounter_id050_counter();
            Msg_GW_50.SRS_RollingCounter_id050= GW_50_SRS_RollingCounter_id050_counter;
        }
        else if(GW_50_SRS_RollingCounter_id050_wrongvalctr > 0)
        {
			GW_50_SRS_RollingCounter_id050_counter=GW_50_SRS_RollingCounter_id050_counter + GW_50_SRS_RollingCounter_id050_wrongvalctr;
			 Msg_GW_50.SRS_RollingCounter_id050= GW_50_SRS_RollingCounter_id050_counter;
             /* GW_50_SRS_RollingCounter_id050_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_50_SRS_RollingCounter_id050_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_50_SRS_RollingCounter_id050_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_50_CRC_CheckSum();

        output(Msg_GW_50);        
    }
}

on envVar E_pubc_GW_GW_50_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv, rawValue);
        rawValue= 15;
        putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv, rawValue);
        rawValue= 15;
        putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_50_Dlc
{
    if(getValue(E_pubc_GW_GW_50_enDlc))
    {
        Msg_GW_50.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_50.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_50_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_50.dlc =getValue(E_pubc_GW_GW_50_Dlc);
    }
    else
    {
	   Msg_GW_50.dlc = 8;
			
    }
}

on envVar E_pubc_GW_GW_50_SRS_CRCCheck_50_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_50_SRS_CRCCheck_50_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_50_SRS_RollingCounter_id050_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_50_SRS_RollingCounter_id050_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_50_SRS_WarningLampStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Pv, phyValue);
            chgEv_GW_50_SRS_WarningLampStatus = 1;
        }
        else
        {
            chgEv_GW_50_SRS_WarningLampStatus = 0;
        }    
        //update the signal value
        Msg_GW_50.SRS_WarningLampStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_50_SRS_WarningLampStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_SetVt)==0)
    {
        if(chgEv_GW_50_SRS_WarningLampStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv, rawValue);
            chgEv_GW_50_SRS_WarningLampStatus = 1;  
        }
        else
        {
            chgEv_GW_50_SRS_WarningLampStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_50_SRS_WarningLampStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_WarningLampStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_50_SRS_WarningLampStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_WarningLampStatus=getvalue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Vt);
    }
    else
    {
        Msg_GW_50.SRS_WarningLampStatus=getValue(E_pubc_GW_GW_50_SRS_WarningLampStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_50_SRS_DriverBuckleSwitchStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Pv, phyValue);
            chgEv_GW_50_SRS_DriverBuckleSwitchStatus = 1;
        }
        else
        {
            chgEv_GW_50_SRS_DriverBuckleSwitchStatus = 0;
        }    
        //update the signal value
        Msg_GW_50.SRS_DriverBuckleSwitchStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_SetVt)==0)
    {
        if(chgEv_GW_50_SRS_DriverBuckleSwitchStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv, rawValue);
            chgEv_GW_50_SRS_DriverBuckleSwitchStatus = 1;  
        }
        else
        {
            chgEv_GW_50_SRS_DriverBuckleSwitchStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_DriverBuckleSwitchStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_DriverBuckleSwitchStatus=getvalue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Vt);
    }
    else
    {
        Msg_GW_50.SRS_DriverBuckleSwitchStatus=getValue(E_pubc_GW_GW_50_SRS_DriverBuckleSwitchStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_50_SRS_CrashOutputStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Pv, phyValue);
            chgEv_GW_50_SRS_CrashOutputStatus = 1;
        }
        else
        {
            chgEv_GW_50_SRS_CrashOutputStatus = 0;
        }    
        //update the signal value
        Msg_GW_50.SRS_CrashOutputStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_SetVt)==0)
    {
        if(chgEv_GW_50_SRS_CrashOutputStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv, rawValue);
            chgEv_GW_50_SRS_CrashOutputStatus = 1;  
        }
        else
        {
            chgEv_GW_50_SRS_CrashOutputStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_CrashOutputStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_CrashOutputStatus=getvalue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Vt);
    }
    else
    {
        Msg_GW_50.SRS_CrashOutputStatus=getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_50_SRS_CrashOutputStatusCheckSum == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Pv, phyValue);
            chgEv_GW_50_SRS_CrashOutputStatusCheckSum = 1;
        }
        else
        {
            chgEv_GW_50_SRS_CrashOutputStatusCheckSum = 0;
        }    
        //update the signal value
        Msg_GW_50.SRS_CrashOutputStatusCheckSum=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_SetVt)==0)
    {
        if(chgEv_GW_50_SRS_CrashOutputStatusCheckSum == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv, rawValue);
            chgEv_GW_50_SRS_CrashOutputStatusCheckSum = 1;  
        }
        else
        {
            chgEv_GW_50_SRS_CrashOutputStatusCheckSum = 0;
        }
    }
}

on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_CrashOutputStatusCheckSum=getValue(this);
    }
}

on envVar E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_SetVt
{
    if(getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_SetVt))
    {
        //update the signal value
        Msg_GW_50.SRS_CrashOutputStatusCheckSum=getvalue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Vt);
    }
    else
    {
        Msg_GW_50.SRS_CrashOutputStatusCheckSum=getValue(E_pubc_GW_GW_50_SRS_CrashOutputStatusCheckSum_Rv);
    }
}
 
on envVar E_pubc_GW_GW_188_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_188_TCU_RollingCounter_188_wrongvalctr == 0)
        {
            update_GW_188_TCU_RollingCounter_188_counter();
            Msg_GW_188.TCU_RollingCounter_188= GW_188_TCU_RollingCounter_188_counter;
        }
        else if(GW_188_TCU_RollingCounter_188_wrongvalctr > 0)
        {
			GW_188_TCU_RollingCounter_188_counter=GW_188_TCU_RollingCounter_188_counter + GW_188_TCU_RollingCounter_188_wrongvalctr;
			 Msg_GW_188.TCU_RollingCounter_188= GW_188_TCU_RollingCounter_188_counter;
             /*GW_188_TCU_RollingCounter_188_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_188_TCU_RollingCounter_188_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_188_TCU_RollingCounter_188_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_188_CRC_CheckSum();

        output(Msg_GW_188);        
    }
}

on envVar E_pubc_GW_GW_188_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_188_Dlc
{
    if(getValue(E_pubc_GW_GW_188_enDlc))
    {
        Msg_GW_188.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_188.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_188_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_188.dlc =getValue(E_pubc_GW_GW_188_Dlc);
    }
    else
    {
	   Msg_GW_188.dlc = 8;
			
    }
}

on envVar E_pubc_GW_GW_188_TCU_CRCCheck_188_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_188_TCU_CRCCheck_188_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_188_TCU_RollingCounter_188_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_188_TCU_RollingCounter_188_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_188_TCU_ShiftinProgressValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Pv, phyValue);
            chgEv_GW_188_TCU_ShiftinProgressValid = 1;
        }
        else
        {
            chgEv_GW_188_TCU_ShiftinProgressValid = 0;
        }    
        //update the signal value
        Msg_GW_188.TCU_ShiftinProgressValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_SetVt)==0)
    {
        if(chgEv_GW_188_TCU_ShiftinProgressValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv, rawValue);
            chgEv_GW_188_TCU_ShiftinProgressValid = 1;  
        }
        else
        {
            chgEv_GW_188_TCU_ShiftinProgressValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_SetVt))
    {
        //update the signal value
        Msg_GW_188.TCU_ShiftinProgressValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgressValid_SetVt
{
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_SetVt))
    {
        //update the signal value
        Msg_GW_188.TCU_ShiftinProgressValid=getvalue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Vt);
    }
    else
    {
        Msg_GW_188.TCU_ShiftinProgressValid=getValue(E_pubc_GW_GW_188_TCU_ShiftinProgressValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_188_TCU_ShiftinProgress == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Pv, phyValue);
            chgEv_GW_188_TCU_ShiftinProgress = 1;
        }
        else
        {
            chgEv_GW_188_TCU_ShiftinProgress = 0;
        }    
        //update the signal value
        Msg_GW_188.TCU_ShiftinProgress=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgress_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_SetVt)==0)
    {
        if(chgEv_GW_188_TCU_ShiftinProgress == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv, rawValue);
            chgEv_GW_188_TCU_ShiftinProgress = 1;  
        }
        else
        {
            chgEv_GW_188_TCU_ShiftinProgress = 0;
        }
    }
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgress_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_SetVt))
    {
        //update the signal value
        Msg_GW_188.TCU_ShiftinProgress=getValue(this);
    }
}

on envVar E_pubc_GW_GW_188_TCU_ShiftinProgress_SetVt
{
    if(getValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_SetVt))
    {
        //update the signal value
        Msg_GW_188.TCU_ShiftinProgress=getvalue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Vt);
    }
    else
    {
        Msg_GW_188.TCU_ShiftinProgress=getValue(E_pubc_GW_GW_188_TCU_ShiftinProgress_Rv);
    }
}
 
on envVar E_pubc_GW_GW_24F_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_24F_EPS_RollingCounter_24F_wrongvalctr == 0)
        {
            update_GW_24F_EPS_RollingCounter_24F_counter();
            Msg_GW_24F.EPS_RollingCounter_24F= GW_24F_EPS_RollingCounter_24F_counter;
        }
        else if(GW_24F_EPS_RollingCounter_24F_wrongvalctr > 0)
        {
			GW_24F_EPS_RollingCounter_24F_counter=GW_24F_EPS_RollingCounter_24F_counter + GW_24F_EPS_RollingCounter_24F_wrongvalctr;
			 Msg_GW_24F.EPS_RollingCounter_24F= GW_24F_EPS_RollingCounter_24F_counter;
             /* GW_24F_EPS_RollingCounter_24F_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_24F_EPS_RollingCounter_24F_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_24F_EPS_RollingCounter_24F_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_24F_CRC_CheckSum();

        output(Msg_GW_24F);        
    }
}

on envVar E_pubc_GW_GW_24F_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_24F_Dlc
{
    if(getValue(E_pubc_GW_GW_24F_enDlc))
    {
        Msg_GW_24F.dlc =getValue(this);
    }
    else
    {
        Msg_GW_24F.dlc =8;
    }
}

on envVar E_pubc_GW_GW_24F_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_24F.dlc =getValue(E_pubc_GW_GW_24F_Dlc);
    }
    else
    {
        Msg_GW_24F.dlc =8;
    }
}

on envVar E_pubc_GW_GW_24F_EPS_CRCCheck_24F_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_24F_EPS_CRCCheck_24F_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_24F_EPS_RollingCounter_24F_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_24F_EPS_RollingCounter_24F_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_24F_EPS_TorqueAssistMode == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Pv, phyValue);
            chgEv_GW_24F_EPS_TorqueAssistMode = 1;
        }
        else
        {
            chgEv_GW_24F_EPS_TorqueAssistMode = 0;
        }    
        //update the signal value
        Msg_GW_24F.EPS_TorqueAssistMode=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_SetVt)==0)
    {
        if(chgEv_GW_24F_EPS_TorqueAssistMode == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv, rawValue);
            chgEv_GW_24F_EPS_TorqueAssistMode = 1;  
        }
        else
        {
            chgEv_GW_24F_EPS_TorqueAssistMode = 0;
        }
    }
}

on envVar E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_SetVt))
    {
        //update the signal value
        Msg_GW_24F.EPS_TorqueAssistMode=getValue(this);
    }
}

on envVar E_pubc_GW_GW_24F_EPS_TorqueAssistMode_SetVt
{
    if(getValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_SetVt))
    {
        //update the signal value
        Msg_GW_24F.EPS_TorqueAssistMode=getvalue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Vt);
    }
    else
    {
        Msg_GW_24F.EPS_TorqueAssistMode=getValue(E_pubc_GW_GW_24F_EPS_TorqueAssistMode_Rv);
    }
}
 
on envVar E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_24F_EPS_IACC_abortreason == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Pv, phyValue);
            chgEv_GW_24F_EPS_IACC_abortreason = 1;
        }
        else
        {
            chgEv_GW_24F_EPS_IACC_abortreason = 0;
        }    
        //update the signal value
        Msg_GW_24F.EPS_IACC_abortreason=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_24F_EPS_IACC_abortreason_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_SetVt)==0)
    {
        if(chgEv_GW_24F_EPS_IACC_abortreason == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv, rawValue);
            chgEv_GW_24F_EPS_IACC_abortreason = 1;  
        }
        else
        {
            chgEv_GW_24F_EPS_IACC_abortreason = 0;
        }
    }
}

on envVar E_pubc_GW_GW_24F_EPS_IACC_abortreason_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_SetVt))
    {
        //update the signal value
        Msg_GW_24F.EPS_IACC_abortreason=getValue(this);
    }
}

on envVar E_pubc_GW_GW_24F_EPS_IACC_abortreason_SetVt
{
    if(getValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_SetVt))
    {
        //update the signal value
        Msg_GW_24F.EPS_IACC_abortreason=getvalue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Vt);
    }
    else
    {
        Msg_GW_24F.EPS_IACC_abortreason=getValue(E_pubc_GW_GW_24F_EPS_IACC_abortreason_Rv);
    }
}
 
on envVar E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_24F_EPS_ConcussAvailabilityStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Pv, phyValue);
            chgEv_GW_24F_EPS_ConcussAvailabilityStatus = 1;
        }
        else
        {
            chgEv_GW_24F_EPS_ConcussAvailabilityStatus = 0;
        }    
        //update the signal value
        Msg_GW_24F.EPS_ConcussAvailabilityStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_SetVt)==0)
    {
        if(chgEv_GW_24F_EPS_ConcussAvailabilityStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv, rawValue);
            chgEv_GW_24F_EPS_ConcussAvailabilityStatus = 1;  
        }
        else
        {
            chgEv_GW_24F_EPS_ConcussAvailabilityStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_SetVt))
    {
        //update the signal value
        Msg_GW_24F.EPS_ConcussAvailabilityStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_SetVt))
    {
        //update the signal value
        Msg_GW_24F.EPS_ConcussAvailabilityStatus=getvalue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Vt);
    }
    else
    {
        Msg_GW_24F.EPS_ConcussAvailabilityStatus=getValue(E_pubc_GW_GW_24F_EPS_ConcussAvailabilityStatus_Rv);
    }
}
 
on envVar E_pubc_GW_APA_247_tx
{
    if(getValue(this))
    {       
        

        output(Msg_APA_247);        
    }
}

on envVar E_pubc_GW_APA_247_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_APA_247_APA_APAOnOff_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_APA_247_APA_APAOnOff_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_APA_247_APA_APAOnOff_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_APA_247_Dlc
{
    if(getValue(E_pubc_GW_APA_247_enDlc))
    {
        Msg_APA_247.dlc =getValue(this);
    }
    else
    {
        Msg_APA_247.dlc =32;
    }
}

on envVar E_pubc_GW_APA_247_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_APA_247.dlc =getValue(E_pubc_GW_APA_247_Dlc);
    }
    else
    {
        Msg_APA_247.dlc =32;
    }
}


on envVar E_pubc_GW_APA_247_APA_APAOnOff_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_APA_247_APA_APAOnOff_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_APA_247_APA_APAOnOff == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_APA_247_APA_APAOnOff_Pv, phyValue);
            chgEv_APA_247_APA_APAOnOff = 1;
        }
        else
        {
            chgEv_APA_247_APA_APAOnOff = 0;
        }    
        //update the signal value
        Msg_APA_247.APA_APAOnOff=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_APA_247_APA_APAOnOff_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_APA_247_APA_APAOnOff_SetVt)==0)
    {
        if(chgEv_APA_247_APA_APAOnOff == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_APA_247_APA_APAOnOff_Rv, rawValue);
            chgEv_APA_247_APA_APAOnOff = 1;  
        }
        else
        {
            chgEv_APA_247_APA_APAOnOff = 0;
        }
    }
}

on envVar E_pubc_GW_APA_247_APA_APAOnOff_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_APA_247_APA_APAOnOff_SetVt))
    {
        //update the signal value
        Msg_APA_247.APA_APAOnOff=getValue(this);
    }
}

on envVar E_pubc_GW_APA_247_APA_APAOnOff_SetVt
{
    if(getValue(E_pubc_GW_APA_247_APA_APAOnOff_SetVt))
    {
        //update the signal value
        Msg_APA_247.APA_APAOnOff=getvalue(E_pubc_GW_APA_247_APA_APAOnOff_Vt);
    }
    else
    {
        Msg_APA_247.APA_APAOnOff=getValue(E_pubc_GW_APA_247_APA_APAOnOff_Rv);
    }
}
 
on envVar E_pubc_GW_GW_278_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_278_ESP_RollingCounter_278_wrongvalctr == 0)
        {
            update_GW_278_ESP_RollingCounter_278_counter();
            Msg_GW_278.ESP_RollingCounter_278= GW_278_ESP_RollingCounter_278_counter;
        }
        else if(GW_278_ESP_RollingCounter_278_wrongvalctr > 0)
        {
			GW_278_ESP_RollingCounter_278_counter=GW_278_ESP_RollingCounter_278_counter + GW_278_ESP_RollingCounter_278_wrongvalctr;
			 Msg_GW_278.ESP_RollingCounter_278= GW_278_ESP_RollingCounter_278_counter;
             /*GW_278_ESP_RollingCounter_278_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_278_ESP_RollingCounter_278_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_278_ESP_RollingCounter_278_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_278_CRC_CheckSum();

        output(Msg_GW_278);        
    }
}

on envVar E_pubc_GW_GW_278_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LongAccel_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_YawRateValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_YawRate_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LatAccelValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LatAccel_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LongAccelValid_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1021;
        putValue(E_pubc_GW_GW_278_ESP_LongAccel_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_278_ESP_YawRateValid_Rv, rawValue);
        rawValue= 16381;
        putValue(E_pubc_GW_GW_278_ESP_YawRate_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_278_ESP_LatAccelValid_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv, rawValue);
        rawValue= 253;
        putValue(E_pubc_GW_GW_278_ESP_LatAccel_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_278_ESP_LongAccelValid_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LongAccel_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_YawRateValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_YawRate_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LatAccelValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LatAccel_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_278_ESP_LongAccelValid_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_278_Dlc
{
    if(getValue(E_pubc_GW_GW_278_enDlc))
    {
        Msg_GW_278.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_278.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_278_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_278.dlc =getValue(E_pubc_GW_GW_278_Dlc);
    }
    else
    {
	   Msg_GW_278.dlc = 8;
			
    }
}

on envVar E_pubc_GW_GW_278_ESP_CRCCheck_278_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_278_ESP_CRCCheck_278_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_278_ESP_RollingCounter_278_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_278_ESP_RollingCounter_278_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_278_ESP_LongAccel_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_LongAccel == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.03125)+(-16));
            putValue(E_pubc_GW_GW_278_ESP_LongAccel_Pv, phyValue);
            chgEv_GW_278_ESP_LongAccel = 1;
        }
        else
        {
            chgEv_GW_278_ESP_LongAccel = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_LongAccel=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_LongAccel_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_278_ESP_LongAccel == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.03125);
            putValue(E_pubc_GW_GW_278_ESP_LongAccel_Rv, rawValue);
            chgEv_GW_278_ESP_LongAccel = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_LongAccel = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_278_ESP_YawRateValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_YawRateValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_278_ESP_YawRateValid_Pv, phyValue);
            chgEv_GW_278_ESP_YawRateValid = 1;
        }
        else
        {
            chgEv_GW_278_ESP_YawRateValid = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_YawRateValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_YawRateValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_SetVt)==0)
    {
        if(chgEv_GW_278_ESP_YawRateValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_278_ESP_YawRateValid_Rv, rawValue);
            chgEv_GW_278_ESP_YawRateValid = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_YawRateValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_278_ESP_YawRateValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_YawRateValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_278_ESP_YawRateValid_SetVt
{
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_YawRateValid=getvalue(E_pubc_GW_GW_278_ESP_YawRateValid_Vt);
    }
    else
    {
        Msg_GW_278.ESP_YawRateValid=getValue(E_pubc_GW_GW_278_ESP_YawRateValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_278_ESP_YawRate_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_YawRate == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(-81.91));
            putValue(E_pubc_GW_GW_278_ESP_YawRate_Pv, phyValue);
            chgEv_GW_278_ESP_YawRate = 1;
        }
        else
        {
            chgEv_GW_278_ESP_YawRate = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_YawRate=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_YawRate_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_278_ESP_YawRate == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-81.91))/0.01);
            putValue(E_pubc_GW_GW_278_ESP_YawRate_Rv, rawValue);
            chgEv_GW_278_ESP_YawRate = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_YawRate = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_IMUCalibrated == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Pv, phyValue);
            chgEv_GW_278_ESP_IMUCalibrated = 1;
        }
        else
        {
            chgEv_GW_278_ESP_IMUCalibrated = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_IMUCalibrated=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_IMUCalibrated_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_SetVt)==0)
    {
        if(chgEv_GW_278_ESP_IMUCalibrated == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv, rawValue);
            chgEv_GW_278_ESP_IMUCalibrated = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_IMUCalibrated = 0;
        }
    }
}

on envVar E_pubc_GW_GW_278_ESP_IMUCalibrated_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_IMUCalibrated=getValue(this);
    }
}

on envVar E_pubc_GW_GW_278_ESP_IMUCalibrated_SetVt
{
    if(getValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_IMUCalibrated=getvalue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Vt);
    }
    else
    {
        Msg_GW_278.ESP_IMUCalibrated=getValue(E_pubc_GW_GW_278_ESP_IMUCalibrated_Rv);
    }
}
 
on envVar E_pubc_GW_GW_278_ESP_LatAccelValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_278_ESP_LatAccelValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_LatAccelValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_278_ESP_LatAccelValid_Pv, phyValue);
            chgEv_GW_278_ESP_LatAccelValid = 1;
        }
        else
        {
            chgEv_GW_278_ESP_LatAccelValid = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_LatAccelValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_LatAccelValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_278_ESP_LatAccelValid_SetVt)==0)
    {
        if(chgEv_GW_278_ESP_LatAccelValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_278_ESP_LatAccelValid_Rv, rawValue);
            chgEv_GW_278_ESP_LatAccelValid = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_LatAccelValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_278_ESP_LatAccelValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_278_ESP_LatAccelValid_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_LatAccelValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_278_ESP_LatAccelValid_SetVt
{
    if(getValue(E_pubc_GW_GW_278_ESP_LatAccelValid_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_LatAccelValid=getvalue(E_pubc_GW_GW_278_ESP_LatAccelValid_Vt);
    }
    else
    {
        Msg_GW_278.ESP_LatAccelValid=getValue(E_pubc_GW_GW_278_ESP_LatAccelValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_YawRateValid_R == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Pv, phyValue);
            chgEv_GW_278_ESP_YawRateValid_R = 1;
        }
        else
        {
            chgEv_GW_278_ESP_YawRateValid_R = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_YawRateValid_R=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_YawRateValid_R_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_SetVt)==0)
    {
        if(chgEv_GW_278_ESP_YawRateValid_R == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv, rawValue);
            chgEv_GW_278_ESP_YawRateValid_R = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_YawRateValid_R = 0;
        }
    }
}

on envVar E_pubc_GW_GW_278_ESP_YawRateValid_R_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_YawRateValid_R=getValue(this);
    }
}

on envVar E_pubc_GW_GW_278_ESP_YawRateValid_R_SetVt
{
    if(getValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_YawRateValid_R=getvalue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Vt);
    }
    else
    {
        Msg_GW_278.ESP_YawRateValid_R=getValue(E_pubc_GW_GW_278_ESP_YawRateValid_R_Rv);
    }
}
 
on envVar E_pubc_GW_GW_278_ESP_LatAccel_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_LatAccel == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.1)+(-12.7));
            putValue(E_pubc_GW_GW_278_ESP_LatAccel_Pv, phyValue);
            chgEv_GW_278_ESP_LatAccel = 1;
        }
        else
        {
            chgEv_GW_278_ESP_LatAccel = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_LatAccel=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_LatAccel_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_278_ESP_LatAccel == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-12.7))/0.1);
            putValue(E_pubc_GW_GW_278_ESP_LatAccel_Rv, rawValue);
            chgEv_GW_278_ESP_LatAccel = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_LatAccel = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_278_ESP_LongAccelValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_278_ESP_LongAccelValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_278_ESP_LongAccelValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_278_ESP_LongAccelValid_Pv, phyValue);
            chgEv_GW_278_ESP_LongAccelValid = 1;
        }
        else
        {
            chgEv_GW_278_ESP_LongAccelValid = 0;
        }    
        //update the signal value
        Msg_GW_278.ESP_LongAccelValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_278_ESP_LongAccelValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_278_ESP_LongAccelValid_SetVt)==0)
    {
        if(chgEv_GW_278_ESP_LongAccelValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_278_ESP_LongAccelValid_Rv, rawValue);
            chgEv_GW_278_ESP_LongAccelValid = 1;  
        }
        else
        {
            chgEv_GW_278_ESP_LongAccelValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_278_ESP_LongAccelValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_278_ESP_LongAccelValid_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_LongAccelValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_278_ESP_LongAccelValid_SetVt
{
    if(getValue(E_pubc_GW_GW_278_ESP_LongAccelValid_SetVt))
    {
        //update the signal value
        Msg_GW_278.ESP_LongAccelValid=getvalue(E_pubc_GW_GW_278_ESP_LongAccelValid_Vt);
    }
    else
    {
        Msg_GW_278.ESP_LongAccelValid=getValue(E_pubc_GW_GW_278_ESP_LongAccelValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_507);        
    }
}

on envVar E_pubc_GW_GW_507_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_LASModeSelection_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_LDWShakeLev_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_TSRSwitch_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_HMAEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_IACCEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_FCWSetting_Rv, rawValue);
        break;
     case(1) :
        rawValue= 7;
        putValue(E_pubc_GW_GW_507_HU_LASModeSelection_Rv, rawValue);
        rawValue= 20;
        putValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_507_HU_LDWShakeLev_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_507_HU_TSRSwitch_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_507_HU_HMAEnable_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_507_HU_IACCEnable_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_507_HU_FCWSetting_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_LASModeSelection_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_LDWShakeLev_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_TSRSwitch_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_HMAEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_IACCEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_507_HU_FCWSetting_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_507_Dlc
{
    if(getValue(E_pubc_GW_GW_507_enDlc))
    {
        Msg_GW_507.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_507.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_GW_507_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_507.dlc =getValue(E_pubc_GW_GW_507_Dlc);
    }
    else
    {
	   Msg_GW_507.dlc = 64;
			
    }
}


on envVar E_pubc_GW_GW_507_HU_LASModeSelection_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_LASModeSelection_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_LASModeSelection == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_LASModeSelection_Pv, phyValue);
            chgEv_GW_507_HU_LASModeSelection = 1;
        }
        else
        {
            chgEv_GW_507_HU_LASModeSelection = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_LASModeSelection=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_LASModeSelection_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_LASModeSelection_SetVt)==0)
    {
        if(chgEv_GW_507_HU_LASModeSelection == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_LASModeSelection_Rv, rawValue);
            chgEv_GW_507_HU_LASModeSelection = 1;  
        }
        else
        {
            chgEv_GW_507_HU_LASModeSelection = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_LASModeSelection_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_LASModeSelection_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_LASModeSelection=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_LASModeSelection_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_LASModeSelection_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_LASModeSelection=getvalue(E_pubc_GW_GW_507_HU_LASModeSelection_Vt);
    }
    else
    {
        Msg_GW_507.HU_LASModeSelection=getValue(E_pubc_GW_GW_507_HU_LASModeSelection_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_OverspeedWarningOffset == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(-10));
            putValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Pv, phyValue);
            chgEv_GW_507_HU_OverspeedWarningOffset = 1;
        }
        else
        {
            chgEv_GW_507_HU_OverspeedWarningOffset = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_OverspeedWarningOffset=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_SetVt)==0)
    {
        if(chgEv_GW_507_HU_OverspeedWarningOffset == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-10))/1);
            putValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv, rawValue);
            chgEv_GW_507_HU_OverspeedWarningOffset = 1;  
        }
        else
        {
            chgEv_GW_507_HU_OverspeedWarningOffset = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_OverspeedWarningOffset=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_OverspeedWarningOffset_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_OverspeedWarningOffset=getvalue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Vt);
    }
    else
    {
        Msg_GW_507.HU_OverspeedWarningOffset=getValue(E_pubc_GW_GW_507_HU_OverspeedWarningOffset_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_LASWarningModeSelection == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Pv, phyValue);
            chgEv_GW_507_HU_LASWarningModeSelection = 1;
        }
        else
        {
            chgEv_GW_507_HU_LASWarningModeSelection = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_LASWarningModeSelection=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_LASWarningModeSelection_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_SetVt)==0)
    {
        if(chgEv_GW_507_HU_LASWarningModeSelection == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv, rawValue);
            chgEv_GW_507_HU_LASWarningModeSelection = 1;  
        }
        else
        {
            chgEv_GW_507_HU_LASWarningModeSelection = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_LASWarningModeSelection_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_LASWarningModeSelection=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_LASWarningModeSelection_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_LASWarningModeSelection=getvalue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Vt);
    }
    else
    {
        Msg_GW_507.HU_LASWarningModeSelection=getValue(E_pubc_GW_GW_507_HU_LASWarningModeSelection_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_LDWShakeLev_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_LDWShakeLev_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_LDWShakeLev == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_LDWShakeLev_Pv, phyValue);
            chgEv_GW_507_HU_LDWShakeLev = 1;
        }
        else
        {
            chgEv_GW_507_HU_LDWShakeLev = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_LDWShakeLev=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_LDWShakeLev_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_LDWShakeLev_SetVt)==0)
    {
        if(chgEv_GW_507_HU_LDWShakeLev == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_LDWShakeLev_Rv, rawValue);
            chgEv_GW_507_HU_LDWShakeLev = 1;  
        }
        else
        {
            chgEv_GW_507_HU_LDWShakeLev = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_LDWShakeLev_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_LDWShakeLev_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_LDWShakeLev=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_LDWShakeLev_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_LDWShakeLev_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_LDWShakeLev=getvalue(E_pubc_GW_GW_507_HU_LDWShakeLev_Vt);
    }
    else
    {
        Msg_GW_507.HU_LDWShakeLev=getValue(E_pubc_GW_GW_507_HU_LDWShakeLev_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_TSRSwitch_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_TSRSwitch_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_TSRSwitch == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_TSRSwitch_Pv, phyValue);
            chgEv_GW_507_HU_TSRSwitch = 1;
        }
        else
        {
            chgEv_GW_507_HU_TSRSwitch = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_TSRSwitch=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_TSRSwitch_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_TSRSwitch_SetVt)==0)
    {
        if(chgEv_GW_507_HU_TSRSwitch == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_TSRSwitch_Rv, rawValue);
            chgEv_GW_507_HU_TSRSwitch = 1;  
        }
        else
        {
            chgEv_GW_507_HU_TSRSwitch = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_TSRSwitch_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_TSRSwitch_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_TSRSwitch=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_TSRSwitch_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_TSRSwitch_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_TSRSwitch=getvalue(E_pubc_GW_GW_507_HU_TSRSwitch_Vt);
    }
    else
    {
        Msg_GW_507.HU_TSRSwitch=getValue(E_pubc_GW_GW_507_HU_TSRSwitch_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_OverspeedWarningEnable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Pv, phyValue);
            chgEv_GW_507_HU_OverspeedWarningEnable = 1;
        }
        else
        {
            chgEv_GW_507_HU_OverspeedWarningEnable = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_OverspeedWarningEnable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_SetVt)==0)
    {
        if(chgEv_GW_507_HU_OverspeedWarningEnable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv, rawValue);
            chgEv_GW_507_HU_OverspeedWarningEnable = 1;  
        }
        else
        {
            chgEv_GW_507_HU_OverspeedWarningEnable = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_OverspeedWarningEnable=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_OverspeedWarningEnable_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_OverspeedWarningEnable=getvalue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Vt);
    }
    else
    {
        Msg_GW_507.HU_OverspeedWarningEnable=getValue(E_pubc_GW_GW_507_HU_OverspeedWarningEnable_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_OverspeedSoundWarEnable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Pv, phyValue);
            chgEv_GW_507_HU_OverspeedSoundWarEnable = 1;
        }
        else
        {
            chgEv_GW_507_HU_OverspeedSoundWarEnable = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_OverspeedSoundWarEnable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_SetVt)==0)
    {
        if(chgEv_GW_507_HU_OverspeedSoundWarEnable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv, rawValue);
            chgEv_GW_507_HU_OverspeedSoundWarEnable = 1;  
        }
        else
        {
            chgEv_GW_507_HU_OverspeedSoundWarEnable = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_OverspeedSoundWarEnable=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_OverspeedSoundWarEnable=getvalue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Vt);
    }
    else
    {
        Msg_GW_507.HU_OverspeedSoundWarEnable=getValue(E_pubc_GW_GW_507_HU_OverspeedSoundWarEnable_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_HMAEnable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_HMAEnable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_HMAEnable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_HMAEnable_Pv, phyValue);
            chgEv_GW_507_HU_HMAEnable = 1;
        }
        else
        {
            chgEv_GW_507_HU_HMAEnable = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_HMAEnable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_HMAEnable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_HMAEnable_SetVt)==0)
    {
        if(chgEv_GW_507_HU_HMAEnable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_HMAEnable_Rv, rawValue);
            chgEv_GW_507_HU_HMAEnable = 1;  
        }
        else
        {
            chgEv_GW_507_HU_HMAEnable = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_HMAEnable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_HMAEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_HMAEnable=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_HMAEnable_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_HMAEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_HMAEnable=getvalue(E_pubc_GW_GW_507_HU_HMAEnable_Vt);
    }
    else
    {
        Msg_GW_507.HU_HMAEnable=getValue(E_pubc_GW_GW_507_HU_HMAEnable_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_IACCEnable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_IACCEnable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_IACCEnable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_IACCEnable_Pv, phyValue);
            chgEv_GW_507_HU_IACCEnable = 1;
        }
        else
        {
            chgEv_GW_507_HU_IACCEnable = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_IACCEnable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_IACCEnable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_IACCEnable_SetVt)==0)
    {
        if(chgEv_GW_507_HU_IACCEnable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_IACCEnable_Rv, rawValue);
            chgEv_GW_507_HU_IACCEnable = 1;  
        }
        else
        {
            chgEv_GW_507_HU_IACCEnable = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_IACCEnable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_IACCEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_IACCEnable=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_IACCEnable_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_IACCEnable_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_IACCEnable=getvalue(E_pubc_GW_GW_507_HU_IACCEnable_Vt);
    }
    else
    {
        Msg_GW_507.HU_IACCEnable=getValue(E_pubc_GW_GW_507_HU_IACCEnable_Rv);
    }
}
 
on envVar E_pubc_GW_GW_507_HU_FCWSetting_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_507_HU_FCWSetting_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_507_HU_FCWSetting == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_507_HU_FCWSetting_Pv, phyValue);
            chgEv_GW_507_HU_FCWSetting = 1;
        }
        else
        {
            chgEv_GW_507_HU_FCWSetting = 0;
        }    
        //update the signal value
        Msg_GW_507.HU_FCWSetting=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_507_HU_FCWSetting_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_507_HU_FCWSetting_SetVt)==0)
    {
        if(chgEv_GW_507_HU_FCWSetting == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_507_HU_FCWSetting_Rv, rawValue);
            chgEv_GW_507_HU_FCWSetting = 1;  
        }
        else
        {
            chgEv_GW_507_HU_FCWSetting = 0;
        }
    }
}

on envVar E_pubc_GW_GW_507_HU_FCWSetting_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_507_HU_FCWSetting_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_FCWSetting=getValue(this);
    }
}

on envVar E_pubc_GW_GW_507_HU_FCWSetting_SetVt
{
    if(getValue(E_pubc_GW_GW_507_HU_FCWSetting_SetVt))
    {
        //update the signal value
        Msg_GW_507.HU_FCWSetting=getvalue(E_pubc_GW_GW_507_HU_FCWSetting_Vt);
    }
    else
    {
        Msg_GW_507.HU_FCWSetting=getValue(E_pubc_GW_GW_507_HU_FCWSetting_Rv);
    }
}
 
on envVar E_pubc_GW_GW_298_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_298);        
    }
}

on envVar E_pubc_GW_GW_298_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_298_Dlc
{
    if(getValue(E_pubc_GW_GW_298_enDlc))
    {
        Msg_GW_298.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_298.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_298_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_298.dlc =getValue(E_pubc_GW_GW_298_Dlc);
    }
    else
    {
	   Msg_GW_298.dlc = 8;
			
    }
}


on envVar E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_298_BCM_LeftRearDoorStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Pv, phyValue);
            chgEv_GW_298_BCM_LeftRearDoorStatus = 1;
        }
        else
        {
            chgEv_GW_298_BCM_LeftRearDoorStatus = 0;
        }    
        //update the signal value
        Msg_GW_298.BCM_LeftRearDoorStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_SetVt)==0)
    {
        if(chgEv_GW_298_BCM_LeftRearDoorStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv, rawValue);
            chgEv_GW_298_BCM_LeftRearDoorStatus = 1;  
        }
        else
        {
            chgEv_GW_298_BCM_LeftRearDoorStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_SetVt))
    {
        //update the signal value
        Msg_GW_298.BCM_LeftRearDoorStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_SetVt))
    {
        //update the signal value
        Msg_GW_298.BCM_LeftRearDoorStatus=getvalue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Vt);
    }
    else
    {
        Msg_GW_298.BCM_LeftRearDoorStatus=getValue(E_pubc_GW_GW_298_BCM_LeftRearDoorStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_1A8_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_1A8_TCU_RollingCounter_1A8_wrongvalctr == 0)
        {
            update_GW_1A8_TCU_RollingCounter_1A8_counter();
            Msg_GW_1A8.TCU_RollingCounter_1A8= GW_1A8_TCU_RollingCounter_1A8_counter;
        }
        else if(GW_1A8_TCU_RollingCounter_1A8_wrongvalctr > 0)
        {
			GW_1A8_TCU_RollingCounter_1A8_counter=GW_1A8_TCU_RollingCounter_1A8_counter + GW_1A8_TCU_RollingCounter_1A8_wrongvalctr;
			 Msg_GW_1A8.TCU_RollingCounter_1A8= GW_1A8_TCU_RollingCounter_1A8_counter;
             /*GW_1A8_TCU_RollingCounter_1A8_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_1A8_TCU_RollingCounter_1A8_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_1A8_TCU_RollingCounter_1A8_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_1A8_CRC_CheckSum();

        output(Msg_GW_1A8);        
    }
}

on envVar E_pubc_GW_GW_1A8_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_ActualGear_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv, rawValue);
        rawValue= 15;
        putValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv, rawValue);
        rawValue= 15;
        putValue(E_pubc_GW_GW_1A8_TCU_ActualGear_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_1A8_TCU_ActualGear_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_1A8_Dlc
{
    if(getValue(E_pubc_GW_GW_1A8_enDlc))
    {
        Msg_GW_1A8.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_1A8.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_1A8_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_1A8.dlc =getValue(E_pubc_GW_GW_1A8_Dlc);
    }
    else
    {
	   Msg_GW_1A8.dlc = 8;
			
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_CRCCheck_1A8_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_1A8_TCU_CRCCheck_1A8_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_1A8_TCU_RollingCounter_1A8_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_1A8_TCU_RollingCounter_1A8_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_1A8_TCU_ShiftPostionValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Pv, phyValue);
            chgEv_GW_1A8_TCU_ShiftPostionValid = 1;
        }
        else
        {
            chgEv_GW_1A8_TCU_ShiftPostionValid = 0;
        }    
        //update the signal value
        Msg_GW_1A8.TCU_ShiftPostionValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_SetVt)==0)
    {
        if(chgEv_GW_1A8_TCU_ShiftPostionValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv, rawValue);
            chgEv_GW_1A8_TCU_ShiftPostionValid = 1;  
        }
        else
        {
            chgEv_GW_1A8_TCU_ShiftPostionValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_ShiftPostionValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_SetVt
{
    if(getValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_ShiftPostionValid=getvalue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Vt);
    }
    else
    {
        Msg_GW_1A8.TCU_ShiftPostionValid=getValue(E_pubc_GW_GW_1A8_TCU_ShiftPostionValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_1A8_TCU_GearShiftPosition == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Pv, phyValue);
            chgEv_GW_1A8_TCU_GearShiftPosition = 1;
        }
        else
        {
            chgEv_GW_1A8_TCU_GearShiftPosition = 0;
        }    
        //update the signal value
        Msg_GW_1A8.TCU_GearShiftPosition=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_SetVt)==0)
    {
        if(chgEv_GW_1A8_TCU_GearShiftPosition == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv, rawValue);
            chgEv_GW_1A8_TCU_GearShiftPosition = 1;  
        }
        else
        {
            chgEv_GW_1A8_TCU_GearShiftPosition = 0;
        }
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_GearShiftPosition=getValue(this);
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_GearShiftPosition_SetVt
{
    if(getValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_GearShiftPosition=getvalue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Vt);
    }
    else
    {
        Msg_GW_1A8.TCU_GearShiftPosition=getValue(E_pubc_GW_GW_1A8_TCU_GearShiftPosition_Rv);
    }
}
 
on envVar E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_1A8_TCU_ActualGearValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Pv, phyValue);
            chgEv_GW_1A8_TCU_ActualGearValid = 1;
        }
        else
        {
            chgEv_GW_1A8_TCU_ActualGearValid = 0;
        }    
        //update the signal value
        Msg_GW_1A8.TCU_ActualGearValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_1A8_TCU_ActualGearValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_SetVt)==0)
    {
        if(chgEv_GW_1A8_TCU_ActualGearValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv, rawValue);
            chgEv_GW_1A8_TCU_ActualGearValid = 1;  
        }
        else
        {
            chgEv_GW_1A8_TCU_ActualGearValid = 0;
        }
    }
}


on envVar E_pubc_GW_GW_1A8_TCU_ActualGearValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_ActualGearValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_ActualGearValid_SetVt
{
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_ActualGearValid=getvalue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Vt);
    }
    else
    {
        Msg_GW_1A8.TCU_ActualGearValid=getValue(E_pubc_GW_GW_1A8_TCU_ActualGearValid_Rv);
    }
}


 
on envVar E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_1A8_TCU_FastOnMode == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Pv, phyValue);
            chgEv_GW_1A8_TCU_FastOnMode = 1;
        }
        else
        {
            chgEv_GW_1A8_TCU_FastOnMode = 0;
        }    
        //update the signal value
        Msg_GW_1A8.TCU_FastOnMode=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_1A8_TCU_FastOnMode_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_SetVt)==0)
    {
        if(chgEv_GW_1A8_TCU_FastOnMode == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv, rawValue);
            chgEv_GW_1A8_TCU_FastOnMode = 1;  
        }
        else
        {
            chgEv_GW_1A8_TCU_FastOnMode = 0;
        }
    }
}


on envVar E_pubc_GW_GW_1A8_TCU_FastOnMode_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_FastOnMode=getValue(this);
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_FastOnMode_SetVt
{
    if(getValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_FastOnMode=getvalue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Vt);
    }
    else
    {
        Msg_GW_1A8.TCU_FastOnMode=getValue(E_pubc_GW_GW_1A8_TCU_FastOnMode_Rv);
    }
}


 
on envVar E_pubc_GW_GW_1A8_TCU_ActualGear_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGear_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_1A8_TCU_ActualGear == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_1A8_TCU_ActualGear_Pv, phyValue);
            chgEv_GW_1A8_TCU_ActualGear = 1;
        }
        else
        {
            chgEv_GW_1A8_TCU_ActualGear = 0;
        }    
        //update the signal value
        Msg_GW_1A8.TCU_ActualGear=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_1A8_TCU_ActualGear_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGear_SetVt)==0)
    {
        if(chgEv_GW_1A8_TCU_ActualGear == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_1A8_TCU_ActualGear_Rv, rawValue);
            chgEv_GW_1A8_TCU_ActualGear = 1;  
        }
        else
        {
            chgEv_GW_1A8_TCU_ActualGear = 0;
        }
    }
}


on envVar E_pubc_GW_GW_1A8_TCU_ActualGear_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGear_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_ActualGear=getValue(this);
    }
}

on envVar E_pubc_GW_GW_1A8_TCU_ActualGear_SetVt
{
    if(getValue(E_pubc_GW_GW_1A8_TCU_ActualGear_SetVt))
    {
        //update the signal value
        Msg_GW_1A8.TCU_ActualGear=getvalue(E_pubc_GW_GW_1A8_TCU_ActualGear_Vt);
    }
    else
    {
        Msg_GW_1A8.TCU_ActualGear=getValue(E_pubc_GW_GW_1A8_TCU_ActualGear_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3E7_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_3E7);        
    }
}

on envVar E_pubc_GW_GW_3E7_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E7_BCM_T_BATT_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv, rawValue);
        rawValue= 145;
        putValue(E_pubc_GW_GW_3E7_BCM_T_BATT_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E7_BCM_T_BATT_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3E7_Dlc
{
    if(getValue(E_pubc_GW_GW_3E7_enDlc))
    {
        Msg_GW_3E7.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_3E7.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_3E7_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3E7.dlc =getValue(E_pubc_GW_GW_3E7_Dlc);
    }
    else
    {
	   Msg_GW_3E7.dlc = 8;
			
    }
}


on envVar E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3E7_BCM_Status_Temp == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Pv, phyValue);
            chgEv_GW_3E7_BCM_Status_Temp = 1;
        }
        else
        {
            chgEv_GW_3E7_BCM_Status_Temp = 0;
        }    
        //update the signal value
        Msg_GW_3E7.BCM_Status_Temp=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3E7_BCM_Status_Temp_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_SetVt)==0)
    {
        if(chgEv_GW_3E7_BCM_Status_Temp == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv, rawValue);
            chgEv_GW_3E7_BCM_Status_Temp = 1;  
        }
        else
        {
            chgEv_GW_3E7_BCM_Status_Temp = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3E7_BCM_Status_Temp_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_SetVt))
    {
        //update the signal value
        Msg_GW_3E7.BCM_Status_Temp=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3E7_BCM_Status_Temp_SetVt
{
    if(getValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_SetVt))
    {
        //update the signal value
        Msg_GW_3E7.BCM_Status_Temp=getvalue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Vt);
    }
    else
    {
        Msg_GW_3E7.BCM_Status_Temp=getValue(E_pubc_GW_GW_3E7_BCM_Status_Temp_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3E7_BCM_T_BATT_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3E7_BCM_T_BATT_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3E7_BCM_T_BATT == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(-40));
            putValue(E_pubc_GW_GW_3E7_BCM_T_BATT_Pv, phyValue);
            chgEv_GW_3E7_BCM_T_BATT = 1;
        }
        else
        {
            chgEv_GW_3E7_BCM_T_BATT = 0;
        }    
        //update the signal value
        Msg_GW_3E7.BCM_T_BATT=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3E7_BCM_T_BATT_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3E7_BCM_T_BATT_SetVt)==0)
    {
        if(chgEv_GW_3E7_BCM_T_BATT == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-40))/1);
            putValue(E_pubc_GW_GW_3E7_BCM_T_BATT_Rv, rawValue);
            chgEv_GW_3E7_BCM_T_BATT = 1;  
        }
        else
        {
            chgEv_GW_3E7_BCM_T_BATT = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3E7_BCM_T_BATT_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3E7_BCM_T_BATT_SetVt))
    {
        //update the signal value
        Msg_GW_3E7.BCM_T_BATT=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3E7_BCM_T_BATT_SetVt
{
    if(getValue(E_pubc_GW_GW_3E7_BCM_T_BATT_SetVt))
    {
        //update the signal value
        Msg_GW_3E7.BCM_T_BATT=getvalue(E_pubc_GW_GW_3E7_BCM_T_BATT_Vt);
    }
    else
    {
        Msg_GW_3E7.BCM_T_BATT=getValue(E_pubc_GW_GW_3E7_BCM_T_BATT_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(EPBi_20B_ESP_RollingCounter_258_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_258_counter();
            Msg_EPBi_20B.ESP_RollingCounter_258= EPBi_20B_ESP_RollingCounter_258_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_258_wrongvalctr > 0)
        {
			EPBi_20B_ESP_RollingCounter_258_counter=EPBi_20B_ESP_RollingCounter_258_counter + EPBi_20B_ESP_RollingCounter_258_wrongvalctr;
			 Msg_EPBi_20B.ESP_RollingCounter_258= EPBi_20B_ESP_RollingCounter_258_counter;
             /*EPBi_20B_ESP_RollingCounter_258_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_258_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_258_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(EPBi_20B_ESP_RollingCounter_277_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_277_counter();
            Msg_EPBi_20B.ESP_RollingCounter_277= EPBi_20B_ESP_RollingCounter_277_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_277_wrongvalctr > 0)
        {
			EPBi_20B_ESP_RollingCounter_277_counter=EPBi_20B_ESP_RollingCounter_277_counter + EPBi_20B_ESP_RollingCounter_277_wrongvalctr;
			 Msg_EPBi_20B.ESP_RollingCounter_277= EPBi_20B_ESP_RollingCounter_277_counter;
             /*EPBi_20B_ESP_RollingCounter_277_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_277_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_277_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(EPBi_20B_ESP_RollingCounter_206_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_206_counter();
            Msg_EPBi_20B.ESP_RollingCounter_206= EPBi_20B_ESP_RollingCounter_206_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_206_wrongvalctr > 0)
        {
			EPBi_20B_ESP_RollingCounter_206_counter=EPBi_20B_ESP_RollingCounter_206_counter + EPBi_20B_ESP_RollingCounter_206_wrongvalctr;
			 Msg_EPBi_20B.ESP_RollingCounter_206= EPBi_20B_ESP_RollingCounter_206_counter;
             /*EPBi_20B_ESP_RollingCounter_206_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_206_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_206_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //update the BZ Signal
        if(EPBi_20B_ESP_RollingCounter_208_wrongvalctr == 0)
        {
            update_EPBi_20B_ESP_RollingCounter_208_counter();
            Msg_EPBi_20B.ESP_RollingCounter_208= EPBi_20B_ESP_RollingCounter_208_counter;
        }
        else if(EPBi_20B_ESP_RollingCounter_208_wrongvalctr > 0)
        {
			EPBi_20B_ESP_RollingCounter_208_counter=EPBi_20B_ESP_RollingCounter_208_counter + EPBi_20B_ESP_RollingCounter_208_wrongvalctr;
			 Msg_EPBi_20B.ESP_RollingCounter_208= EPBi_20B_ESP_RollingCounter_208_counter;
             /*EPBi_20B_ESP_RollingCounter_208_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_RollingCounter_208_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_RollingCounter_208_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_EPBi_20B_CRC_CheckSum();

        output(Msg_EPBi_20B);        
    }
}

on envVar E_pubc_GW_EPBi_20B_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv, rawValue);
        rawValue= 6400;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv, rawValue);
        rawValue= 6400;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv, rawValue);
        rawValue= 254;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv, rawValue);
        rawValue= 6400;
        putValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv, rawValue);
        rawValue= 6400;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Rv, rawValue);
        rawValue= 254;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv, rawValue);
        rawValue= 6400;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv, rawValue);
        rawValue= 2500;
        putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_EPBi_20B_Dlc
{
    if(getValue(E_pubc_GW_EPBi_20B_enDlc))
    {
        Msg_EPBi_20B.dlc =getValue(this);
    }
    else
    {   
	   Msg_EPBi_20B.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_EPBi_20B_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_EPBi_20B.dlc =getValue(E_pubc_GW_EPBi_20B_Dlc);
    }
    else
    {
	   Msg_EPBi_20B.dlc = 64;
			
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_CRCCheck_206_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_CRCCheck_206_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_CRCCheck_208_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_CRCCheck_208_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_CRCCheck_258_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_CRCCheck_258_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_CRCCheck_277_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_CRCCheck_277_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_RollingCounter_206_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_RollingCounter_206_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_RollingCounter_208_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_RollingCounter_208_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_RollingCounter_258_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_RollingCounter_258_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_EPBi_20B_ESP_RollingCounter_277_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    EPBi_20B_ESP_RollingCounter_277_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_AWBactive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_AWBactive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_AWBactive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_AWBactive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBactive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_AWBactive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_AWBactive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_AWBactive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBactive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AWBactive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBactive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AWBactive=getvalue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_AWBactive=getValue(E_pubc_GW_EPBi_20B_ESP_AWBactive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_AWBavailable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Pv, phyValue);
            chgEv_EPBi_20B_ESP_AWBavailable = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_AWBavailable = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_AWBavailable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBavailable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_AWBavailable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv, rawValue);
            chgEv_EPBi_20B_ESP_AWBavailable = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_AWBavailable = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBavailable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AWBavailable=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AWBavailable_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AWBavailable=getvalue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_AWBavailable=getValue(E_pubc_GW_EPBi_20B_ESP_AWBavailable_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_PrefillActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_PrefillActive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_PrefillActive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_PrefillActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_PrefillActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_PrefillActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_PrefillActive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_PrefillActive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_PrefillActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_PrefillActive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_PrefillActive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_PrefillActive=getvalue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_PrefillActive=getValue(E_pubc_GW_EPBi_20B_ESP_PrefillActive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05625)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05625);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Data = 0;
        }
    }
}


 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Direction == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Direction = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Direction = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Direction=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Direction == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Direction = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Direction = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Direction=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Direction=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_RL_Direction=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Direction_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Valid_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FR_Valid_Data = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Valid_Data=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Valid_Data=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_FR_Valid_Data=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Valid_Data_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Valid_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Valid_Data = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Valid_Data=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Valid_Data=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_RL_Valid_Data=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Valid_Data_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_PrefillAvailable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Pv, phyValue);
            chgEv_EPBi_20B_ESP_PrefillAvailable = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_PrefillAvailable = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_PrefillAvailable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_PrefillAvailable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv, rawValue);
            chgEv_EPBi_20B_ESP_PrefillAvailable = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_PrefillAvailable = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_PrefillAvailable=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_PrefillAvailable=getvalue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_PrefillAvailable=getValue(E_pubc_GW_EPBi_20B_ESP_PrefillAvailable_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_FR_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05625)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_FR_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FR_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_Wheel_Speed_FR_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05625);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_FR_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FR_Data = 0;
        }
    }
}


 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Valid_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FL_Valid_Data = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Valid_Data=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Valid_Data=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_FL_Valid_Data=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Valid_Data_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_TCSActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_TCSActive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_TCSActive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_TCSActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_TCSActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_TCSActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_TCSActive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_TCSActive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_TCSActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_TCSActive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_TCSActive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_TCSActive=getvalue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_TCSActive=getValue(E_pubc_GW_EPBi_20B_ESP_TCSActive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_AEBdecActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_AEBdecActive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_AEBdecActive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_AEBdecActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_AEBdecActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_AEBdecActive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_AEBdecActive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AEBdecActive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AEBdecActive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AEBdecActive=getvalue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_AEBdecActive=getValue(E_pubc_GW_EPBi_20B_ESP_AEBdecActive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Direction == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Direction = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Direction = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Direction=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Direction == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Direction = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Direction = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Direction=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Direction=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_RR_Direction=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Direction_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Pulse == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Pulse = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Pulse = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RL_Pulse=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RL_Pulse == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RL_Pulse_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RL_Pulse = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RL_Pulse = 0;
        }
    }
}


 
on envVar E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_ABAavailable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Pv, phyValue);
            chgEv_EPBi_20B_ESP_ABAavailable = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_ABAavailable = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_ABAavailable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_ABAavailable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_ABAavailable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv, rawValue);
            chgEv_EPBi_20B_ESP_ABAavailable = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_ABAavailable = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_ABAavailable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_ABAavailable=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_ABAavailable_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_ABAavailable=getvalue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_ABAavailable=getValue(E_pubc_GW_EPBi_20B_ESP_ABAavailable_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05625)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Pv, phyValue);
            chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_Vehicle_Speed_Reference=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05625);
            putValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv, rawValue);
            chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_Vehicle_Speed_Reference = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_Vehicle_Speed_Reference=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_Vehicle_Speed_Reference=getvalue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_Vehicle_Speed_Reference=getValue(E_pubc_GW_EPBi_20B_ESP_Vehicle_Speed_Reference_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_FL_Direction == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_FL_Direction = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FL_Direction = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Direction=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_FL_Direction == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_FL_Direction = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FL_Direction = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Direction=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Direction=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_FL_Direction=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Direction_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_ABAactive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_ABAactive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_ABAactive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_ABAactive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_ABAactive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_ABAactive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_ABAactive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_ABAactive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_ABAactive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_ABAactive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_ABAactive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_ABAactive=getvalue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_ABAactive=getValue(E_pubc_GW_EPBi_20B_ESP_ABAactive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_AEBAvailable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Pv, phyValue);
            chgEv_EPBi_20B_ESP_AEBAvailable = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_AEBAvailable = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_AEBAvailable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_AEBAvailable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv, rawValue);
            chgEv_EPBi_20B_ESP_AEBAvailable = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_AEBAvailable = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AEBAvailable=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_AEBAvailable_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_AEBAvailable=getvalue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_AEBAvailable=getValue(E_pubc_GW_EPBi_20B_ESP_AEBAvailable_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Valid_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Valid_Data = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Valid_Data=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Valid_Data=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_RR_Valid_Data=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Valid_Data_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_FR_Direction == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_FR_Direction = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FR_Direction = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Direction=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_SetVt)==0)
    {
        if(chgEv_EPBi_20B_Wheel_Speed_FR_Direction == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_FR_Direction = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FR_Direction = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Direction=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FR_Direction=getvalue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Vt);
    }
    else
    {
        Msg_EPBi_20B.Wheel_Speed_FR_Direction=getValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FR_Direction_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_VDCActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_VDCActive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_VDCActive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_VDCActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_VDCActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_VDCActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_VDCActive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_VDCActive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_VDCActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_VDCActive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_VDCActive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_VDCActive=getvalue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_VDCActive=getValue(E_pubc_GW_EPBi_20B_ESP_VDCActive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_FL_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05625)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_FL_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FL_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_FL_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_Wheel_Speed_FL_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05625);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_FL_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_FL_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_FL_Data = 0;
        }
    }
}


 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Pulse == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Pulse = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Pulse = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Pulse=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Pulse == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Pulse_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Pulse = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Pulse = 0;
        }
    }
}


 
on envVar E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_MasCylBrakePressureValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Pv, phyValue);
            chgEv_EPBi_20B_ESP_MasCylBrakePressureValid = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_MasCylBrakePressureValid = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_MasCylBrakePressureValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_MasCylBrakePressureValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv, rawValue);
            chgEv_EPBi_20B_ESP_MasCylBrakePressureValid = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_MasCylBrakePressureValid = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_MasCylBrakePressureValid=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_MasCylBrakePressureValid=getvalue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_MasCylBrakePressureValid=getValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressureValid_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_BrakeForce == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Pv, phyValue);
            chgEv_EPBi_20B_ESP_BrakeForce = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_BrakeForce = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_BrakeForce=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_BrakeForce_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_BrakeForce == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv, rawValue);
            chgEv_EPBi_20B_ESP_BrakeForce = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_BrakeForce = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_BrakeForce_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_BrakeForce=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_BrakeForce_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_BrakeForce=getvalue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_BrakeForce=getValue(E_pubc_GW_EPBi_20B_ESP_BrakeForce_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Data == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05625)+(0));
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Pv, phyValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Data = 1;
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Data = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.Wheel_Speed_RR_Data=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_Wheel_Speed_RR_Data == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05625);
            putValue(E_pubc_GW_EPBi_20B_Wheel_Speed_RR_Data_Rv, rawValue);
            chgEv_EPBi_20B_Wheel_Speed_RR_Data = 1;  
        }
        else
        {
            chgEv_EPBi_20B_Wheel_Speed_RR_Data = 0;
        }
    }
}


 
on envVar E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_OnlyABSActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Pv, phyValue);
            chgEv_EPBi_20B_ESP_OnlyABSActive = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_OnlyABSActive = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_OnlyABSActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_OnlyABSActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv, rawValue);
            chgEv_EPBi_20B_ESP_OnlyABSActive = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_OnlyABSActive = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_OnlyABSActive=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_OnlyABSActive=getvalue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_OnlyABSActive=getValue(E_pubc_GW_EPBi_20B_ESP_OnlyABSActive_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_VehicleStandstill == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Pv, phyValue);
            chgEv_EPBi_20B_ESP_VehicleStandstill = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_VehicleStandstill = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_VehicleStandstill=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_SetVt)==0)
    {
        if(chgEv_EPBi_20B_ESP_VehicleStandstill == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv, rawValue);
            chgEv_EPBi_20B_ESP_VehicleStandstill = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_VehicleStandstill = 0;
        }
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_VehicleStandstill=getValue(this);
    }
}

on envVar E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_SetVt
{
    if(getValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_SetVt))
    {
        //update the signal value
        Msg_EPBi_20B.ESP_VehicleStandstill=getvalue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Vt);
    }
    else
    {
        Msg_EPBi_20B.ESP_VehicleStandstill=getValue(E_pubc_GW_EPBi_20B_ESP_VehicleStandstill_Rv);
    }
}
 
on envVar E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_EPBi_20B_ESP_MasCylBrakePressure == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.1)+(0));
            putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Pv, phyValue);
            chgEv_EPBi_20B_ESP_MasCylBrakePressure = 1;
        }
        else
        {
            chgEv_EPBi_20B_ESP_MasCylBrakePressure = 0;
        }    
        //update the signal value
        Msg_EPBi_20B.ESP_MasCylBrakePressure=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_EPBi_20B_ESP_MasCylBrakePressure == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.1);
            putValue(E_pubc_GW_EPBi_20B_ESP_MasCylBrakePressure_Rv, rawValue);
            chgEv_EPBi_20B_ESP_MasCylBrakePressure = 1;  
        }
        else
        {
            chgEv_EPBi_20B_ESP_MasCylBrakePressure = 0;
        }
    }
}


 
on envVar E_pubc_GW_ADC_2A4_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr == 0)
        {
            update_ADC_2A4_LCDAR_RollingCounter_2AF_counter();
            Msg_ADC_2A4.LCDAR_RollingCounter_2AF= ADC_2A4_LCDAR_RollingCounter_2AF_counter;
        }
        else if(ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr > 0)
        {
			ADC_2A4_LCDAR_RollingCounter_2AF_counter=ADC_2A4_LCDAR_RollingCounter_2AF_counter + ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr;
			 Msg_ADC_2A4.LCDAR_RollingCounter_2AF= ADC_2A4_LCDAR_RollingCounter_2AF_counter;
             /*ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_ADC_2A4_CRC_CheckSum();

        output(Msg_ADC_2A4);        
    }
}

on envVar E_pubc_GW_ADC_2A4_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_ADC_2A4_Dlc
{
    if(getValue(E_pubc_GW_ADC_2A4_enDlc))
    {
        Msg_ADC_2A4.dlc =getValue(this);
    }
    else
    {   
	   Msg_ADC_2A4.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_ADC_2A4_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_ADC_2A4.dlc =getValue(E_pubc_GW_ADC_2A4_Dlc);
    }
    else
    {
	   Msg_ADC_2A4.dlc = 64;
			
    }
}


on envVar E_pubc_GW_ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    ADC_2A4_LCDAR_RollingCounter_2AF_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ADC_2A4_LCDAR_ELK_oAlert == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Pv, phyValue);
            chgEv_ADC_2A4_LCDAR_ELK_oAlert = 1;
        }
        else
        {
            chgEv_ADC_2A4_LCDAR_ELK_oAlert = 0;
        }    
        //update the signal value
        Msg_ADC_2A4.LCDAR_ELK_oAlert=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_SetVt)==0)
    {
        if(chgEv_ADC_2A4_LCDAR_ELK_oAlert == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv, rawValue);
            chgEv_ADC_2A4_LCDAR_ELK_oAlert = 1;  
        }
        else
        {
            chgEv_ADC_2A4_LCDAR_ELK_oAlert = 0;
        }
    }
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_SetVt))
    {
        //update the signal value
        Msg_ADC_2A4.LCDAR_ELK_oAlert=getValue(this);
    }
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_SetVt
{
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_SetVt))
    {
        //update the signal value
        Msg_ADC_2A4.LCDAR_ELK_oAlert=getvalue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Vt);
    }
    else
    {
        Msg_ADC_2A4.LCDAR_ELK_oAlert=getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oAlert_Rv);
    }
}
 
on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ADC_2A4_LCDAR_ELK_oStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Pv, phyValue);
            chgEv_ADC_2A4_LCDAR_ELK_oStatus = 1;
        }
        else
        {
            chgEv_ADC_2A4_LCDAR_ELK_oStatus = 0;
        }    
        //update the signal value
        Msg_ADC_2A4.LCDAR_ELK_oStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_SetVt)==0)
    {
        if(chgEv_ADC_2A4_LCDAR_ELK_oStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv, rawValue);
            chgEv_ADC_2A4_LCDAR_ELK_oStatus = 1;  
        }
        else
        {
            chgEv_ADC_2A4_LCDAR_ELK_oStatus = 0;
        }
    }
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_SetVt))
    {
        //update the signal value
        Msg_ADC_2A4.LCDAR_ELK_oStatus=getValue(this);
    }
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_SetVt
{
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_SetVt))
    {
        //update the signal value
        Msg_ADC_2A4.LCDAR_ELK_oStatus=getvalue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Vt);
    }
    else
    {
        Msg_ADC_2A4.LCDAR_ELK_oStatus=getValue(E_pubc_GW_ADC_2A4_LCDAR_ELK_oStatus_Rv);
    }
}
 
on envVar E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Pv, phyValue);
            chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert = 1;
        }
        else
        {
            chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert = 0;
        }    
        //update the signal value
        Msg_ADC_2A4.LCDAR_Left_ELK_oAlert=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_SetVt)==0)
    {
        if(chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv, rawValue);
            chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert = 1;  
        }
        else
        {
            chgEv_ADC_2A4_LCDAR_Left_ELK_oAlert = 0;
        }
    }
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_SetVt))
    {
        //update the signal value
        Msg_ADC_2A4.LCDAR_Left_ELK_oAlert=getValue(this);
    }
}

on envVar E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_SetVt
{
    if(getValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_SetVt))
    {
        //update the signal value
        Msg_ADC_2A4.LCDAR_Left_ELK_oAlert=getvalue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Vt);
    }
    else
    {
        Msg_ADC_2A4.LCDAR_Left_ELK_oAlert=getValue(E_pubc_GW_ADC_2A4_LCDAR_Left_ELK_oAlert_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_3AF_HU_RollingCounter_3AF_wrongvalctr == 0)
        {
            update_GW_3AF_HU_RollingCounter_3AF_counter();
            Msg_GW_3AF.HU_RollingCounter_3AF= GW_3AF_HU_RollingCounter_3AF_counter;
        }
        else if(GW_3AF_HU_RollingCounter_3AF_wrongvalctr > 0)
        {
			GW_3AF_HU_RollingCounter_3AF_counter=GW_3AF_HU_RollingCounter_3AF_counter + GW_3AF_HU_RollingCounter_3AF_wrongvalctr;
			 Msg_GW_3AF.HU_RollingCounter_3AF= GW_3AF_HU_RollingCounter_3AF_counter;
             /* GW_3AF_HU_RollingCounter_3AF_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3AF_HU_RollingCounter_3AF_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3AF_HU_RollingCounter_3AF_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_3AF_CRC_CheckSum();

        output(Msg_GW_3AF);        
    }
}

on envVar E_pubc_GW_GW_3AF_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavCountryCode_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_CurveDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_RampDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_RampInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_3AF_HU_NavStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv, rawValue);
        rawValue= 255;
        putValue(E_pubc_GW_GW_3AF_HU_NavCountryCode_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv, rawValue);
        rawValue= 255;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv, rawValue);
        rawValue= 60;
        putValue(E_pubc_GW_GW_3AF_HU_CurveDistance_Rv, rawValue);
        rawValue= 300;
        putValue(E_pubc_GW_GW_3AF_HU_RampDistance_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3AF_HU_RampInfo_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavCountryCode_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_CurveDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_RampDistance_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_RampInfo_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3AF_Dlc
{
    if(getValue(E_pubc_GW_GW_3AF_enDlc))
    {
        Msg_GW_3AF.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_3AF.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_GW_3AF_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3AF.dlc =getValue(E_pubc_GW_GW_3AF_Dlc);
    }
    else
    {
	   Msg_GW_3AF.dlc = 64;
			
    }
}

on envVar E_pubc_GW_GW_3AF_HU_CRCCheck_3AF_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3AF_HU_CRCCheck_3AF_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_3AF_HU_RollingCounter_3AF_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_3AF_HU_RollingCounter_3AF_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_3AF_HU_NavStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_NavStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavStatus_Pv, phyValue);
            chgEv_GW_3AF_HU_NavStatus = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavStatus = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_NavStatus_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_NavStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavStatus_Rv, rawValue);
            chgEv_GW_3AF_HU_NavStatus = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_NavStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_NavStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavStatus=getvalue(E_pubc_GW_GW_3AF_HU_NavStatus_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_NavStatus=getValue(E_pubc_GW_GW_3AF_HU_NavStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_EnterCurveInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Pv, phyValue);
            chgEv_GW_3AF_HU_EnterCurveInfo = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_EnterCurveInfo = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_EnterCurveInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_EnterCurveInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv, rawValue);
            chgEv_GW_3AF_HU_EnterCurveInfo = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_EnterCurveInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_EnterCurveInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_EnterCurveInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_EnterCurveInfo=getvalue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_EnterCurveInfo=getValue(E_pubc_GW_GW_3AF_HU_EnterCurveInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavSpeedLimitType == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Pv, phyValue);
            chgEv_GW_3AF_HU_NavSpeedLimitType = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimitType = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitType=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_NavSpeedLimitType == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv, rawValue);
            chgEv_GW_3AF_HU_NavSpeedLimitType = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimitType = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitType=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitType=getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_NavSpeedLimitType=getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitType_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_NavCountryCode_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavCountryCode == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavCountryCode_Pv, phyValue);
            chgEv_GW_3AF_HU_NavCountryCode = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavCountryCode = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavCountryCode=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavCountryCode_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_3AF_HU_NavCountryCode == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavCountryCode_Rv, rawValue);
            chgEv_GW_3AF_HU_NavCountryCode = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavCountryCode = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavSpeedLimitUnits == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Pv, phyValue);
            chgEv_GW_3AF_HU_NavSpeedLimitUnits = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimitUnits = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitUnits=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_NavSpeedLimitUnits == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv, rawValue);
            chgEv_GW_3AF_HU_NavSpeedLimitUnits = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimitUnits = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitUnits=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitUnits=getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_NavSpeedLimitUnits=getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitUnits_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavSpeedLimit == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Pv, phyValue);
            chgEv_GW_3AF_HU_NavSpeedLimit = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimit = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimit=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_NavSpeedLimit == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv, rawValue);
            chgEv_GW_3AF_HU_NavSpeedLimit = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimit = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimit=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimit_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimit=getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_NavSpeedLimit=getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimit_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavCurrentRoadType == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Pv, phyValue);
            chgEv_GW_3AF_HU_NavCurrentRoadType = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavCurrentRoadType = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavCurrentRoadType=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_NavCurrentRoadType == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv, rawValue);
            chgEv_GW_3AF_HU_NavCurrentRoadType = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavCurrentRoadType = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavCurrentRoadType=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavCurrentRoadType=getvalue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_NavCurrentRoadType=getValue(E_pubc_GW_GW_3AF_HU_NavCurrentRoadType_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_CurveDistance_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_CurveDistance_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_CurveDistance == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_CurveDistance_Pv, phyValue);
            chgEv_GW_3AF_HU_CurveDistance = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_CurveDistance = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_CurveDistance=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_CurveDistance_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_CurveDistance_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_CurveDistance == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3AF_HU_CurveDistance_Rv, rawValue);
            chgEv_GW_3AF_HU_CurveDistance = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_CurveDistance = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_CurveDistance_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_CurveDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_CurveDistance=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_CurveDistance_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_CurveDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_CurveDistance=getvalue(E_pubc_GW_GW_3AF_HU_CurveDistance_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_CurveDistance=getValue(E_pubc_GW_GW_3AF_HU_CurveDistance_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_RampDistance_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_RampDistance_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_RampDistance == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *10)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_RampDistance_Pv, phyValue);
            chgEv_GW_3AF_HU_RampDistance = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_RampDistance = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_RampDistance=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_RampDistance_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_RampDistance_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_RampDistance == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/10);
            putValue(E_pubc_GW_GW_3AF_HU_RampDistance_Rv, rawValue);
            chgEv_GW_3AF_HU_RampDistance = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_RampDistance = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_RampDistance_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_RampDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_RampDistance=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_RampDistance_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_RampDistance_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_RampDistance=getvalue(E_pubc_GW_GW_3AF_HU_RampDistance_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_RampDistance=getValue(E_pubc_GW_GW_3AF_HU_RampDistance_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_NavSpeedLimitStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Pv, phyValue);
            chgEv_GW_3AF_HU_NavSpeedLimitStatus = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimitStatus = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_NavSpeedLimitStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv, rawValue);
            chgEv_GW_3AF_HU_NavSpeedLimitStatus = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_NavSpeedLimitStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_NavSpeedLimitStatus=getvalue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_NavSpeedLimitStatus=getValue(E_pubc_GW_GW_3AF_HU_NavSpeedLimitStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_RampInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_RampInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_RampInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_RampInfo_Pv, phyValue);
            chgEv_GW_3AF_HU_RampInfo = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_RampInfo = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_RampInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_RampInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_RampInfo_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_RampInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_RampInfo_Rv, rawValue);
            chgEv_GW_3AF_HU_RampInfo = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_RampInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_RampInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_RampInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_RampInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_RampInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_RampInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_RampInfo=getvalue(E_pubc_GW_GW_3AF_HU_RampInfo_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_RampInfo=getValue(E_pubc_GW_GW_3AF_HU_RampInfo_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3AF_HU_EnterRampInfo == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Pv, phyValue);
            chgEv_GW_3AF_HU_EnterRampInfo = 1;
        }
        else
        {
            chgEv_GW_3AF_HU_EnterRampInfo = 0;
        }    
        //update the signal value
        Msg_GW_3AF.HU_EnterRampInfo=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3AF_HU_EnterRampInfo_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_SetVt)==0)
    {
        if(chgEv_GW_3AF_HU_EnterRampInfo == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv, rawValue);
            chgEv_GW_3AF_HU_EnterRampInfo = 1;  
        }
        else
        {
            chgEv_GW_3AF_HU_EnterRampInfo = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3AF_HU_EnterRampInfo_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_EnterRampInfo=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3AF_HU_EnterRampInfo_SetVt
{
    if(getValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_SetVt))
    {
        //update the signal value
        Msg_GW_3AF.HU_EnterRampInfo=getvalue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Vt);
    }
    else
    {
        Msg_GW_3AF.HU_EnterRampInfo=getValue(E_pubc_GW_GW_3AF_HU_EnterRampInfo_Rv);
    }
}
 
 on envVar E_pubc_GW_GW_2E2_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_2E2_RLR_RollingCounter_2E2_wrongvalctr == 0)
        {
            update_GW_2E2_RLR_RollingCounter_2E2_counter();
            Msg_GW_2E2.RLR_RollingCounter_2E2= GW_2E2_RLR_RollingCounter_2E2_counter;
        }
        else if(GW_2E2_RLR_RollingCounter_2E2_wrongvalctr > 0)
        {
			GW_2E2_RLR_RollingCounter_2E2_counter=GW_2E2_RLR_RollingCounter_2E2_counter + GW_2E2_RLR_RollingCounter_2E2_wrongvalctr;
			 Msg_GW_2E2.RLR_RollingCounter_2E2= GW_2E2_RLR_RollingCounter_2E2_counter;
             /*GW_2E2_RLR_RollingCounter_2E2_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_2E2_RLR_RollingCounter_2E2_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_2E2_RLR_RollingCounter_2E2_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_2E2_CRC_CheckSum();

        output(Msg_GW_2E2);        
    }
}

on envVar E_pubc_GW_GW_2E2_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv, rawValue);
        break;
     case(1) :
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv, rawValue);
        rawValue= 4095;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv, rawValue);
        rawValue= 1200;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv, rawValue);
        rawValue= 4095;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv, rawValue);
        rawValue= 127;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv, rawValue);
        rawValue= 127;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv, rawValue);
        rawValue= 628;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv, rawValue);
        rawValue= 628;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv, rawValue);
        rawValue= 1200;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv, rawValue);
        rawValue= 510;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv, rawValue);
      break;
   }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_Dlc:*/
on envVar E_pubc_GW_GW_2E2_Dlc
{
    if(getValue(E_pubc_GW_GW_2E2_enDlc))
    {
        Msg_GW_2E2.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_2E2.dlc = 64;
	   	
  }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_enDlc:*/
on envVar E_pubc_GW_GW_2E2_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_2E2.dlc =getValue(E_pubc_GW_GW_2E2_Dlc);
    }
    else
    {
	   Msg_GW_2E2.dlc = 64;
			
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_CRCCheck_2E2_wrongvalctr:*/
on envVar E_pubc_GW_GW_2E2_RLR_CRCCheck_2E2_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_2E2_RLR_CRCCheck_2E2_wrongvalctr =getValue(this);    
}
/*@@end*/
/*@@envVar:E_pubc_GW_GW_2E2_RLR_RollingCounter_2E2_wrongvalctr:*/
on envVar E_pubc_GW_GW_2E2_RLR_RollingCounter_2E2_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_2E2_RLR_RollingCounter_2E2_wrongvalctr =getValue(this);    
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Dy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Dy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Dy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Dy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Dy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Dy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Dy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Dx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Dx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Dx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Dx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Dx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Dx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Dx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Dx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RefPointDx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Location == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Location = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Location = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Location=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_SetVt)==0)
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Location == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Location = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Location = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Vt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Location=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_SetVt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_SetVt
{
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Location=getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Vt);
    }
    else
    {
        Msg_GW_2E2.RLR_ElkOBJ1_Location=getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Location_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelAy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.03125)+(-16));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RelAy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelAy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.03125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelAx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-16));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RelAx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelAx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelAx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelAx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelVx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-128));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RelVx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelVx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RefPointDy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointDy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointDy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_ObstacleProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ObstacleProb_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_ObstacleProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Width == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Width = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Width = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Width=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Width == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Width_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Width = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Width = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_ExistProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ExistProb_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_ExistProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RefPointDy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RefPointDx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointDx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointDx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelAy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.03125)+(-16));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RelAy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelAy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.03125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Type == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Type = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Type = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Type=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_SetVt)==0)
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Type == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Type = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Type = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Vt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Type=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_SetVt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_SetVt
{
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Type=getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Vt);
    }
    else
    {
        Msg_GW_2E2.RLR_ElkOBJ2_Type=getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Type_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_ObstacleProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_ObstacleProb_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_ObstacleProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Location == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Location = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Location = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Location=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_SetVt)==0)
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Location == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Location = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Location = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Vt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Location=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_SetVt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_SetVt
{
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Location=getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Vt);
    }
    else
    {
        Msg_GW_2E2.RLR_ElkOBJ2_Location=getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Location_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelVx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-128));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RelVx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelVx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelVy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-64));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RelVy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RelVy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-64))/0.125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RelVy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RelVy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Type == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Type = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Type = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Type=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_SetVt)==0)
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Type == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Type = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Type = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Vt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Type=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_SetVt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_SetVt
{
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Type=getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Vt);
    }
    else
    {
        Msg_GW_2E2.RLR_ElkOBJ1_Type=getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Type_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Height == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Height = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Height = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Height=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Height == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Height_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Height = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Height = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_ExistProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_ExistProb_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_ExistProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Height == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Height = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Height = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Height=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Height == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Height_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Height = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Height = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Length == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Length = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Length = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Length=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Length == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Length_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Length = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Length = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Track_ID=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Track_ID_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Track_ID = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Track_ID=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Track_ID_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Track_ID = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Dx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Dx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Dx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Dx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Dx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Dx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Dx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Dy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Dy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Dy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Dy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Dy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Dy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Dy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Dy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(-3.14));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_HeadingAngle=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-3.14))/0.01);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_HeadingAngle_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_HeadingAngle = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(-3.14));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_HeadingAngle=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-3.14))/0.01);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_HeadingAngle_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_HeadingAngle = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_RefPointLoc=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_RefPointLoc_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_RefPointLoc = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Measured == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Measured = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Measured = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Measured=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_SetVt)==0)
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ1_Measured == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ1_Measured = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ1_Measured = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Vt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Measured=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_SetVt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_SetVt
{
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ1_Measured=getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Vt);
    }
    else
    {
        Msg_GW_2E2.RLR_ElkOBJ1_Measured=getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ1_Measured_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelVy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-64));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVy = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVy = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RelVy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelVy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-64))/0.125);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelVy_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVy = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelVy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Measured == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Measured = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Measured = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Measured=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_SetVt)==0)
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Measured == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Measured = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Measured = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Vt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Measured=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_SetVt:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_SetVt
{
    if(getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Measured=getvalue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Vt);
    }
    else
    {
        Msg_GW_2E2.RLR_ElkOBJ2_Measured=getValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Measured_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RefPointLoc=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RefPointLoc_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RefPointLoc = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Width == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Width = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Width = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Width=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Width == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Width_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Width = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Width = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Length == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05)+(0));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Length = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Length = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_Length=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_Length == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_Length_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_Length = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_Length = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelAx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-16));
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Pv, phyValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAx = 1;
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAx = 0;
        }    
        //update the signal value
        Msg_GW_2E2.RLR_ElkOBJ2_RelAx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Pv:*/
on envVar E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E2_RLR_ElkOBJ2_RelAx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.0625);
            putValue(E_pubc_GW_GW_2E2_RLR_ElkOBJ2_RelAx_Rv, rawValue);
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAx = 1;  
        }
        else
        {
            chgEv_GW_2E2_RLR_ElkOBJ2_RelAx = 0;
        }
    }
}
/*@@end*/

on envVar E_pubc_GW_GW_2E3_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_2E3_RLR_RollingCounter_2E3_wrongvalctr == 0)
        {
            update_GW_2E3_RLR_RollingCounter_2E3_counter();
            Msg_GW_2E3.RLR_RollingCounter_2E3= GW_2E3_RLR_RollingCounter_2E3_counter;
        }
        else if(GW_2E3_RLR_RollingCounter_2E3_wrongvalctr > 0)
        {
			GW_2E3_RLR_RollingCounter_2E3_counter=GW_2E3_RLR_RollingCounter_2E3_counter + GW_2E3_RLR_RollingCounter_2E3_wrongvalctr;
			 Msg_GW_2E3.RLR_RollingCounter_2E3= GW_2E3_RLR_RollingCounter_2E3_counter;
             /*GW_2E3_RLR_RollingCounter_2E3_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_2E3_RLR_RollingCounter_2E3_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_2E3_RLR_RollingCounter_2E3_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_2E3_CRC_CheckSum();

        output(Msg_GW_2E3);        
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_Range:*/
on envVar E_pubc_GW_GW_2E3_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv, rawValue);
        break;
     case(1) :
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv, rawValue);
        rawValue= 4095;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv, rawValue);
        rawValue= 1200;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv, rawValue);
        rawValue= 628;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv, rawValue);
        rawValue= 127;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv, rawValue);
        rawValue= 4095;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv, rawValue);
        rawValue= 7;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv, rawValue);
        rawValue= 510;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv, rawValue);
        rawValue= 510;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv, rawValue);
        rawValue= 1200;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv, rawValue);
        rawValue= 127;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv, rawValue);
        rawValue= 1023;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv, rawValue);
        rawValue= 2047;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv, rawValue);
        rawValue= 8191;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv, rawValue);
        rawValue= 628;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv, rawValue);
        rawValue= 50;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv, rawValue);
        rawValue= 511;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv, rawValue);
      break;
   }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_Dlc:*/
on envVar E_pubc_GW_GW_2E3_Dlc
{
    if(getValue(E_pubc_GW_GW_2E3_enDlc))
    {
        Msg_GW_2E3.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_2E3.dlc = 64;
	   	
  }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_enDlc:*/
on envVar E_pubc_GW_GW_2E3_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_2E3.dlc =getValue(E_pubc_GW_GW_2E3_Dlc);
    }
    else
    {
	   Msg_GW_2E3.dlc = 64;
			
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_CRCCheck_2E3_wrongvalctr:*/
on envVar E_pubc_GW_GW_2E3_RLR_CRCCheck_2E3_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_2E3_RLR_CRCCheck_2E3_wrongvalctr =getValue(this);    
}
/*@@end*/
/*@@envVar:E_pubc_GW_GW_2E3_RLR_RollingCounter_2E3_wrongvalctr:*/
on envVar E_pubc_GW_GW_2E3_RLR_RollingCounter_2E3_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_2E3_RLR_RollingCounter_2E3_wrongvalctr =getValue(this);    
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RefPointLoc=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointLoc_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointLoc = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RefPointDx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RefPointDy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RefPointDy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RefPointDy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Height == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Height = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Height = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Height=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Height == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Height_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Height = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Height = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelVx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-128));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RelVx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelVx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Width == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Width = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Width = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Width=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Width == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Width_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Width = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Width = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Location == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Location = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Location = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Location=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_SetVt)==0)
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Location == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Location = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Location = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Vt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Location=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_SetVt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_SetVt
{
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Location=getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Vt);
    }
    else
    {
        Msg_GW_2E3.RLR_ElkOBJ3_Location=getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Location_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Type == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Type = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Type = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Type=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_SetVt)==0)
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Type == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Type = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Type = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Vt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Type=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_SetVt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_SetVt
{
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Type=getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Vt);
    }
    else
    {
        Msg_GW_2E3.RLR_ElkOBJ3_Type=getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Type_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelVy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-64));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RelVy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelVy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-64))/0.125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_ExistProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ExistProb_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_ExistProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_ObstacleProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ObstacleProb_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_ObstacleProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Measured == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Measured = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Measured = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Measured=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_SetVt)==0)
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Measured == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Measured = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Measured = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Vt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Measured=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_SetVt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_SetVt
{
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Measured=getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Vt);
    }
    else
    {
        Msg_GW_2E3.RLR_ElkOBJ3_Measured=getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Measured_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelAy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.03125)+(-16));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RelAy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelAy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.03125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelAx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-16));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RelAx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelAx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelAx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelAx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(-3.14));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_HeadingAngle=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-3.14))/0.01);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_HeadingAngle_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_HeadingAngle = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Location == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Location = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Location = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Location=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_SetVt)==0)
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Location == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Location = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Location = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Vt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Location=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_SetVt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_SetVt
{
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Location=getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Vt);
    }
    else
    {
        Msg_GW_2E3.RLR_ElkOBJ4_Location=getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Location_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Track_ID=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Track_ID_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Track_ID = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelVy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-64));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RelVy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RelVy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-64))/0.125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RelVy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RelVy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RefPointLoc=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointLoc_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointLoc = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelVx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-128));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RelVx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelVx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelVx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelVx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Type == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Type = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Type = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Type=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_SetVt)==0)
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Type == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Type = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Type = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Vt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Type=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_SetVt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_SetVt
{
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Type=getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Vt);
    }
    else
    {
        Msg_GW_2E3.RLR_ElkOBJ4_Type=getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Type_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Length == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Length = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Length = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Length=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Length == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Length_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Length = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Length = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Length == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Length = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Length = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Length=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Length == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Length_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Length = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Length = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Dy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Dy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Dy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Dy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Dy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Dy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Dy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Dx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Dx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Dx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Dx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Dx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Dx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Dx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Dx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_ExistProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_ExistProb_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_ExistProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Width == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Width = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Width = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Width=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Width == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Width_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Width = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Width = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Measured == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Measured = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Measured = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Measured=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_SetVt)==0)
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Measured == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Measured = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Measured = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Vt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Measured=getValue(this);
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_SetVt:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_SetVt
{
    if(getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_SetVt))
    {
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Measured=getvalue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Vt);
    }
    else
    {
        Msg_GW_2E3.RLR_ElkOBJ4_Measured=getValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Measured_Rv);
    }
}
/*@@end*/
 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Track_ID=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Track_ID_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Track_ID = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Dx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Dx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Dx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Dx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Dx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Dx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Dx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Dy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Dy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Dy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_Dy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_Dy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_Dy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_Dy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_Dy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelAx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-16));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RelAx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelAx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelAy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.03125)+(-16));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_RelAy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_RelAy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-16))/0.03125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_RelAy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_RelAy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.125)+(-128));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RefPointDy=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-128))/0.125);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDy_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDy = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.0625)+(-256));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ3_RefPointDx=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-256))/0.0625);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ3_RefPointDx_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ3_RefPointDx = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(-3.14));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_HeadingAngle=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-3.14))/0.01);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_HeadingAngle_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_HeadingAngle = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *2)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_ObstacleProb=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/2);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_ObstacleProb_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_ObstacleProb = 0;
        }
    }
}
/*@@end*/


 
/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Height == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(0));
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Pv, phyValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Height = 1;
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Height = 0;
        }    
        //update the signal value
        Msg_GW_2E3.RLR_ElkOBJ4_Height=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Pv:*/
on envVar E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_2E3_RLR_ElkOBJ4_Height == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.01);
            putValue(E_pubc_GW_GW_2E3_RLR_ElkOBJ4_Height_Rv, rawValue);
            chgEv_GW_2E3_RLR_ElkOBJ4_Height = 1;  
        }
        else
        {
            chgEv_GW_2E3_RLR_ElkOBJ4_Height = 0;
        }
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_NM_tx:*/
on envVar E_pubc_GW_GW_NM_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_NM);        
    }
}
/*@@end*/
 
on envVar E_pubc_GW_GW_17E_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_17E_EPS_RollingCounter_17E_wrongvalctr == 0)
        {
            update_GW_17E_EPS_RollingCounter_17E_counter();
            Msg_GW_17E.EPS_RollingCounter_17E= GW_17E_EPS_RollingCounter_17E_counter;
        }
        else if(GW_17E_EPS_RollingCounter_17E_wrongvalctr > 0)
        {
			GW_17E_EPS_RollingCounter_17E_counter=GW_17E_EPS_RollingCounter_17E_counter + GW_17E_EPS_RollingCounter_17E_wrongvalctr;
			 Msg_GW_17E.EPS_RollingCounter_17E= GW_17E_EPS_RollingCounter_17E_counter;
             /* GW_17E_EPS_RollingCounter_17E_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_17E_EPS_RollingCounter_17E_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_17E_EPS_RollingCounter_17E_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_17E_CRC_CheckSum();

        output(Msg_GW_17E);        
    }
}
/*@@envVar:E_pubc_GW_GW_NM_Range:*/
on envVar E_pubc_GW_GW_NM_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv, rawValue);
        break;
     case(1) :
        rawValue= 255;
        putValue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv, rawValue);
      break;
   }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_NM_Dlc:*/
on envVar E_pubc_GW_GW_NM_Dlc
{
    if(getValue(E_pubc_GW_GW_NM_enDlc))
    {
        Msg_GW_NM.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_NM.dlc = 8;
	   	
  }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_NM_enDlc:*/
on envVar E_pubc_GW_GW_NM_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_NM.dlc =getValue(E_pubc_GW_GW_NM_Dlc);
    }
    else
    {
	   Msg_GW_NM.dlc = 8;
			
    }
}
/*@@end*/


/*@@envVar:E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv:*/
on envVar E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv
{
    qword rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_NM_GW_NMSourceAddress == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Pv, phyValue);
            chgEv_GW_NM_GW_NMSourceAddress = 1;
        }
        else
        {
            chgEv_GW_NM_GW_NMSourceAddress = 0;
        }    
        //update the signal value
        Msg_GW_NM.GW_NMSourceAddress=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_NM_GW_NMSourceAddress_Pv:*/
on envVar E_pubc_GW_GW_NM_GW_NMSourceAddress_Pv
{
    qword rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_NM_GW_NMSourceAddress == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_NM_GW_NMSourceAddress_Rv, rawValue);
            chgEv_GW_NM_GW_NMSourceAddress = 1;  
        }
        else
        {
            chgEv_GW_NM_GW_NMSourceAddress = 0;
        }
    }
}
/*@@end*/

on envVar E_pubc_GW_GW_17E_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Rv, rawValue);
        rawValue= 15;
        putValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv, rawValue);
        rawValue= 4093;
        putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_17E_Dlc
{
    if(getValue(E_pubc_GW_GW_17E_enDlc))
    {
        Msg_GW_17E.dlc =getValue(this);
    }
    else
    {
        Msg_GW_17E.dlc =8;
    }
}

on envVar E_pubc_GW_GW_17E_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_17E.dlc =getValue(E_pubc_GW_GW_17E_Dlc);
    }
    else
    {
        Msg_GW_17E.dlc =8;
    }
}

on envVar E_pubc_GW_GW_17E_EPS_CRCCheck_17E_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_17E_EPS_CRCCheck_17E_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_17E_EPS_RollingCounter_17E_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_17E_EPS_RollingCounter_17E_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17E_EPS_LatCtrlActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Pv, phyValue);
            chgEv_GW_17E_EPS_LatCtrlActive = 1;
        }
        else
        {
            chgEv_GW_17E_EPS_LatCtrlActive = 0;
        }    
        //update the signal value
        Msg_GW_17E.EPS_LatCtrlActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_SetVt)==0)
    {
        if(chgEv_GW_17E_EPS_LatCtrlActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv, rawValue);
            chgEv_GW_17E_EPS_LatCtrlActive = 1;  
        }
        else
        {
            chgEv_GW_17E_EPS_LatCtrlActive = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_SetVt))
    {
        //update the signal value
        Msg_GW_17E.EPS_LatCtrlActive=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlActive_SetVt
{
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_SetVt))
    {
        //update the signal value
        Msg_GW_17E.EPS_LatCtrlActive=getvalue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Vt);
    }
    else
    {
        Msg_GW_17E.EPS_LatCtrlActive=getValue(E_pubc_GW_GW_17E_EPS_LatCtrlActive_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Pv, phyValue);
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid = 1;
        }
        else
        {
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid = 0;
        }    
        //update the signal value
        Msg_GW_17E.EPS_MeasuredTorsionBarTorqValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_SetVt)==0)
    {
        if(chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorqValid_Rv, rawValue);
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid = 1;  
        }
        else
        {
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorqValid = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17E_EPS_ADS_Abortfeedback == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Pv, phyValue);
            chgEv_GW_17E_EPS_ADS_Abortfeedback = 1;
        }
        else
        {
            chgEv_GW_17E_EPS_ADS_Abortfeedback = 0;
        }    
        //update the signal value
        Msg_GW_17E.EPS_ADS_Abortfeedback=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_SetVt)==0)
    {
        if(chgEv_GW_17E_EPS_ADS_Abortfeedback == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv, rawValue);
            chgEv_GW_17E_EPS_ADS_Abortfeedback = 1;  
        }
        else
        {
            chgEv_GW_17E_EPS_ADS_Abortfeedback = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_SetVt))
    {
        //update the signal value
        Msg_GW_17E.EPS_ADS_Abortfeedback=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_SetVt
{
    if(getValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_SetVt))
    {
        //update the signal value
        Msg_GW_17E.EPS_ADS_Abortfeedback=getvalue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Vt);
    }
    else
    {
        Msg_GW_17E.EPS_ADS_Abortfeedback=getValue(E_pubc_GW_GW_17E_EPS_ADS_Abortfeedback_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17E_EPS_MeasuredTorsionBarTorque == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.01)+(-10.23));
            putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Pv, phyValue);
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorque = 1;
        }
        else
        {
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorque = 0;
        }    
        //update the signal value
        Msg_GW_17E.EPS_MeasuredTorsionBarTorque=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_17E_EPS_MeasuredTorsionBarTorque == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-10.23))/0.01);
            putValue(E_pubc_GW_GW_17E_EPS_MeasuredTorsionBarTorque_Rv, rawValue);
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorque = 1;  
        }
        else
        {
            chgEv_GW_17E_EPS_MeasuredTorsionBarTorque = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Pv, phyValue);
            chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus = 1;
        }
        else
        {
            chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus = 0;
        }    
        //update the signal value
        Msg_GW_17E.EPS_LatCtrlAvailabilityStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_SetVt)==0)
    {
        if(chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv, rawValue);
            chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus = 1;  
        }
        else
        {
            chgEv_GW_17E_EPS_LatCtrlAvailabilityStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17E.EPS_LatCtrlAvailabilityStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17E.EPS_LatCtrlAvailabilityStatus=getvalue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Vt);
    }
    else
    {
        Msg_GW_17E.EPS_LatCtrlAvailabilityStatus=getValue(E_pubc_GW_GW_17E_EPS_LatCtrlAvailabilityStatus_Rv);
    }
}
 
 
on envVar E_pubc_GW_GW_17A_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_17A_ESP_RollingCounter_187_wrongvalctr == 0)
        {
            update_GW_17A_ESP_RollingCounter_187_counter();
            Msg_GW_17A.ESP_RollingCounter_187= GW_17A_ESP_RollingCounter_187_counter;
        }
        else if(GW_17A_ESP_RollingCounter_187_wrongvalctr > 0)
        {
			GW_17A_ESP_RollingCounter_187_counter=GW_17A_ESP_RollingCounter_187_counter + GW_17A_ESP_RollingCounter_187_wrongvalctr;
			 Msg_GW_17A.ESP_RollingCounter_187= GW_17A_ESP_RollingCounter_187_counter;
             /*GW_17A_ESP_RollingCounter_187_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_17A_ESP_RollingCounter_187_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_17A_ESP_RollingCounter_187_wrongvalctr,0);
             } */
        }
        else
        { 
			// do nothing
        }    
        //calculate the CRC CheckSum
        update_GW_17A_CRC_CheckSum();

        output(Msg_GW_17A);        
    }
}

on envVar E_pubc_GW_GW_17A_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv, rawValue);
        rawValue= 6400;
        putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_17A_Dlc
{
    if(getValue(E_pubc_GW_GW_17A_enDlc))
    {
        Msg_GW_17A.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_17A.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_GW_17A_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_17A.dlc =getValue(E_pubc_GW_GW_17A_Dlc);
    }
    else
    {
	   Msg_GW_17A.dlc = 64;
			
    }
}


on envVar E_pubc_GW_GW_17A_ESP_CRCCheck_187_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_17A_ESP_CRCCheck_187_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_17A_ESP_CRCCheck_197_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_17A_ESP_CRCCheck_197_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_17A_ESP_RollingCounter_187_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_17A_ESP_RollingCounter_187_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_ESPActiveStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Pv, phyValue);
            chgEv_GW_17A_ESP_ESPActiveStatus = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_ESPActiveStatus = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_ESPActiveStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_ESPActiveStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv, rawValue);
            chgEv_GW_17A_ESP_ESPActiveStatus = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_ESPActiveStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ESPActiveStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ESPActiveStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ESPActiveStatus=getvalue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_ESPActiveStatus=getValue(E_pubc_GW_GW_17A_ESP_ESPActiveStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_ESPFunctionStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Pv, phyValue);
            chgEv_GW_17A_ESP_ESPFunctionStatus = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_ESPFunctionStatus = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_ESPFunctionStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_ESPFunctionStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv, rawValue);
            chgEv_GW_17A_ESP_ESPFunctionStatus = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_ESPFunctionStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ESPFunctionStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ESPFunctionStatus=getvalue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_ESPFunctionStatus=getValue(E_pubc_GW_GW_17A_ESP_ESPFunctionStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_ABSFailStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Pv, phyValue);
            chgEv_GW_17A_ESP_ABSFailStatus = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_ABSFailStatus = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_ABSFailStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_ABSFailStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_ABSFailStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv, rawValue);
            chgEv_GW_17A_ESP_ABSFailStatus = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_ABSFailStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ABSFailStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ABSFailStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ABSFailStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ABSFailStatus=getvalue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_ABSFailStatus=getValue(E_pubc_GW_GW_17A_ESP_ABSFailStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_VehicleSpeedValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Pv, phyValue);
            chgEv_GW_17A_ESP_VehicleSpeedValid = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_VehicleSpeedValid = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_VehicleSpeedValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_VehicleSpeedValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv, rawValue);
            chgEv_GW_17A_ESP_VehicleSpeedValid = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_VehicleSpeedValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_VehicleSpeedValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_VehicleSpeedValid=getvalue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_VehicleSpeedValid=getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeedValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_VehicleSpeed == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.05625)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Pv, phyValue);
            chgEv_GW_17A_ESP_VehicleSpeed = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_VehicleSpeed = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_VehicleSpeed=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeed_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_VehicleSpeed == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.05625);
            putValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv, rawValue);
            chgEv_GW_17A_ESP_VehicleSpeed = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_VehicleSpeed = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeed_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_VehicleSpeed=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_VehicleSpeed_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_VehicleSpeed=getvalue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_VehicleSpeed=getValue(E_pubc_GW_GW_17A_ESP_VehicleSpeed_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_TCSFailStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Pv, phyValue);
            chgEv_GW_17A_ESP_TCSFailStatus = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_TCSFailStatus = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_TCSFailStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_TCSFailStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_TCSFailStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv, rawValue);
            chgEv_GW_17A_ESP_TCSFailStatus = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_TCSFailStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_TCSFailStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_TCSFailStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_TCSFailStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_TCSFailStatus=getvalue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_TCSFailStatus=getValue(E_pubc_GW_GW_17A_ESP_TCSFailStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_17A_ESP_ABSActiveStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Pv, phyValue);
            chgEv_GW_17A_ESP_ABSActiveStatus = 1;
        }
        else
        {
            chgEv_GW_17A_ESP_ABSActiveStatus = 0;
        }    
        //update the signal value
        Msg_GW_17A.ESP_ABSActiveStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_SetVt)==0)
    {
        if(chgEv_GW_17A_ESP_ABSActiveStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv, rawValue);
            chgEv_GW_17A_ESP_ABSActiveStatus = 1;  
        }
        else
        {
            chgEv_GW_17A_ESP_ABSActiveStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ABSActiveStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_17A_ESP_ABSActiveStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_SetVt))
    {
        //update the signal value
        Msg_GW_17A.ESP_ABSActiveStatus=getvalue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Vt);
    }
    else
    {
        Msg_GW_17A.ESP_ABSActiveStatus=getValue(E_pubc_GW_GW_17A_ESP_ABSActiveStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_516_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_516);        
    }
}

on envVar E_pubc_GW_GW_516_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeSecond_Rv, rawValue);
        rawValue= 88435455;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeHour_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeDate_Rv, rawValue);
        rawValue= 44217727;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeMinute_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeYear_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeMonth_Rv, rawValue);
        break;
     case(1) :
        rawValue= 59;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeSecond_Rv, rawValue);
        rawValue= 448435455;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeValid_Rv, rawValue);
        rawValue= 23;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeHour_Rv, rawValue);
        rawValue= 31;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeDate_Rv, rawValue);
        rawValue= 224217727;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv, rawValue);
        rawValue= 59;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeMinute_Rv, rawValue);
        rawValue= 255;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeYear_Rv, rawValue);
        rawValue= 12;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeMonth_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeSecond_Rv, rawValue);
        rawValue= 88435455;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeHour_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeDate_Rv, rawValue);
        rawValue= 44217727;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeMinute_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeYear_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_516_HU_LocalTimeMonth_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_516_Dlc
{
    if(getValue(E_pubc_GW_GW_516_enDlc))
    {
        Msg_GW_516.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_516.dlc = 32;
	   	
  }
}

on envVar E_pubc_GW_GW_516_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_516.dlc =getValue(E_pubc_GW_GW_516_Dlc);
    }
    else
    {
	   Msg_GW_516.dlc = 32;
			
    }
}


on envVar E_pubc_GW_GW_516_HU_LocalTimeSecond_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeSecond == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeSecond_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeSecond = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeSecond = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeSecond=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeSecond_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_LocalTimeSecond == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeSecond_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeSecond = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeSecond = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_CurrentLocationLongitude == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1e-006)+(-268.435455));
            putValue(E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Pv, phyValue);
            chgEv_GW_516_HU_CurrentLocationLongitude = 1;
        }
        else
        {
            chgEv_GW_516_HU_CurrentLocationLongitude = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_CurrentLocationLongitude=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_CurrentLocationLongitude == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-268.435455))/1e-006);
            putValue(E_pubc_GW_GW_516_HU_CurrentLocationLongitude_Rv, rawValue);
            chgEv_GW_516_HU_CurrentLocationLongitude = 1;  
        }
        else
        {
            chgEv_GW_516_HU_CurrentLocationLongitude = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeSystem == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeSystem = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeSystem = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeSystem=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeSystem_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_SetVt)==0)
    {
        if(chgEv_GW_516_HU_LocalTimeSystem == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeSystem = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeSystem = 0;
        }
    }
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeSystem_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_SetVt))
    {
        //update the signal value
        Msg_GW_516.HU_LocalTimeSystem=getValue(this);
    }
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeSystem_SetVt
{
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_SetVt))
    {
        //update the signal value
        Msg_GW_516.HU_LocalTimeSystem=getvalue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Vt);
    }
    else
    {
        Msg_GW_516.HU_LocalTimeSystem=getValue(E_pubc_GW_GW_516_HU_LocalTimeSystem_Rv);
    }
}
 
on envVar E_pubc_GW_GW_516_HU_LocalTimeValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeValid_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeValid = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeValid = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeValid_SetVt)==0)
    {
        if(chgEv_GW_516_HU_LocalTimeValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeValid_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeValid = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeValid_SetVt))
    {
        //update the signal value
        Msg_GW_516.HU_LocalTimeValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeValid_SetVt
{
    if(getValue(E_pubc_GW_GW_516_HU_LocalTimeValid_SetVt))
    {
        //update the signal value
        Msg_GW_516.HU_LocalTimeValid=getvalue(E_pubc_GW_GW_516_HU_LocalTimeValid_Vt);
    }
    else
    {
        Msg_GW_516.HU_LocalTimeValid=getValue(E_pubc_GW_GW_516_HU_LocalTimeValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_516_HU_LocalTimeHour_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeHour == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeHour_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeHour = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeHour = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeHour=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeHour_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_LocalTimeHour == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeHour_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeHour = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeHour = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_LocalTimeDate_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeDate == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeDate_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeDate = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeDate = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeDate=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeDate_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_LocalTimeDate == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeDate_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeDate = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeDate = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_CurrentLocationLatitude == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1e-006)+(-134.217727));
            putValue(E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Pv, phyValue);
            chgEv_GW_516_HU_CurrentLocationLatitude = 1;
        }
        else
        {
            chgEv_GW_516_HU_CurrentLocationLatitude = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_CurrentLocationLatitude=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_CurrentLocationLatitude == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(-134.217727))/1e-006);
            putValue(E_pubc_GW_GW_516_HU_CurrentLocationLatitude_Rv, rawValue);
            chgEv_GW_516_HU_CurrentLocationLatitude = 1;  
        }
        else
        {
            chgEv_GW_516_HU_CurrentLocationLatitude = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_CurrentLocationValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Pv, phyValue);
            chgEv_GW_516_HU_CurrentLocationValid = 1;
        }
        else
        {
            chgEv_GW_516_HU_CurrentLocationValid = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_CurrentLocationValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_CurrentLocationValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_SetVt)==0)
    {
        if(chgEv_GW_516_HU_CurrentLocationValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv, rawValue);
            chgEv_GW_516_HU_CurrentLocationValid = 1;  
        }
        else
        {
            chgEv_GW_516_HU_CurrentLocationValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_516_HU_CurrentLocationValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_SetVt))
    {
        //update the signal value
        Msg_GW_516.HU_CurrentLocationValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_516_HU_CurrentLocationValid_SetVt
{
    if(getValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_SetVt))
    {
        //update the signal value
        Msg_GW_516.HU_CurrentLocationValid=getvalue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Vt);
    }
    else
    {
        Msg_GW_516.HU_CurrentLocationValid=getValue(E_pubc_GW_GW_516_HU_CurrentLocationValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_516_HU_LocalTimeMinute_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeMinute == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeMinute_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeMinute = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeMinute = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeMinute=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeMinute_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_LocalTimeMinute == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeMinute_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeMinute = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeMinute = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_LocalTimeYear_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeYear == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(2013));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeYear_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeYear = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeYear = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeYear=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeYear_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_LocalTimeYear == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(2013))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeYear_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeYear = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeYear = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_516_HU_LocalTimeMonth_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_516_HU_LocalTimeMonth == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_516_HU_LocalTimeMonth_Pv, phyValue);
            chgEv_GW_516_HU_LocalTimeMonth = 1;
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeMonth = 0;
        }    
        //update the signal value
        Msg_GW_516.HU_LocalTimeMonth=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_516_HU_LocalTimeMonth_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_516_HU_LocalTimeMonth == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_516_HU_LocalTimeMonth_Rv, rawValue);
            chgEv_GW_516_HU_LocalTimeMonth = 1;  
        }
        else
        {
            chgEv_GW_516_HU_LocalTimeMonth = 0;
        }
    }
}
 
on envVar E_pubc_GW_ADS_244_tx
{
    if(getValue(this))
    {       
        

        output(Msg_ADS_244);        
    }
}

on envVar E_pubc_GW_ADS_244_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_ADS_244_ACC_AEBActive_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_ADS_244_ACC_AEBActive_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_ADS_244_ACC_AEBActive_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_ADS_244_Dlc
{
    if(getValue(E_pubc_GW_ADS_244_enDlc))
    {
        Msg_ADS_244.dlc =getValue(this);
    }
    else
    {   
	   Msg_ADS_244.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_ADS_244_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_ADS_244.dlc =getValue(E_pubc_GW_ADS_244_Dlc);
    }
    else
    {
	   Msg_ADS_244.dlc = 64;
			
    }
}


on envVar E_pubc_GW_ADS_244_ACC_AEBActive_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ADS_244_ACC_AEBActive_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ADS_244_ACC_AEBActive == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ADS_244_ACC_AEBActive_Pv, phyValue);
            chgEv_ADS_244_ACC_AEBActive = 1;
        }
        else
        {
            chgEv_ADS_244_ACC_AEBActive = 0;
        }    
        //update the signal value
        Msg_ADS_244.ACC_AEBActive=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ADS_244_ACC_AEBActive_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ADS_244_ACC_AEBActive_SetVt)==0)
    {
        if(chgEv_ADS_244_ACC_AEBActive == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ADS_244_ACC_AEBActive_Rv, rawValue);
            chgEv_ADS_244_ACC_AEBActive = 1;  
        }
        else
        {
            chgEv_ADS_244_ACC_AEBActive = 0;
        }
    }
}

on envVar E_pubc_GW_ADS_244_ACC_AEBActive_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ADS_244_ACC_AEBActive_SetVt))
    {
        //update the signal value
        Msg_ADS_244.ACC_AEBActive=getValue(this);
    }
}

on envVar E_pubc_GW_ADS_244_ACC_AEBActive_SetVt
{
    if(getValue(E_pubc_GW_ADS_244_ACC_AEBActive_SetVt))
    {
        //update the signal value
        Msg_ADS_244.ACC_AEBActive=getvalue(E_pubc_GW_ADS_244_ACC_AEBActive_Vt);
    }
    else
    {
        Msg_ADS_244.ACC_AEBActive=getValue(E_pubc_GW_ADS_244_ACC_AEBActive_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3E8_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_3E8);        
    }
}

on envVar E_pubc_GW_GW_3E8_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv, rawValue);
        rawValue= 254;
        putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3E8_Dlc
{
    if(getValue(E_pubc_GW_GW_3E8_enDlc))
    {
        Msg_GW_3E8.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_3E8.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_GW_3E8_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3E8.dlc =getValue(E_pubc_GW_GW_3E8_Dlc);
    }
    else
    {
	   Msg_GW_3E8.dlc = 8;
			
    }
}


on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3E8_BCM_SOF_Q_STATE == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Pv, phyValue);
            chgEv_GW_3E8_BCM_SOF_Q_STATE = 1;
        }
        else
        {
            chgEv_GW_3E8_BCM_SOF_Q_STATE = 0;
        }    
        //update the signal value
        Msg_GW_3E8.BCM_SOF_Q_STATE=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_SetVt)==0)
    {
        if(chgEv_GW_3E8_BCM_SOF_Q_STATE == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv, rawValue);
            chgEv_GW_3E8_BCM_SOF_Q_STATE = 1;  
        }
        else
        {
            chgEv_GW_3E8_BCM_SOF_Q_STATE = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_SetVt))
    {
        //update the signal value
        Msg_GW_3E8.BCM_SOF_Q_STATE=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_SetVt
{
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_SetVt))
    {
        //update the signal value
        Msg_GW_3E8.BCM_SOF_Q_STATE=getvalue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Vt);
    }
    else
    {
        Msg_GW_3E8.BCM_SOF_Q_STATE=getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_STATE_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3E8_BCM_SOF_Q == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.5)+(0));
            putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Pv, phyValue);
            chgEv_GW_3E8_BCM_SOF_Q = 1;
        }
        else
        {
            chgEv_GW_3E8_BCM_SOF_Q = 0;
        }    
        //update the signal value
        Msg_GW_3E8.BCM_SOF_Q=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_SetVt)==0)
    {
        if(chgEv_GW_3E8_BCM_SOF_Q == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.5);
            putValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv, rawValue);
            chgEv_GW_3E8_BCM_SOF_Q = 1;  
        }
        else
        {
            chgEv_GW_3E8_BCM_SOF_Q = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_SetVt))
    {
        //update the signal value
        Msg_GW_3E8.BCM_SOF_Q=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3E8_BCM_SOF_Q_SetVt
{
    if(getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_SetVt))
    {
        //update the signal value
        Msg_GW_3E8.BCM_SOF_Q=getvalue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Vt);
    }
    else
    {
        Msg_GW_3E8.BCM_SOF_Q=getValue(E_pubc_GW_GW_3E8_BCM_SOF_Q_Rv);
    }
}
 
on envVar E_pubc_GW_ACC_592_tx
{
    if(getValue(this))
    {       
        

        output(Msg_ACC_592);        
    }
}

on envVar E_pubc_GW_ACC_592_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_ACC_592_Dlc
{
    if(getValue(E_pubc_GW_ACC_592_enDlc))
    {
        Msg_ACC_592.dlc =getValue(this);
    }
    else
    {   
	   Msg_ACC_592.dlc = 8;
	   	
  }
}

on envVar E_pubc_GW_ACC_592_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_ACC_592.dlc =getValue(E_pubc_GW_ACC_592_Dlc);
    }
    else
    {
	   Msg_ACC_592.dlc = 8;
			
    }
}


on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Pv, phyValue);
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 = 1;
        }
        else
        {
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 = 0;
        }    
        //update the signal value
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT0=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_SetVt)==0)
    {
        if(chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv, rawValue);
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 = 1;  
        }
        else
        {
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT0 = 0;
        }
    }
}

on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT0=getValue(this);
    }
}

on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_SetVt
{
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT0=getvalue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Vt);
    }
    else
    {
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT0=getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT0_Rv);
    }
}
 
on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Pv, phyValue);
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 = 1;
        }
        else
        {
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 = 0;
        }    
        //update the signal value
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT1=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_SetVt)==0)
    {
        if(chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv, rawValue);
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 = 1;  
        }
        else
        {
            chgEv_ACC_592_LAS_WakeUp_BYTE4BIT1 = 0;
        }
    }
}

on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT1=getValue(this);
    }
}

on envVar E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_SetVt
{
    if(getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT1=getvalue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Vt);
    }
    else
    {
        Msg_ACC_592.LAS_WakeUp_BYTE4BIT1=getValue(E_pubc_GW_ACC_592_LAS_WakeUp_BYTE4BIT1_Rv);
    }
}
 
on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Pv, phyValue);
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 = 1;
        }
        else
        {
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 = 0;
        }    
        //update the signal value
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT0=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_SetVt)==0)
    {
        if(chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv, rawValue);
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 = 1;  
        }
        else
        {
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT0 = 0;
        }
    }
}

on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT0=getValue(this);
    }
}

on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_SetVt
{
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT0=getvalue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Vt);
    }
    else
    {
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT0=getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT0_Rv);
    }
}
 
on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Pv, phyValue);
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 = 1;
        }
        else
        {
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 = 0;
        }    
        //update the signal value
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT1=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_SetVt)==0)
    {
        if(chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv, rawValue);
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 = 1;  
        }
        else
        {
            chgEv_ACC_592_LAS_NotSleep_BYTE7BIT1 = 0;
        }
    }
}

on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT1=getValue(this);
    }
}

on envVar E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_SetVt
{
    if(getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_SetVt))
    {
        //update the signal value
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT1=getvalue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Vt);
    }
    else
    {
        Msg_ACC_592.LAS_NotSleep_BYTE7BIT1=getValue(E_pubc_GW_ACC_592_LAS_NotSleep_BYTE7BIT1_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28C_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr == 0)
        {
            update_GW_28C_GW_MFS_RollingCounter_28C_counter();
            Msg_GW_28C.GW_MFS_RollingCounter_28C= GW_28C_GW_MFS_RollingCounter_28C_counter;
        }
        else if(GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr > 0)
        {
			GW_28C_GW_MFS_RollingCounter_28C_counter=GW_28C_GW_MFS_RollingCounter_28C_counter + GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr;
			 Msg_GW_28C.GW_MFS_RollingCounter_28C= GW_28C_GW_MFS_RollingCounter_28C_counter;
             /* GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_28C_CRC_CheckSum();

        output(Msg_GW_28C);        
    }
}

on envVar E_pubc_GW_GW_28C_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_28C_Dlc
{
    if(getValue(E_pubc_GW_GW_28C_enDlc))
    {
        Msg_GW_28C.dlc =getValue(this);
    }
    else
    {
        Msg_GW_28C.dlc =8;
    }
}

on envVar E_pubc_GW_GW_28C_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_28C.dlc =getValue(E_pubc_GW_GW_28C_Dlc);
    }
    else
    {
        Msg_GW_28C.dlc =8;
    }
}

on envVar E_pubc_GW_GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_28C_GW_MFS_RollingCounter_28C_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28C_GW_MFS_IACCenable_switch_signal == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Pv, phyValue);
            chgEv_GW_28C_GW_MFS_IACCenable_switch_signal = 1;
        }
        else
        {
            chgEv_GW_28C_GW_MFS_IACCenable_switch_signal = 0;
        }    
        //update the signal value
        Msg_GW_28C.GW_MFS_IACCenable_switch_signal=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_SetVt)==0)
    {
        if(chgEv_GW_28C_GW_MFS_IACCenable_switch_signal == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv, rawValue);
            chgEv_GW_28C_GW_MFS_IACCenable_switch_signal = 1;  
        }
        else
        {
            chgEv_GW_28C_GW_MFS_IACCenable_switch_signal = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_SetVt))
    {
        //update the signal value
        Msg_GW_28C.GW_MFS_IACCenable_switch_signal=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_SetVt
{
    if(getValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_SetVt))
    {
        //update the signal value
        Msg_GW_28C.GW_MFS_IACCenable_switch_signal=getvalue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Vt);
    }
    else
    {
        Msg_GW_28C.GW_MFS_IACCenable_switch_signal=getValue(E_pubc_GW_GW_28C_GW_MFS_IACCenable_switch_signal_Rv);
    }
}
 
on envVar E_pubc_GW_GW_530_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_530);        
    }
}

on envVar E_pubc_GW_GW_530_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_530_IP_TotalOdometer_Rv, rawValue);
        break;
     case(1) :
        rawValue= 9999990;
        putValue(E_pubc_GW_GW_530_IP_TotalOdometer_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_530_IP_TotalOdometer_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_530_Dlc
{
    if(getValue(E_pubc_GW_GW_530_enDlc))
    {
        Msg_GW_530.dlc =getValue(this);
    }
    else
    {
        Msg_GW_530.dlc =8;
    }
}

on envVar E_pubc_GW_GW_530_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_530.dlc =getValue(E_pubc_GW_GW_530_Dlc);
    }
    else
    {
        Msg_GW_530.dlc =8;
    }
}


on envVar E_pubc_GW_GW_530_IP_TotalOdometer_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_530_IP_TotalOdometer == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.1)+(0));
            putValue(E_pubc_GW_GW_530_IP_TotalOdometer_Pv, phyValue);
            chgEv_GW_530_IP_TotalOdometer = 1;
        }
        else
        {
            chgEv_GW_530_IP_TotalOdometer = 0;
        }    
        //update the signal value
        Msg_GW_530.IP_TotalOdometer=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_530_IP_TotalOdometer_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_530_IP_TotalOdometer == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.1);
            putValue(E_pubc_GW_GW_530_IP_TotalOdometer_Rv, rawValue);
            chgEv_GW_530_IP_TotalOdometer = 1;  
        }
        else
        {
            chgEv_GW_530_IP_TotalOdometer = 0;
        }
    }
}


/*@@envVar:E_pubc_GW_ACC_NM_tx:*/
on envVar E_pubc_GW_ACC_NM_tx
{
    if(getValue(this))
    {       
        

        output(Msg_ACC_NM);        
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_ACC_NM_Range:*/
on envVar E_pubc_GW_ACC_NM_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv, rawValue);
        break;
     case(1) :
        rawValue= 255;
        putValue(E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv, rawValue);
      break;
   }
}
/*@@end*/

/*@@envVar:E_pubc_GW_ACC_NM_Dlc:*/
on envVar E_pubc_GW_ACC_NM_Dlc
{
    if(getValue(E_pubc_GW_ACC_NM_enDlc))
    {
        Msg_ACC_NM.dlc =getValue(this);
    }
    else
    {   
	   Msg_ACC_NM.dlc = 8;
	   	
  }
}
/*@@end*/

/*@@envVar:E_pubc_GW_ACC_NM_enDlc:*/
on envVar E_pubc_GW_ACC_NM_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_ACC_NM.dlc =getValue(E_pubc_GW_ACC_NM_Dlc);
    }
    else
    {
	   Msg_ACC_NM.dlc = 8;
			
    }
}
/*@@end*/


/*@@envVar:E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv:*/
on envVar E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv
{
    qword rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_ACC_NM_ACC_NMSourceAddress == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Pv, phyValue);
            chgEv_ACC_NM_ACC_NMSourceAddress = 1;
        }
        else
        {
            chgEv_ACC_NM_ACC_NMSourceAddress = 0;
        }    
        //update the signal value
        Msg_ACC_NM.ACC_NMSourceAddress=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Pv:*/
on envVar E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Pv
{
    qword rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_ACC_NM_ACC_NMSourceAddress == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_ACC_NM_ACC_NMSourceAddress_Rv, rawValue);
            chgEv_ACC_NM_ACC_NMSourceAddress = 1;  
        }
        else
        {
            chgEv_ACC_NM_ACC_NMSourceAddress = 0;
        }
    }
}
/*@@end*/
 
on envVar E_pubc_GW_GW_180_tx
{
    if(getValue(this))
    {       
        
        //update the BZ Signal
        if(GW_180_SAS_RollingCounter_wrongvalctr == 0)
        {
            update_GW_180_SAS_RollingCounter_counter();
            Msg_GW_180.SAS_RollingCounter= GW_180_SAS_RollingCounter_counter;
        }
        else if(GW_180_SAS_RollingCounter_wrongvalctr > 0)
        {
			GW_180_SAS_RollingCounter_counter=GW_180_SAS_RollingCounter_counter + GW_180_SAS_RollingCounter_wrongvalctr;
			 Msg_GW_180.SAS_RollingCounter= GW_180_SAS_RollingCounter_counter;
             /* GW_180_SAS_RollingCounter_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_180_SAS_RollingCounter_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_180_SAS_RollingCounter_wrongvalctr,0);
             } */
        }
        else
        {
            //do nothing
        }        
        //calculate the CRC CheckSum
        update_GW_180_CRC_CheckSum();

        output(Msg_GW_180);        
    }
}

on envVar E_pubc_GW_GW_180_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_Calibrated_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_SASFailure_Rv, rawValue);
        rawValue= -7800;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngle_Rv, rawValue);
        break;
     case(1) :
        rawValue= 1;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_180_SAS_Calibrated_Rv, rawValue);
        rawValue= 254;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_180_SAS_SASFailure_Rv, rawValue);
        rawValue= 7800;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngle_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_Calibrated_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_180_SAS_SASFailure_Rv, rawValue);
        rawValue= -7800;
        putValue(E_pubc_GW_GW_180_SAS_SteeringAngle_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_180_Dlc
{
    if(getValue(E_pubc_GW_GW_180_enDlc))
    {
        Msg_GW_180.dlc =getValue(this);
    }
    else
    {
        Msg_GW_180.dlc =8;
    }
}

on envVar E_pubc_GW_GW_180_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_180.dlc =getValue(E_pubc_GW_GW_180_Dlc);
    }
    else
    {
        Msg_GW_180.dlc =8;
    }
}

on envVar E_pubc_GW_GW_180_SAS_CRCCheck_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_180_SAS_CRCCheck_wrongvalctr =getValue(this);    
}
on envVar E_pubc_GW_GW_180_SAS_RollingCounter_wrongvalctr
{
    //update disturb count
    //disturb value range:(-1 = always send wrong value),( X>0 ,x is the number of Messages with wrong CHK sent)
    GW_180_SAS_RollingCounter_wrongvalctr =getValue(this);    
}

on envVar E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_180_SAS_SteeringAngleValid == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Pv, phyValue);
            chgEv_GW_180_SAS_SteeringAngleValid = 1;
        }
        else
        {
            chgEv_GW_180_SAS_SteeringAngleValid = 0;
        }    
        //update the signal value
        Msg_GW_180.SAS_SteeringAngleValid=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_180_SAS_SteeringAngleValid_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_SetVt)==0)
    {
        if(chgEv_GW_180_SAS_SteeringAngleValid == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv, rawValue);
            chgEv_GW_180_SAS_SteeringAngleValid = 1;  
        }
        else
        {
            chgEv_GW_180_SAS_SteeringAngleValid = 0;
        }
    }
}

on envVar E_pubc_GW_GW_180_SAS_SteeringAngleValid_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_SetVt))
    {
        //update the signal value
        Msg_GW_180.SAS_SteeringAngleValid=getValue(this);
    }
}

on envVar E_pubc_GW_GW_180_SAS_SteeringAngleValid_SetVt
{
    if(getValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_SetVt))
    {
        //update the signal value
        Msg_GW_180.SAS_SteeringAngleValid=getvalue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Vt);
    }
    else
    {
        Msg_GW_180.SAS_SteeringAngleValid=getValue(E_pubc_GW_GW_180_SAS_SteeringAngleValid_Rv);
    }
}
 
on envVar E_pubc_GW_GW_180_SAS_Calibrated_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_180_SAS_Calibrated_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_180_SAS_Calibrated == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_180_SAS_Calibrated_Pv, phyValue);
            chgEv_GW_180_SAS_Calibrated = 1;
        }
        else
        {
            chgEv_GW_180_SAS_Calibrated = 0;
        }    
        //update the signal value
        Msg_GW_180.SAS_Calibrated=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_180_SAS_Calibrated_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_180_SAS_Calibrated_SetVt)==0)
    {
        if(chgEv_GW_180_SAS_Calibrated == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_180_SAS_Calibrated_Rv, rawValue);
            chgEv_GW_180_SAS_Calibrated = 1;  
        }
        else
        {
            chgEv_GW_180_SAS_Calibrated = 0;
        }
    }
}

on envVar E_pubc_GW_GW_180_SAS_Calibrated_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_180_SAS_Calibrated_SetVt))
    {
        //update the signal value
        Msg_GW_180.SAS_Calibrated=getValue(this);
    }
}

on envVar E_pubc_GW_GW_180_SAS_Calibrated_SetVt
{
    if(getValue(E_pubc_GW_GW_180_SAS_Calibrated_SetVt))
    {
        //update the signal value
        Msg_GW_180.SAS_Calibrated=getvalue(E_pubc_GW_GW_180_SAS_Calibrated_Vt);
    }
    else
    {
        Msg_GW_180.SAS_Calibrated=getValue(E_pubc_GW_GW_180_SAS_Calibrated_Rv);
    }
}
 
on envVar E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_180_SAS_SteeringAngleSpeed == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *4)+(0));
            putValue(E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Pv, phyValue);
            chgEv_GW_180_SAS_SteeringAngleSpeed = 1;
        }
        else
        {
            chgEv_GW_180_SAS_SteeringAngleSpeed = 0;
        }    
        //update the signal value
        Msg_GW_180.SAS_SteeringAngleSpeed=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_180_SAS_SteeringAngleSpeed == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/4);
            putValue(E_pubc_GW_GW_180_SAS_SteeringAngleSpeed_Rv, rawValue);
            chgEv_GW_180_SAS_SteeringAngleSpeed = 1;  
        }
        else
        {
            chgEv_GW_180_SAS_SteeringAngleSpeed = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_180_SAS_SASFailure_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_180_SAS_SASFailure_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_180_SAS_SASFailure == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_180_SAS_SASFailure_Pv, phyValue);
            chgEv_GW_180_SAS_SASFailure = 1;
        }
        else
        {
            chgEv_GW_180_SAS_SASFailure = 0;
        }    
        //update the signal value
        Msg_GW_180.SAS_SASFailure=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_180_SAS_SASFailure_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_180_SAS_SASFailure_SetVt)==0)
    {
        if(chgEv_GW_180_SAS_SASFailure == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_180_SAS_SASFailure_Rv, rawValue);
            chgEv_GW_180_SAS_SASFailure = 1;  
        }
        else
        {
            chgEv_GW_180_SAS_SASFailure = 0;
        }
    }
}

on envVar E_pubc_GW_GW_180_SAS_SASFailure_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_180_SAS_SASFailure_SetVt))
    {
        //update the signal value
        Msg_GW_180.SAS_SASFailure=getValue(this);
    }
}

on envVar E_pubc_GW_GW_180_SAS_SASFailure_SetVt
{
    if(getValue(E_pubc_GW_GW_180_SAS_SASFailure_SetVt))
    {
        //update the signal value
        Msg_GW_180.SAS_SASFailure=getvalue(E_pubc_GW_GW_180_SAS_SASFailure_Vt);
    }
    else
    {
        Msg_GW_180.SAS_SASFailure=getValue(E_pubc_GW_GW_180_SAS_SASFailure_Rv);
    }
}
 
on envVar E_pubc_GW_GW_320_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_320);        
    }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_320_Range:*/
on envVar E_pubc_GW_GW_320_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_320_GW_ResetReq_Rv, rawValue);
        break;
     case(1) :
        rawValue= 127;
        putValue(E_pubc_GW_GW_320_GW_ResetReq_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_320_GW_ResetReq_Rv, rawValue);
      break;
   }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_320_Dlc:*/
on envVar E_pubc_GW_GW_320_Dlc
{
    if(getValue(E_pubc_GW_GW_320_enDlc))
    {
        Msg_GW_320.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_320.dlc = 8;
	   	
  }
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_320_enDlc:*/
on envVar E_pubc_GW_GW_320_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_320.dlc =getValue(E_pubc_GW_GW_320_Dlc);
    }
    else
    {
	   Msg_GW_320.dlc = 8;
			
    }
}
/*@@end*/


/*@@envVar:E_pubc_GW_GW_320_GW_ResetReq_Rv:*/
on envVar E_pubc_GW_GW_320_GW_ResetReq_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_320_GW_ResetReq == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_320_GW_ResetReq_Pv, phyValue);
            chgEv_GW_320_GW_ResetReq = 1;
        }
        else
        {
            chgEv_GW_320_GW_ResetReq = 0;
        }    
        //update the signal value
        Msg_GW_320.GW_ResetReq=rawValue;        
    }                                                                           
}
/*@@end*/

/*@@envVar:E_pubc_GW_GW_320_GW_ResetReq_Pv:*/
on envVar E_pubc_GW_GW_320_GW_ResetReq_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_320_GW_ResetReq == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_320_GW_ResetReq_Rv, rawValue);
            chgEv_GW_320_GW_ResetReq = 1;  
        }
        else
        {
            chgEv_GW_320_GW_ResetReq = 0;
        }
    }
}
on envVar E_pubc_GW_GW_180_SAS_SteeringAngle_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    {
        rawValue = getvalue(this);
        if(chgEv_GW_180_SAS_SteeringAngle == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *0.1)+(0));
            putValue(E_pubc_GW_GW_180_SAS_SteeringAngle_Pv, phyValue);
            chgEv_GW_180_SAS_SteeringAngle = 1;
        }
        else
        {
            chgEv_GW_180_SAS_SteeringAngle = 0;
        }    
        //update the signal value
        Msg_GW_180.SAS_SteeringAngle=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_180_SAS_SteeringAngle_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    {
        if(chgEv_GW_180_SAS_SteeringAngle == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/0.1);
            putValue(E_pubc_GW_GW_180_SAS_SteeringAngle_Rv, rawValue);
            chgEv_GW_180_SAS_SteeringAngle = 1;  
        }
        else
        {
            chgEv_GW_180_SAS_SteeringAngle = 0;
        }
    }
}


 
on envVar E_pubc_GW_GW_3BD_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_3BD);        
    }
}

on envVar E_pubc_GW_GW_3BD_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3BD_HU_TLAEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3BD_HU_ELKEnable_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_3BD_HU_TLAEnable_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_3BD_HU_ELKEnable_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_3BD_HU_TLAEnable_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_3BD_HU_ELKEnable_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_3BD_Dlc
{
    if(getValue(E_pubc_GW_GW_3BD_enDlc))
    {
        Msg_GW_3BD.dlc =getValue(this);
    }
    else
    {   
	   Msg_GW_3BD.dlc = 64;
	   	
  }
}

on envVar E_pubc_GW_GW_3BD_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_3BD.dlc =getValue(E_pubc_GW_GW_3BD_Dlc);
    }
    else
    {
	   Msg_GW_3BD.dlc = 64;
			
    }
}


on envVar E_pubc_GW_GW_3BD_HU_TLAEnable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3BD_HU_TLAEnable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3BD_HU_TLAEnable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3BD_HU_TLAEnable_Pv, phyValue);
            chgEv_GW_3BD_HU_TLAEnable = 1;
        }
        else
        {
            chgEv_GW_3BD_HU_TLAEnable = 0;
        }    
        //update the signal value
        Msg_GW_3BD.HU_TLAEnable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3BD_HU_TLAEnable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3BD_HU_TLAEnable_SetVt)==0)
    {
        if(chgEv_GW_3BD_HU_TLAEnable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3BD_HU_TLAEnable_Rv, rawValue);
            chgEv_GW_3BD_HU_TLAEnable = 1;  
        }
        else
        {
            chgEv_GW_3BD_HU_TLAEnable = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3BD_HU_TLAEnable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3BD_HU_TLAEnable_SetVt))
    {
        //update the signal value
        Msg_GW_3BD.HU_TLAEnable=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3BD_HU_TLAEnable_SetVt
{
    if(getValue(E_pubc_GW_GW_3BD_HU_TLAEnable_SetVt))
    {
        //update the signal value
        Msg_GW_3BD.HU_TLAEnable=getvalue(E_pubc_GW_GW_3BD_HU_TLAEnable_Vt);
    }
    else
    {
        Msg_GW_3BD.HU_TLAEnable=getValue(E_pubc_GW_GW_3BD_HU_TLAEnable_Rv);
    }
}
 
on envVar E_pubc_GW_GW_3BD_HU_ELKEnable_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_3BD_HU_ELKEnable_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_3BD_HU_ELKEnable == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_3BD_HU_ELKEnable_Pv, phyValue);
            chgEv_GW_3BD_HU_ELKEnable = 1;
        }
        else
        {
            chgEv_GW_3BD_HU_ELKEnable = 0;
        }    
        //update the signal value
        Msg_GW_3BD.HU_ELKEnable=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_3BD_HU_ELKEnable_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_3BD_HU_ELKEnable_SetVt)==0)
    {
        if(chgEv_GW_3BD_HU_ELKEnable == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_3BD_HU_ELKEnable_Rv, rawValue);
            chgEv_GW_3BD_HU_ELKEnable = 1;  
        }
        else
        {
            chgEv_GW_3BD_HU_ELKEnable = 0;
        }
    }
}

on envVar E_pubc_GW_GW_3BD_HU_ELKEnable_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_3BD_HU_ELKEnable_SetVt))
    {
        //update the signal value
        Msg_GW_3BD.HU_ELKEnable=getValue(this);
    }
}

on envVar E_pubc_GW_GW_3BD_HU_ELKEnable_SetVt
{
    if(getValue(E_pubc_GW_GW_3BD_HU_ELKEnable_SetVt))
    {
        //update the signal value
        Msg_GW_3BD.HU_ELKEnable=getvalue(E_pubc_GW_GW_3BD_HU_ELKEnable_Vt);
    }
    else
    {
        Msg_GW_3BD.HU_ELKEnable=getValue(E_pubc_GW_GW_3BD_HU_ELKEnable_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_tx
{
    if(getValue(this))
    {       
        

        output(Msg_GW_28B);        
    }
}

on envVar E_pubc_GW_GW_28B_Range
{
    qword rawstatus = 0ll;
    qword rawValue = 0ll;    
    
    rawstatus = getvalue(this);    
    // set all the signals with min raw /max raw /init raw
    switch (rawstatus) 
    {
     case(0) :
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_LCM_LASSwitch_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv, rawValue);
        break;
     case(1) :
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_LCM_LASSwitch_Rv, rawValue);
        rawValue= 1;
        putValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv, rawValue);
        rawValue= 3;
        putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv, rawValue);
        break;
     default :
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_LCM_LASSwitch_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv, rawValue);
        rawValue= 0;
        putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv, rawValue);
      break;
   }
}

on envVar E_pubc_GW_GW_28B_Dlc
{
    if(getValue(E_pubc_GW_GW_28B_enDlc))
    {
        Msg_GW_28B.dlc =getValue(this);
    }
    else
    {
        Msg_GW_28B.dlc =8;
    }
}

on envVar E_pubc_GW_GW_28B_enDlc
{
    //For Messages with DLC = 8, set wrong DLC to smaller than defined DLC
    //For Messages with DLC < 8 set wrong DLC to smaller/longer than defined DLC
    if(getValue(this))
    {
        Msg_GW_28B.dlc =getValue(E_pubc_GW_GW_28B_Dlc);
    }
    else
    {
        Msg_GW_28B.dlc =8;
    }
}


on envVar E_pubc_GW_GW_28B_LCM_LASSwitch_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_LCM_LASSwitch_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_LCM_LASSwitch == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_LCM_LASSwitch_Pv, phyValue);
            chgEv_GW_28B_LCM_LASSwitch = 1;
        }
        else
        {
            chgEv_GW_28B_LCM_LASSwitch = 0;
        }    
        //update the signal value
        Msg_GW_28B.LCM_LASSwitch=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_LCM_LASSwitch_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_LCM_LASSwitch_SetVt)==0)
    {
        if(chgEv_GW_28B_LCM_LASSwitch == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_LCM_LASSwitch_Rv, rawValue);
            chgEv_GW_28B_LCM_LASSwitch = 1;  
        }
        else
        {
            chgEv_GW_28B_LCM_LASSwitch = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_LCM_LASSwitch_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_LCM_LASSwitch_SetVt))
    {
        //update the signal value
        Msg_GW_28B.LCM_LASSwitch=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_LCM_LASSwitch_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_LCM_LASSwitch_SetVt))
    {
        //update the signal value
        Msg_GW_28B.LCM_LASSwitch=getvalue(E_pubc_GW_GW_28B_LCM_LASSwitch_Vt);
    }
    else
    {
        Msg_GW_28B.LCM_LASSwitch=getValue(E_pubc_GW_GW_28B_LCM_LASSwitch_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_DriverDoorStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Pv, phyValue);
            chgEv_GW_28B_BCM_DriverDoorStatus = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_DriverDoorStatus = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_DriverDoorStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_DriverDoorStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv, rawValue);
            chgEv_GW_28B_BCM_DriverDoorStatus = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_DriverDoorStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_DriverDoorStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_DriverDoorStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_DriverDoorStatus=getvalue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_DriverDoorStatus=getValue(E_pubc_GW_GW_28B_BCM_DriverDoorStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_emergencylightstatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Pv, phyValue);
            chgEv_GW_28B_BCM_emergencylightstatus = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_emergencylightstatus = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_emergencylightstatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_emergencylightstatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_emergencylightstatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv, rawValue);
            chgEv_GW_28B_BCM_emergencylightstatus = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_emergencylightstatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_emergencylightstatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_emergencylightstatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_emergencylightstatus_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_emergencylightstatus=getvalue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_emergencylightstatus=getValue(E_pubc_GW_GW_28B_BCM_emergencylightstatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_LowBeamStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Pv, phyValue);
            chgEv_GW_28B_BCM_LowBeamStatus = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_LowBeamStatus = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_LowBeamStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_LowBeamStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_LowBeamStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv, rawValue);
            chgEv_GW_28B_BCM_LowBeamStatus = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_LowBeamStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_LowBeamStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_LowBeamStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_LowBeamStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_LowBeamStatus=getvalue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_LowBeamStatus=getValue(E_pubc_GW_GW_28B_BCM_LowBeamStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_TurnIndicatorLeft == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Pv, phyValue);
            chgEv_GW_28B_BCM_TurnIndicatorLeft = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_TurnIndicatorLeft = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_TurnIndicatorLeft=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_TurnIndicatorLeft == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv, rawValue);
            chgEv_GW_28B_BCM_TurnIndicatorLeft = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_TurnIndicatorLeft = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_TurnIndicatorLeft=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_TurnIndicatorLeft=getvalue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_TurnIndicatorLeft=getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorLeft_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_TurnLightSwitchSts == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Pv, phyValue);
            chgEv_GW_28B_BCM_TurnLightSwitchSts = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_TurnLightSwitchSts = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_TurnLightSwitchSts=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_TurnLightSwitchSts == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv, rawValue);
            chgEv_GW_28B_BCM_TurnLightSwitchSts = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_TurnLightSwitchSts = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_TurnLightSwitchSts=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_TurnLightSwitchSts=getvalue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_TurnLightSwitchSts=getValue(E_pubc_GW_GW_28B_BCM_TurnLightSwitchSts_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_HighBeamStatus == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Pv, phyValue);
            chgEv_GW_28B_BCM_HighBeamStatus = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_HighBeamStatus = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_HighBeamStatus=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_HighBeamStatus_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_HighBeamStatus == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv, rawValue);
            chgEv_GW_28B_BCM_HighBeamStatus = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_HighBeamStatus = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_HighBeamStatus_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_HighBeamStatus=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_HighBeamStatus_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_HighBeamStatus=getvalue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_HighBeamStatus=getValue(E_pubc_GW_GW_28B_BCM_HighBeamStatus_Rv);
    }
}
 
on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv
{
    int64 rawValue = 0ll;
    float rawValue_float = 0.0;
    float phyValue = 0.0;        

    //set the signal with updated raw value
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_SetVt)==0)
    {
        rawValue = getvalue(this);
        if(chgEv_GW_28B_BCM_TurnIndicatorRight == 0)
        {
            //type conversion to float
            rawValue_float = rawValue;        
            // raw to physical conversion
            phyValue = ((rawValue_float *1)+(0));
            putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Pv, phyValue);
            chgEv_GW_28B_BCM_TurnIndicatorRight = 1;
        }
        else
        {
            chgEv_GW_28B_BCM_TurnIndicatorRight = 0;
        }    
        //update the signal value
        Msg_GW_28B.BCM_TurnIndicatorRight=rawValue;        
    }                                                                           
}

on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Pv
{
    int64 rawValue = 0ll;
    float phyValue = 0.0;
    
    //update the raw value with physical value 
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_SetVt)==0)
    {
        if(chgEv_GW_28B_BCM_TurnIndicatorRight == 0)
        {
            phyValue = getvalue(this);
            // physical to raw conversion
            rawValue = ((phyValue -(0))/1);
            putValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv, rawValue);
            chgEv_GW_28B_BCM_TurnIndicatorRight = 1;  
        }
        else
        {
            chgEv_GW_28B_BCM_TurnIndicatorRight = 0;
        }
    }
}

on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Vt
{
    qword rawValue = 0ll;
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_TurnIndicatorRight=getValue(this);
    }
}

on envVar E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_SetVt
{
    if(getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_SetVt))
    {
        //update the signal value
        Msg_GW_28B.BCM_TurnIndicatorRight=getvalue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Vt);
    }
    else
    {
        Msg_GW_28B.BCM_TurnIndicatorRight=getValue(E_pubc_GW_GW_28B_BCM_TurnIndicatorRight_Rv);
    }
}
 

update_GW_18E_EMS_RollingCounter_1A6_counter()
{
    //update the signal value
    Msg_GW_18E.EMS_RollingCounter_1A6=GW_18E_EMS_RollingCounter_1A6_counter;
    
    if(GW_18E_EMS_RollingCounter_1A6_counter == 15)
    {
        GW_18E_EMS_RollingCounter_1A6_counter =0;
    }
    else
    {
        GW_18E_EMS_RollingCounter_1A6_counter =GW_18E_EMS_RollingCounter_1A6_counter+1;
    }    
    
}
update_GW_3C4_HU_RollingCounter_3C2_counter()
{
    //update the signal value
    Msg_GW_3C4.HU_RollingCounter_3C2=GW_3C4_HU_RollingCounter_3C2_counter;
    
    if(GW_3C4_HU_RollingCounter_3C2_counter == 15)
    {
        GW_3C4_HU_RollingCounter_3C2_counter =0;
    }
    else
    {
        GW_3C4_HU_RollingCounter_3C2_counter =GW_3C4_HU_RollingCounter_3C2_counter+1;
    }    
    
}
update_GW_3C4_HU_RollingCounter_3B8_counter()
{
    //update the signal value
    Msg_GW_3C4.HU_RollingCounter_3B8=GW_3C4_HU_RollingCounter_3B8_counter;
    
    if(GW_3C4_HU_RollingCounter_3B8_counter == 15)
    {
        GW_3C4_HU_RollingCounter_3B8_counter =0;
    }
    else
    {
        GW_3C4_HU_RollingCounter_3B8_counter =GW_3C4_HU_RollingCounter_3B8_counter+1;
    }    
    
}
update_GW_3C4_HU_RollingCounter_3C6_counter()
{
    //update the signal value
    Msg_GW_3C4.HU_RollingCounter_3C6=GW_3C4_HU_RollingCounter_3C6_counter;
    
    if(GW_3C4_HU_RollingCounter_3C6_counter == 15)
    {
        GW_3C4_HU_RollingCounter_3C6_counter =0;
    }
    else
    {
        GW_3C4_HU_RollingCounter_3C6_counter =GW_3C4_HU_RollingCounter_3C6_counter+1;
    }    
    
}
update_GW_3C4_HU_RollingCounter_3C7_counter()
{
    //update the signal value
    Msg_GW_3C4.HU_RollingCounter_3C7=GW_3C4_HU_RollingCounter_3C7_counter;
    
    if(GW_3C4_HU_RollingCounter_3C7_counter == 15)
    {
        GW_3C4_HU_RollingCounter_3C7_counter =0;
    }
    else
    {
        GW_3C4_HU_RollingCounter_3C7_counter =GW_3C4_HU_RollingCounter_3C7_counter+1;
    }    
    
}
update_GW_3C4_HU_RollingCounter_3C4_counter()
{
    //update the signal value
    Msg_GW_3C4.HU_RollingCounter_3C4=GW_3C4_HU_RollingCounter_3C4_counter;
    
    if(GW_3C4_HU_RollingCounter_3C4_counter == 15)
    {
        GW_3C4_HU_RollingCounter_3C4_counter =0;
    }
    else
    {
        GW_3C4_HU_RollingCounter_3C4_counter =GW_3C4_HU_RollingCounter_3C4_counter+1;
    }    
    
}
update_GW_50_SRS_RollingCounter_id050_counter()
{
    //update the signal value
    Msg_GW_50.SRS_RollingCounter_id050=GW_50_SRS_RollingCounter_id050_counter;
    
    if(GW_50_SRS_RollingCounter_id050_counter == 15)
    {
        GW_50_SRS_RollingCounter_id050_counter =0;
    }
    else
    {
        GW_50_SRS_RollingCounter_id050_counter =GW_50_SRS_RollingCounter_id050_counter+1;
    }    
    
}
update_GW_188_TCU_RollingCounter_188_counter()
{
    //update the signal value
    Msg_GW_188.TCU_RollingCounter_188=GW_188_TCU_RollingCounter_188_counter;
    
    if(GW_188_TCU_RollingCounter_188_counter == 15)
    {
        GW_188_TCU_RollingCounter_188_counter =0;
    }
    else
    {
        GW_188_TCU_RollingCounter_188_counter =GW_188_TCU_RollingCounter_188_counter+1;
    }    
    
}
update_GW_24F_EPS_RollingCounter_24F_counter()
{
    //update the signal value
    Msg_GW_24F.EPS_RollingCounter_24F=GW_24F_EPS_RollingCounter_24F_counter;
    
    if(GW_24F_EPS_RollingCounter_24F_counter == 15)
    {
        GW_24F_EPS_RollingCounter_24F_counter =0;
    }
    else
    {
        GW_24F_EPS_RollingCounter_24F_counter =GW_24F_EPS_RollingCounter_24F_counter+1;
    }    
    
}
update_GW_278_ESP_RollingCounter_278_counter()
{
    //update the signal value
    Msg_GW_278.ESP_RollingCounter_278=GW_278_ESP_RollingCounter_278_counter;
    
    if(GW_278_ESP_RollingCounter_278_counter == 15)
    {
        GW_278_ESP_RollingCounter_278_counter =0;
    }
    else
    {
        GW_278_ESP_RollingCounter_278_counter =GW_278_ESP_RollingCounter_278_counter+1;
    }    
    
}
update_GW_1A8_TCU_RollingCounter_1A8_counter()
{
    //update the signal value
    Msg_GW_1A8.TCU_RollingCounter_1A8=GW_1A8_TCU_RollingCounter_1A8_counter;
    
    if(GW_1A8_TCU_RollingCounter_1A8_counter == 15)
    {
        GW_1A8_TCU_RollingCounter_1A8_counter =0;
    }
    else
    {
        GW_1A8_TCU_RollingCounter_1A8_counter =GW_1A8_TCU_RollingCounter_1A8_counter+1;
    }    
    
}
update_EPBi_20B_ESP_RollingCounter_258_counter()
{
    //update the signal value
    Msg_EPBi_20B.ESP_RollingCounter_258=EPBi_20B_ESP_RollingCounter_258_counter;
    
    if(EPBi_20B_ESP_RollingCounter_258_counter == 15)
    {
        EPBi_20B_ESP_RollingCounter_258_counter =0;
    }
    else
    {
        EPBi_20B_ESP_RollingCounter_258_counter =EPBi_20B_ESP_RollingCounter_258_counter+1;
    }    
    
}
update_EPBi_20B_ESP_RollingCounter_277_counter()
{
    //update the signal value
    Msg_EPBi_20B.ESP_RollingCounter_277=EPBi_20B_ESP_RollingCounter_277_counter;
    
    if(EPBi_20B_ESP_RollingCounter_277_counter == 15)
    {
        EPBi_20B_ESP_RollingCounter_277_counter =0;
    }
    else
    {
        EPBi_20B_ESP_RollingCounter_277_counter =EPBi_20B_ESP_RollingCounter_277_counter+1;
    }    
    
}
update_EPBi_20B_ESP_RollingCounter_206_counter()
{
    //update the signal value
    Msg_EPBi_20B.ESP_RollingCounter_206=EPBi_20B_ESP_RollingCounter_206_counter;
    
    if(EPBi_20B_ESP_RollingCounter_206_counter == 15)
    {
        EPBi_20B_ESP_RollingCounter_206_counter =0;
    }
    else
    {
        EPBi_20B_ESP_RollingCounter_206_counter =EPBi_20B_ESP_RollingCounter_206_counter+1;
    }    
    
}
update_EPBi_20B_ESP_RollingCounter_208_counter()
{
    //update the signal value
    Msg_EPBi_20B.ESP_RollingCounter_208=EPBi_20B_ESP_RollingCounter_208_counter;
    
    if(EPBi_20B_ESP_RollingCounter_208_counter == 15)
    {
        EPBi_20B_ESP_RollingCounter_208_counter =0;
    }
    else
    {
        EPBi_20B_ESP_RollingCounter_208_counter =EPBi_20B_ESP_RollingCounter_208_counter+1;
    }    
    
}
update_ADC_2A4_LCDAR_RollingCounter_2AF_counter()
{
    //update the signal value
    Msg_ADC_2A4.LCDAR_RollingCounter_2AF=ADC_2A4_LCDAR_RollingCounter_2AF_counter;
    
    if(ADC_2A4_LCDAR_RollingCounter_2AF_counter == 15)
    {
        ADC_2A4_LCDAR_RollingCounter_2AF_counter =0;
    }
    else
    {
        ADC_2A4_LCDAR_RollingCounter_2AF_counter =ADC_2A4_LCDAR_RollingCounter_2AF_counter+1;
    }    
    
}
update_GW_3AF_HU_RollingCounter_3AF_counter()
{
    //update the signal value
    Msg_GW_3AF.HU_RollingCounter_3AF=GW_3AF_HU_RollingCounter_3AF_counter;
    
    if(GW_3AF_HU_RollingCounter_3AF_counter == 15)
    {
        GW_3AF_HU_RollingCounter_3AF_counter =0;
    }
    else
    {
        GW_3AF_HU_RollingCounter_3AF_counter =GW_3AF_HU_RollingCounter_3AF_counter+1;
    }    
    
}
/*@@end*/
/*@@caplFunc:update_GW_2E2_RLR_RollingCounter_2E2_counter():*///function
update_GW_2E2_RLR_RollingCounter_2E2_counter()
{
    //update the signal value
    Msg_GW_2E2.RLR_RollingCounter_2E2=GW_2E2_RLR_RollingCounter_2E2_counter;
    
    if(GW_2E2_RLR_RollingCounter_2E2_counter == 15)
    {
        GW_2E2_RLR_RollingCounter_2E2_counter =0;
    }
    else
    {
        GW_2E2_RLR_RollingCounter_2E2_counter =GW_2E2_RLR_RollingCounter_2E2_counter+1;
    }    
    
}
/*@@end*/
/*@@caplFunc:update_GW_2E3_RLR_RollingCounter_2E3_counter():*///function
update_GW_2E3_RLR_RollingCounter_2E3_counter()
{
    //update the signal value
    Msg_GW_2E3.RLR_RollingCounter_2E3=GW_2E3_RLR_RollingCounter_2E3_counter;
    
    if(GW_2E3_RLR_RollingCounter_2E3_counter == 15)
    {
        GW_2E3_RLR_RollingCounter_2E3_counter =0;
    }
    else
    {
        GW_2E3_RLR_RollingCounter_2E3_counter =GW_2E3_RLR_RollingCounter_2E3_counter+1;
    }    
    
}
/*@@end*/
/*@@caplFunc:update_GW_17E_EPS_RollingCounter_17E_counter():*///function
update_GW_17E_EPS_RollingCounter_17E_counter()
{
    //update the signal value
    Msg_GW_17E.EPS_RollingCounter_17E=GW_17E_EPS_RollingCounter_17E_counter;
    
    if(GW_17E_EPS_RollingCounter_17E_counter == 15)
    {
        GW_17E_EPS_RollingCounter_17E_counter =0;
    }
    else
    {
        GW_17E_EPS_RollingCounter_17E_counter =GW_17E_EPS_RollingCounter_17E_counter+1;
    }    
    
}
update_GW_17A_ESP_RollingCounter_187_counter()
{
    //update the signal value
    Msg_GW_17A.ESP_RollingCounter_187=GW_17A_ESP_RollingCounter_187_counter;
    
    if(GW_17A_ESP_RollingCounter_187_counter == 15)
    {
        GW_17A_ESP_RollingCounter_187_counter =0;
    }
    else
    {
        GW_17A_ESP_RollingCounter_187_counter =GW_17A_ESP_RollingCounter_187_counter+1;
    }    
    
}
update_GW_28C_GW_MFS_RollingCounter_28C_counter()
{
    //update the signal value
    Msg_GW_28C.GW_MFS_RollingCounter_28C=GW_28C_GW_MFS_RollingCounter_28C_counter;
    
    if(GW_28C_GW_MFS_RollingCounter_28C_counter == 15)
    {
        GW_28C_GW_MFS_RollingCounter_28C_counter =0;
    }
    else
    {
        GW_28C_GW_MFS_RollingCounter_28C_counter =GW_28C_GW_MFS_RollingCounter_28C_counter+1;
    }    
    
}
update_GW_180_SAS_RollingCounter_counter()
{
    //update the signal value
    Msg_GW_180.SAS_RollingCounter=GW_180_SAS_RollingCounter_counter;
    
    if(GW_180_SAS_RollingCounter_counter == 15)
    {
        GW_180_SAS_RollingCounter_counter =0;
    }
    else
    {
        GW_180_SAS_RollingCounter_counter =GW_180_SAS_RollingCounter_counter+1;
    }    
    
}


update_GW_18E_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0,l_count_18E=0;
  int l_data[15];
 
  l_Crc_Len = 24-1;
  for (l_count=8;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count_18E] = Msg_GW_18E.BYTE(l_count);  
      l_count_18E++;
    }
    l_count_18E=0;
       
	Msg_GW_18E.EMS_CRCCheck_1A6 = calc_SAE_J1850(l_data,15); 

	
	if(GW_18E_EMS_CRCCheck_1A6_wrongvalctr != 0)
    {
		Msg_GW_18E.EMS_CRCCheck_1A6+=1; 
        //update signal with wrong CRC value
		if(GW_18E_EMS_CRCCheck_1A6_wrongvalctr > 0)
        {
             GW_18E_EMS_CRCCheck_1A6_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_18E_EMS_CRCCheck_1A6_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_18E_EMS_CRCCheck_1A6_wrongvalctr,0);
             }
        }
	}
}



update_GW_3C4_CRC_CheckSum()
{
  int l_Crc_Len1=0,l_Crc_Len2=0,l_Crc_Len3=0,l_Crc_Len4=0,l_Crc_Len5=0,l_count=0;
  int l_count_3B8=0,l_count_3C2 =0,l_count_3C4=0,l_count_3C6 =0,l_count_3C7 =0;
  int l_data_3B8[8];
  int l_data_3C2[8];
  int l_data_3C4[8];
  int l_data_3C6[8];
  int l_data_3C7[8];
 
  l_Crc_Len1 = 7;
  l_Crc_Len2 = 15;
  l_Crc_Len3 = 23;
  l_Crc_Len4 = 31;
  l_Crc_Len5 = 39;
  //HU_CRCCheck_3B8
  for (l_count=0;l_count<l_Crc_Len1;l_count++)
    {
      l_data_3B8[l_count_3B8] = Msg_GW_3C4.BYTE(l_count);
      l_count_3B8++ ;
    }
    l_count_3B8 =0;
       
	Msg_GW_3C4.BYTE(l_Crc_Len1) = calc_SAE_J1850(l_data_3B8,7); 

	
	if(GW_3C4_HU_CRCCheck_3B8_wrongvalctr != 0)
    {
		Msg_GW_3C4.HU_CRCCheck_3B8+=1; 
        //update signal with wrong CRC value
		if(GW_3C4_HU_CRCCheck_3B8_wrongvalctr > 0)
        {
             GW_3C4_HU_CRCCheck_3B8_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_CRCCheck_3B8_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_CRCCheck_3B8_wrongvalctr,0);
             }
        }
	}
	
	// HU_CRCCheck_3C2
	for (l_count=8;l_count<l_Crc_Len2;l_count++)
    {
      l_data_3C2[l_count_3C2] = Msg_GW_3C4.BYTE(l_count);
      l_count_3C2++;  
    }
     l_count_3C2 = 0;  
	Msg_GW_3C4.BYTE(l_Crc_Len2) = calc_SAE_J1850(l_data_3C2,7); 

	
	if(GW_3C4_HU_CRCCheck_3C2_wrongvalctr != 0)
    {
		Msg_GW_3C4.HU_CRCCheck_3C2+=1; 
        //update signal with wrong CRC value
		if(GW_3C4_HU_CRCCheck_3C2_wrongvalctr > 0)
        {
             GW_3C4_HU_CRCCheck_3C2_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_CRCCheck_3C2_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_CRCCheck_3C2_wrongvalctr,0);
             }
        }
	}
	
	// HU_CRCCheck_3C4
	for (l_count=16;l_count<l_Crc_Len3;l_count++)
    {
      l_data_3C4[l_count_3C4] = Msg_GW_3C4.BYTE(l_count); 
    l_count_3C4++;  
    }
       l_count_3C4 =0;
	Msg_GW_3C4.BYTE(l_Crc_Len3) = calc_SAE_J1850(l_data_3C4,7); 

	
	if(GW_3C4_HU_CRCCheck_3C4_wrongvalctr != 0)
    {
		Msg_GW_3C4.HU_CRCCheck_3C4+=1; 
        //update signal with wrong CRC value
		if(GW_3C4_HU_CRCCheck_3C4_wrongvalctr > 0)
        {
             GW_3C4_HU_CRCCheck_3C4_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_CRCCheck_3C4_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_CRCCheck_3C4_wrongvalctr,0);
             }
        }
	}
	
	// HU_CRCCheck_3C6
	for (l_count=24;l_count<l_Crc_Len4;l_count++)
    {
      l_data_3C6[l_count_3C6] = Msg_GW_3C4.BYTE(l_count);
      l_count_3C6++;  
    }
       l_count_3C6 = 0;
	Msg_GW_3C4.BYTE(l_Crc_Len4) = calc_SAE_J1850(l_data_3C6,7); 

	
	if(GW_3C4_HU_CRCCheck_3C6_wrongvalctr != 0)
    {
		Msg_GW_3C4.HU_CRCCheck_3C6+=1; 
        //update signal with wrong CRC value
		if(GW_3C4_HU_CRCCheck_3C6_wrongvalctr > 0)
        {
             GW_3C4_HU_CRCCheck_3C6_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_CRCCheck_3C6_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_CRCCheck_3C6_wrongvalctr,0);
             }
        }
	}
	
	// HU_CRCCheck_3C7
	for (l_count=32;l_count<l_Crc_Len5;l_count++)
    {
      l_data_3C7[l_count_3C7] = Msg_GW_3C4.BYTE(l_count);
      l_count_3C7++;  
    }
       l_count_3C7 = 0;
	Msg_GW_3C4.BYTE(l_Crc_Len5) = calc_SAE_J1850(l_data_3C7,7); 

	
	if(GW_3C4_HU_CRCCheck_3C7_wrongvalctr != 0)
    {
		Msg_GW_3C4.HU_CRCCheck_3C7+=1; 
        //update signal with wrong CRC value
		if(GW_3C4_HU_CRCCheck_3C7_wrongvalctr > 0)
        {
             GW_3C4_HU_CRCCheck_3C7_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3C4_HU_CRCCheck_3C7_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3C4_HU_CRCCheck_3C7_wrongvalctr,0);
             }
        }
	}
}

update_GW_50_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[8];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_50.BYTE(l_count);    
    }
       
	Msg_GW_50.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_50_SRS_CRCCheck_50_wrongvalctr != 0)
    {
		Msg_GW_50.SRS_CRCCheck_50+=1; 
        //update signal with wrong CRC value
		if(GW_50_SRS_CRCCheck_50_wrongvalctr > 0)
        {
             GW_50_SRS_CRCCheck_50_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_50_SRS_CRCCheck_50_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_50_SRS_CRCCheck_50_wrongvalctr,0);
             }
        }
	}
}
update_GW_188_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_188.BYTE(l_count);    
    }
       
	Msg_GW_188.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_188_TCU_CRCCheck_188_wrongvalctr != 0)
    {
		Msg_GW_188.TCU_CRCCheck_188+=1; 
        //update signal with wrong CRC value
		if(GW_188_TCU_CRCCheck_188_wrongvalctr > 0)
        {
             GW_188_TCU_CRCCheck_188_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_188_TCU_CRCCheck_188_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_188_TCU_CRCCheck_188_wrongvalctr,0);
             }
        }
	}
}
update_GW_24F_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_24F.BYTE(l_count);    
    }
       
	Msg_GW_24F.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_24F_EPS_CRCCheck_24F_wrongvalctr != 0)
    {
		Msg_GW_24F.EPS_CRCCheck_24F+=1; 
        //update signal with wrong CRC value
		if(GW_24F_EPS_CRCCheck_24F_wrongvalctr > 0)
        {
             GW_24F_EPS_CRCCheck_24F_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_24F_EPS_CRCCheck_24F_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_24F_EPS_CRCCheck_24F_wrongvalctr,0);
             }
        }
	}
	
}
update_GW_278_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_278.BYTE(l_count);    
    }
       
	Msg_GW_278.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_278_ESP_CRCCheck_278_wrongvalctr != 0)
    {
		Msg_GW_278.ESP_CRCCheck_278+=1; 
        //update signal with wrong CRC value
		if(GW_278_ESP_CRCCheck_278_wrongvalctr > 0)
        {
             GW_278_ESP_CRCCheck_278_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_278_ESP_CRCCheck_278_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_278_ESP_CRCCheck_278_wrongvalctr,0);
             }
        }
	}
	
}
update_GW_1A8_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_1A8.BYTE(l_count);    
    }
       
	Msg_GW_1A8.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_1A8_TCU_CRCCheck_1A8_wrongvalctr != 0)
    {
		Msg_GW_1A8.TCU_CRCCheck_1A8+=1; 
        //update signal with wrong CRC value
		if(GW_1A8_TCU_CRCCheck_1A8_wrongvalctr > 0)
        {
             GW_1A8_TCU_CRCCheck_1A8_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_1A8_TCU_CRCCheck_1A8_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_1A8_TCU_CRCCheck_1A8_wrongvalctr,0);
             }
        }
	}
}
update_EPBi_20B_CRC_CheckSum(){
  int l_Crc_Len1=0, l_Crc_Len2=0, l_Crc_Len3=0, l_Crc_Len4=0, l_count=0;
  int l_count_206=0, l_count_208 =0, l_count_258=0, l_count_277 =0;
  int l_data_206[8];
  int l_data_208[8];
  int l_data_258[8];
  int l_data_277[8];
  
 
  l_Crc_Len1 = 7;
  l_Crc_Len2 = 15;
  l_Crc_Len3 = 31;
  l_Crc_Len4 = 39;
  // EPS_CRCCheck_206
  for (l_count=0;l_count<l_Crc_Len1;l_count++)
    {
      l_data_206[l_count_206] = Msg_EPBi_20B.BYTE(l_count);
      l_count_206++ ;
    }
    l_count_206 =0;
       
	Msg_EPBi_20B.BYTE(l_Crc_Len1) = calc_SAE_J1850(l_data_206,7); 

	
	if(EPBi_20B_ESP_CRCCheck_206_wrongvalctr != 0)
    {
		Msg_EPBi_20B.ESP_CRCCheck_206 += 1; 
        //update signal with wrong CRC value
		if(EPBi_20B_ESP_CRCCheck_206_wrongvalctr > 0)
        {
             EPBi_20B_ESP_CRCCheck_206_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_CRCCheck_206_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_CRCCheck_206_wrongvalctr,0);
             }
        }
	}
	

   // EPS_CRCCheck_208
	for (l_count=8;l_count<l_Crc_Len2;l_count++)
    {
      l_data_208[l_count_208] = Msg_EPBi_20B.BYTE(l_count);
      l_count_208++;  
    }
     l_count_208 = 0;  
	Msg_EPBi_20B.BYTE(l_Crc_Len2) = calc_SAE_J1850(l_data_208,7); 

	
	if(EPBi_20B_ESP_CRCCheck_208_wrongvalctr != 0)
    {
		Msg_EPBi_20B.ESP_CRCCheck_208+=1; 
        //update signal with wrong CRC value
		if(EPBi_20B_ESP_CRCCheck_208_wrongvalctr > 0)
        {
             EPBi_20B_ESP_CRCCheck_208_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_CRCCheck_208_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_CRCCheck_208_wrongvalctr,0);
             }
        }
	}
	
	
   // EPS_CRCCheck_258
	for (l_count=24;l_count<l_Crc_Len3;l_count++)
    {
      l_data_258[l_count_258] = Msg_EPBi_20B.BYTE(l_count);
      l_count_258++;  
    }
       l_count_258 = 0;
	Msg_EPBi_20B.BYTE(l_Crc_Len3) = calc_SAE_J1850(l_data_258,7); 

	
	if(EPBi_20B_ESP_CRCCheck_258_wrongvalctr != 0)
    {
		Msg_EPBi_20B.ESP_CRCCheck_258+=1; 
        //update signal with wrong CRC value
		if(EPBi_20B_ESP_CRCCheck_258_wrongvalctr > 0)
        {
             EPBi_20B_ESP_CRCCheck_258_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_CRCCheck_258_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_CRCCheck_258_wrongvalctr,0);
             }
        }
	}
	
    // EPS_CRCCheck_277
	for (l_count=32;l_count<l_Crc_Len4;l_count++)
    {
      l_data_277[l_count_277] = Msg_EPBi_20B.BYTE(l_count);
      l_count_277++;  
    }
       l_count_277 = 0;
	Msg_EPBi_20B.BYTE(l_Crc_Len4) = calc_SAE_J1850(l_data_277,7); 

	
	if(EPBi_20B_ESP_CRCCheck_277_wrongvalctr != 0)
    {
		Msg_EPBi_20B.ESP_CRCCheck_277+=1; 
        //update signal with wrong CRC value
		if(EPBi_20B_ESP_CRCCheck_277_wrongvalctr > 0)
        {
             EPBi_20B_ESP_CRCCheck_277_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(EPBi_20B_ESP_CRCCheck_277_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_EPBi_20B_ESP_CRCCheck_277_wrongvalctr,0);
             }
        }
	}
}
	

update_ADC_2A4_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_ADC_2A4.BYTE(l_count);    
    }
       
	Msg_ADC_2A4.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr != 0)
    {
		Msg_ADC_2A4.LCDAR_CRCCheck_2AF+=1; 
        //update signal with wrong CRC value
		if(ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr > 0)
        {
             ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_ADC_2A4_LCDAR_CRCCheck_2AF_wrongvalctr,0);
             }
        }
	}
}
update_GW_3AF_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0,l_count_3AF=0;
  int l_data[8];
 
  l_Crc_Len = 32-1;
  for (l_count=24;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count_3AF] = Msg_GW_3AF.BYTE(l_count);
      l_count_3AF++;
    }
    l_count_3AF=0;
       
	Msg_GW_3AF.HU_CRCCheck_3AF = calc_SAE_J1850(l_data,7); 

	
	if(GW_3AF_HU_CRCCheck_3AF_wrongvalctr != 0)
    {
		Msg_GW_3AF.HU_CRCCheck_3AF+=1; 
        //update signal with wrong CRC value
		if(GW_3AF_HU_CRCCheck_3AF_wrongvalctr > 0)
        {
             GW_3AF_HU_CRCCheck_3AF_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_3AF_HU_CRCCheck_3AF_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_3AF_HU_CRCCheck_3AF_wrongvalctr,0);
             }
        }
	}
}
/*@@end*/
/*@@caplFunc:update_GW_2E2_CRC_CheckSum():*///function
update_GW_2E2_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0,l_count_2E2=0;
  int l_data[64];

 
  l_Crc_Len = 64-2;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count_2E2] = Msg_GW_2E2.BYTE(l_count); 
		l_count_2E2++;
    }
       l_count_2E2 = 0;
	Msg_GW_2E2.BYTE(l_Crc_Len) = calc_CRC16_CCITT_FALSE_H1021(l_data,l_Crc_Len); 

	
	if(GW_2E2_RLR_CRCCheck_2E2_wrongvalctr != 0)
    {
		Msg_GW_2E2.RLR_CRCCheck_2E2+=1; 
        //update signal with wrong CRC value
		if(GW_2E2_RLR_CRCCheck_2E2_wrongvalctr > 0)
        {
             GW_2E2_RLR_CRCCheck_2E2_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_2E2_RLR_CRCCheck_2E2_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_2E2_RLR_CRCCheck_2E2_wrongvalctr,0);
             }
        }
	}
}
/*@@end*/
/*@@caplFunc:update_GW_2E3_CRC_CheckSum():*///function
update_GW_2E3_CRC_CheckSum()
{
  int l_Crc_Len=0,
	  l_count=0,
	  l_count_2E3;
  int l_data[64];
 
  l_Crc_Len = 64-2;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count_2E3] = Msg_GW_2E3.BYTE(l_count);   
		l_count_2E3++;
    }
       l_count_2E3 = 0;
	Msg_GW_2E3.BYTE(l_Crc_Len) = calc_CRC16_CCITT_FALSE_H1021(l_data,l_Crc_Len); 

	
	if(GW_2E3_RLR_CRCCheck_2E3_wrongvalctr != 0)
    {
		Msg_GW_2E3.RLR_CRCCheck_2E3+=1; 
        //update signal with wrong CRC value
		if(GW_2E3_RLR_CRCCheck_2E3_wrongvalctr > 0)
        {
             GW_2E3_RLR_CRCCheck_2E3_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_2E3_RLR_CRCCheck_2E3_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_2E3_RLR_CRCCheck_2E3_wrongvalctr,0);
             }
        }
	}
}
/*@@end*/
/*@@caplFunc:update_GW_17E_CRC_CheckSum():*///function
update_GW_17E_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_17E.BYTE(l_count);    
    }
       
	Msg_GW_17E.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_17E_EPS_CRCCheck_17E_wrongvalctr != 0)
    {
		Msg_GW_17E.EPS_CRCCheck_17E+=1; 
        //update signal with wrong CRC value
		if(GW_17E_EPS_CRCCheck_17E_wrongvalctr > 0)
        {
             GW_17E_EPS_CRCCheck_17E_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_17E_EPS_CRCCheck_17E_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_17E_EPS_CRCCheck_17E_wrongvalctr,0);
             }
        }
	}
}
update_GW_17A_CRC_CheckSum()
{
  int l_Crc_Len197=0, l_Crc_Len187 = 0;
  int l_count=0, l_count_197=0, l_count_187=0;
  int l_data_187[8],
	  l_data_197[8];
 
  l_Crc_Len197 = 16-1;
  l_Crc_Len187 = 8-1;
  
  // ESP_CRCCheck_197
  for (l_count=8;l_count<l_Crc_Len197;l_count++)
    {
      l_data_197[l_count_197] = Msg_GW_17A.BYTE(l_count); 
      l_count_197++;
    }
    l_count_197=0;
       
	Msg_GW_17A.ESP_CRCCheck_197 = calc_SAE_J1850(l_data_197,7); 

	
	if(GW_17A_ESP_CRCCheck_197_wrongvalctr != 0)
    {
		Msg_GW_17A.ESP_CRCCheck_197+=1; 
        //update signal with wrong CRC value
		if(GW_17A_ESP_CRCCheck_197_wrongvalctr > 0)
        {
             GW_17A_ESP_CRCCheck_197_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_17A_ESP_CRCCheck_197_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_17A_ESP_CRCCheck_197_wrongvalctr,0);
             }
        }
	}

  // ESP_CRCCheck_187
  for (l_count=0;l_count<l_Crc_Len187;l_count++)
    {
      l_data_187[l_count_187] = Msg_GW_17A.BYTE(l_count);  
      l_count_187++;
    }
    l_count_187=0;
       
	Msg_GW_17A.ESP_CRCCheck_187 = calc_SAE_J1850(l_data_187,7); 

	
	if(GW_17A_ESP_CRCCheck_187_wrongvalctr != 0)
    {
		Msg_GW_17A.ESP_CRCCheck_187+=1; 
        //update signal with wrong CRC value
		if(GW_17A_ESP_CRCCheck_187_wrongvalctr > 0)
        {
             GW_17A_ESP_CRCCheck_187_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_17A_ESP_CRCCheck_187_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_17A_ESP_CRCCheck_187_wrongvalctr,0);
             }
        }
	}
	
}

update_GW_28C_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_28C.BYTE(l_count);    
    }
       
	Msg_GW_28C.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr != 0)
    {
		Msg_GW_28C.GW_MFS_CRCCheck_28C+=1; 
        //update signal with wrong CRC value
		if(GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr > 0)
        {
             GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_28C_GW_MFS_CRCCheck_28C_wrongvalctr,0);
             }
        }
	}
	
}
update_GW_180_CRC_CheckSum()
{
  int l_Crc_Len=0,l_count=0;
  int l_data[64];
 
  l_Crc_Len = 8-1;
  for (l_count=0;l_count<l_Crc_Len;l_count++)
    {
      l_data[l_count] = Msg_GW_180.BYTE(l_count);    
    }
       
	Msg_GW_180.BYTE(l_Crc_Len) = calc_SAE_J1850(l_data,l_Crc_Len); 

	
	if(GW_180_SAS_CRCCheck_wrongvalctr != 0)
    {
		Msg_GW_180.SAS_CRCCheck+=1; 
        //update signal with wrong CRC value
		if(GW_180_SAS_CRCCheck_wrongvalctr > 0)
        {
             GW_180_SAS_CRCCheck_wrongvalctr--;
              // if counter becomes zero, update panel controller to zero
             if(GW_180_SAS_CRCCheck_wrongvalctr == 0)
             {
                 putValue(E_pubc_GW_GW_180_SAS_CRCCheck_wrongvalctr,0);
             }
        }
	}
	
}




int calc_SAE_J1850(int data[], int Crc_len)
	{
		int idx,crc,temp,temp1;
		crc = 0xFF;
        idx = 0;
        temp = 0;
        temp1 = 0;
	
        for(idx=0;idx < Crc_len;idx++)
        {
         temp1 = data[idx];
         temp = (crc^temp1);
         crc = CRC_J1850_Table[temp];
       }
		crc ^= 0xFF;
		return crc;
	}

//GW_50_Checksum
int GW_50_Checksum(int data)
	{
		int idx,crc;
		   crc = 0;
        idx = 0;
	      crc = data ^ 0xF;
//        for(idx=1;idx < Crc_len;idx++)
//        {
//         crc=crc^data[idx];
//       }
		//crc ^= 0xF0;
		return crc;
	}




	/*	int calc_SAE_J1851(int data[], int Crc_len)
	{
		int crc;
		
        crc = (data[0]+data[1]+data[2]+data[3]+data[4]+data[5]+data[6]) ;
          
		crc ^= 255;
		return crc;
	}*/

int calc_CRC16_CCITT_FALSE_H1021(int data[], int Crc_len)
{
	int idx, crc;

	crc = 0xFFFF;
	
    for (idx=0; idx<Crc_len; idx++)
    {
        /* Impact of temporary rest on next crc rest */
        /* MISRA RULE 12.8 VIOLATION: Shift is performed in the context of a data stream */
        crc ^= data[idx] << 8;

        /* Next temporary crc rest */
        /* MISRA RULE 12.8 VIOLATION: Shift is performed in the context of a data stream */
        crc = (crc << (8)) ^ CRC16_CCITT_FALSE_H1021_Table[(crc >> (8)) & (0xFF)];
    }
	return crc;
}	

/* 	int calc_SAE_J1850(int data, int Crc_len)
	{
		int idx,crc,temp,temp1,temp2,idy;
		crc = 0xFF;
        idx = 0;
        idy = 0;
        temp = 0;
        temp1 = 0;
        temp2 = 0;
	
        for(idx=0;idx < Crc_len;idx++)
        {
         temp1 = data[idx];
         crc = (crc^temp1);
          for (idy=8; idy>0; idy--)
          {
              // Save the value before the top bit is shifted out.
              temp2 = crc;
              crc <<= 1;
              if (0 != (temp2 & 128))
              {
                  crc ^= 0x2f;
              }
          } 
          
         //crc = CRC_J1850_Table[temp];
        }
		crc ^= 0xFF;
		return crc;
	} */

